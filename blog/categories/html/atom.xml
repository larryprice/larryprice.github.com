<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | Larry Price]]></title>
  <link href="https://larry-price.com/blog/categories/html/atom.xml" rel="self"/>
  <link href="https://larry-price.com/"/>
  <updated>2017-09-14T21:44:10-05:00</updated>
  <id>https://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    <email><![CDATA[larry@larry-price.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sticky footer with Twitter Bootstrap]]></title>
    <link href="https://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap/"/>
    <updated>2014-03-24T20:12:50-04:00</updated>
    <id>https://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>Sometimes CSS is a total pain.</p>

<p>We encountered a major CSS problem while working on our incredible startup weekend project <a href="//ollert.herokuapp.com">Ollert</a>. We had created a footer that we wanted below all of our content. We threw together some quick HTML and got a footer below all of the main content, and it looked really good when our main content filled up the entire screen.</p>

<p>What about when there was very little data on the screen? Well, then the footer just floated in the middle of the page, staring at us like some kind of psychotic hummingbird, waiting to slice you up when you&rsquo;re not looking. We searched online and found lots of different solutions; None of them worked. The footer just floated there, taunting us; Telling us to cry home to mommy. So we gave up on the prospect for the rest of the afternoon.</p>

<p>A few days after startup weekend, I found the real solution from the good folks at <a href="//getbootstrap.com/2.3.2/examples/sticky-footer.html">Twitter Bootstrap</a> themselves. It&rsquo;s pretty simple, really. Hooray for the internet!</p>

<p>Below is the HTML to create this effect with all the CSS styles embedded. Marked up with plenty of comments.</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" style="height: 100%;"&gt;
  &lt;head&gt;
    &lt;link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"&gt;
  &lt;/head&gt;
  &lt;body style="height: 100%;"&gt;
    &lt;div id="wrap" style="min-height: 100%; height: auto !important; height: 100%; margin: 0 auto -50px;"&gt;
      &lt;!-- All your content goes inside wrap. --&gt;
      &lt;!-- The bottom margin must be negative the footer min-height --&gt;
      &lt;!-- Footer min-height is set to 50px in this case --&gt;
      &lt;div class="container"&gt;
        &lt;div class="row"&gt;
          &lt;div class="h1"&gt;
            All Your Content
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
          All your content will go inside the 'wrap' div.
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id="push" style="min-height: 50px;"&gt;
        &lt;!-- This push node should be inside wrap and empty --&gt;
        &lt;!-- Min-height is equal to the min-height of the footer --&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
  &lt;div id="footer" style="min-height: 50px;"&gt;
    &lt;!-- Some sweet footer content --&gt;
    &lt;div class="container"&gt;
      &lt;div class="small"&gt;
        Zowee, I've got a footer stuck to the bottom!
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</code></pre>

<p>Div tag ids such as &ldquo;wrap&rdquo;, &ldquo;push&rdquo;, and &ldquo;footer&rdquo; can be whatever you want. The height of the footer can be adjusted to fit whatever content you want; I found that using <code>min-height</code> instead of <code>height</code> allowed my content to resize appropriately when wrapped. Styles should definitely be moved to a css file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to the Trello API]]></title>
    <link href="https://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/"/>
    <updated>2014-03-18T20:00:11-04:00</updated>
    <id>https://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api</id>
    <content type="html"><![CDATA[<p><a href="//trello.com">Trello</a> has a <a href="//trello.com/docs/">pretty sweet API</a>, which we use extensively in our Trello-analysis app <a href="//ollert.herokuapp.com">Ollert</a>. Initially connecting to the Trello API took us a few hours, so I&rsquo;d like to make a record of how we managed to connect.</p>

<p>Making a connection to Trello requires two hashcodes: an application key and a Trello member token. You can generate and view your application key by visiting <a href="//trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>.</p>

<p>The member token is something we need to get from the user. There are two ways to get a user&rsquo;s member token: through fragments and through a <strong>postMessage</strong>. You can also request different levels of access (read, write, read+write), and different expiration periods (such as 1 day, 30 days, or never) for member tokens. For the remainder of this writing, I&rsquo;ll be accessing a read-only member token that never expires.</p>

<p>We didn&rsquo;t have a lot of luck with fragments, but the concept is simple enough. You have the user click a link that probably says &ldquo;Connect With Trello&rdquo; which is similar to:</p>

<p><code>https://trello.com/1/authorize?key=applicationkey&amp;name=applicationname&amp;expiration=never&amp;response_type=token</code></p>

<p>At this point, the user is redirected to Trello and given the opportunity to Allow or Deny your application access. Once allowed, the user sees a static Trello page with their member token in plain text. Somehow you"re supposed to convey to them that they should copy this token and paste it back to you. This has clear drawbacks in usability.</p>

<p>Using the <strong>postMessage</strong> method of accessing a member token was significantly more fruitful. Trello provides a Javascript file named <a href="https://trello.com/docs/gettingstarted/clientjs.html">client.js</a> that does most of the legwork for you. An example:</p>

<pre><code class="haml">%script{src: "//api.trello.com/1/client.js?key=applicationkey"}

function AuthenticateTrello() {
  Trello.authorize({
    name: "YourApplication",
    type: "popup",
    interactive: true,
    expiration: "never",
    persist: true,
    success: function () { onAuthorizeSuccessful(); },
    scope: { write: false, read: true },
  });
}
function onAuthorizeSuccessful() {
  var token = Trello.token();
  window.location.replace("/auth?token=" + token);
}

%a{href: "javascript:void(0)", onClick: "AuthenticateTrello()"}
  Connect With Trello
</code></pre>

<p>When the user clicks the link, we have Trello set to activate a &ldquo;popup&rdquo; that will ask them to &ldquo;Allow&rdquo; or &ldquo;Deny&rdquo; our app from accessing their data. When the user allows us access, the popup closes and we hit the &ldquo;onAuthorizeSuccessful&rdquo; method. In my method, I simply redirect them to the <code>/auth</code> route with <code>token</code> manually added to the params list. One of the interesting options listed above is the &ldquo;persist&rdquo; option, which tells Trello whether it should prompt the user for his or her token every time. By telling Trello to persist, the user will only be presented with the popup when he or she needs to reauthenticate.</p>

<p>You can learn more about member tokens from <a href="//trello.com/docs/gettingstarted/authorize.html">https://trello.com/docs/gettingstarted/authorize.html</a>.</p>
]]></content>
  </entry>
  
</feed>
