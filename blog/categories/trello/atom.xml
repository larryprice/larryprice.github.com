<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: trello | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/trello/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2014-07-13T17:16:07-04:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ollert - Reveal The Data Behind Your Trello Boards]]></title>
    <link href="http://larry-price.com/blog/2014/07/13/ollert-reveal-the-data-behind-your-trello-boards/"/>
    <updated>2014-07-13T17:15:00-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/13/ollert-reveal-the-data-behind-your-trello-boards</id>
    <content type="html"><![CDATA[<p>Introducing <a href="https://ollertapp.com">Ollert</a>, a tool to show you what your <a href="//trello.com">Trello</a> boards can&rsquo;t tell you on their own.</p>

<p>Trello does a great job of telling you about the here and now of your Trello boards; who&rsquo;s working on what task and what is the current state of a task. But what if I want to know about the state of the whole project? How many work items have we finished in the past sprint, iteration, or duration of the project? He who does not understand the past is destined to repeat his mistakes ad nauseum.</p>

<p>Ollert is a tool with these ideas in mind. Authorize Ollert access to your Trello account, select the board you would like to learn more about, and see all the battle scars your board has experienced throughout the duration of the project.</p>

<p>Learn about your velocity through a Cumulative Flow Diagram. View your work in progress with a WIP chart. See which labels your team uses most frequently with our label chart. See information about your cards and lists from a historical perspective.</p>

<p><a href="https://ollertapp.com/signup">Create an account</a> with Ollert to show your support. Users who sign up for an Ollert account will have their Trello authorization saved, saving the hassle of authorizing with Trello every time the user visits the site. An Ollert account is perfect for any user who views board progress frequently, or for creating a continuous display on an office monitor.</p>

<p>Since Ollert&rsquo;s initial release <a href="/blog/2014/03/17/sep-startup-weekend-ollert/">several months ago</a>, Ollert now boasts over 4000% faster load times, increased data security using SSL and encrypted cookies, and a more consistent Trello connection experience in all modern web browsers.</p>

<p>Discover Ollert now at <a href="https://ollertapp.com">ollertapp.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deauthorizing Token with the Trello Client]]></title>
    <link href="http://larry-price.com/blog/2014/07/07/deauthorizing-token-with-the-trello-client/"/>
    <updated>2014-07-07T05:59:13-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/07/deauthorizing-token-with-the-trello-client</id>
    <content type="html"><![CDATA[<p>In my <a href="https://ollertapp.com">application</a>, a user can connect to Trello without logging in. Whenever this &ldquo;anonymous&rdquo; user hits the landing page, I attempt to force the <a href="https://trello.com/docs/gettingstarted/clientjs.html">Trello client</a> to authorize the user again. By doing this, the user can return to the landing page whenever he or she likes to switch usernames. My authorize code looks like this:</p>

<p>``` javascript
function AuthenticateTrelloAlways() {
  Trello.authorize({</p>

<pre><code>name: "Ollert",
type: "popup",
interactive: true,
expiration: "1hour",
persist: false,
success: onAuthorizeSuccessful,
scope: {
  read: true
},
</code></pre>

<p>  });
}
```</p>

<p>This works oh-so-wonderfully in Chrome and Firefox, but, even during the hackathon which spawned <a href="https://ollertapp.com">Ollert</a>, we noticed that IE10/11 were causing some unexpected issues. Authorization would work the first time the user hit the landing page, but on subsequent visits telling Trello to Allow or Deny access resulted in the popup showing a white screen and never calling my callback function. Closing and reopening IE would allow me to authorize once, presumably until the &ldquo;1hour&rdquo; that I requested the original token for expired. I also verified this problem existed in IE9.</p>

<p>After several hours tweeting obscenities about IE, I stumbled upon the answer while browsing the source code for Trello&rsquo;s <a href="https://trello.com/1/client.coffee">client.coffee</a>. About one third of the way through the code, I found this function:</p>

<p>``` javascript</p>

<h1>Clear any existing authorization</h1>

<p>deauthorize: &ndash;>
  token = null
  writeStorage(&ldquo;token&rdquo;, token)
  return
```</p>

<p>All this code does is unset the class variable <code>token</code> and unset the local store variable of the same name. So I changed my <code>AuthenticateTrelloAlways()</code> method:</p>

<p>``` javascript
function AuthenticateTrelloAlways() {
  Trello.deauthorize();</p>

<p>  Trello.authorize({</p>

<pre><code>name: "Ollert",
type: "popup",
interactive: true,
expiration: "1hour",
persist: false,
success: onAuthorizeSuccessful,
scope: {
  read: true
},
</code></pre>

<p>  });
}
```</p>

<p>Voil√†. Why does this only happen in IE? I was originally going to blame the local store, but, since I was able to reproduce the defect in IE9 (no HTML5), I no longer believe that to be the case. I&rsquo;m currently resigned to chalk it up as IE just being IE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Trello API in Ruby]]></title>
    <link href="http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby/"/>
    <updated>2014-03-20T19:37:36-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby</id>
    <content type="html"><![CDATA[<p>So, you want to gather data using the <a href="//trello.com">Trello</a> API so that you can <a href="//ollert.herokuapp.com">do something cool with it</a>? And you&rsquo;re using <a href="//ruby-lang.org">Ruby</a>? Enter <a href="//github.com/jeremytregunna/ruby-trello">ruby-trello</a>. Install!</p>

<p><code>bash
$ gem install ruby-trello
</code></p>

<p>We&rsquo;ll start off easy, and assume that we&rsquo;re writing a personal application where we only need to access data for one user at a time. We start by configuring ruby-trello. I&rsquo;m going to assume that you&rsquo;ve already generated a public key and received a member token and stored them in your environment.</p>

<p>``` ruby global_config_test.rb
require &lsquo;trello&rsquo;</p>

<p>Trello.configure do |config|
  # API key generated by visiting <a href="https://trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>
  config.developer_public_key = ENV[&lsquo;PUBLIC_KEY&rsquo;]</p>

<p>  # Member token
  # larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/
  config.member_token = ENV[&lsquo;MEMBER_TOKEN&rsquo;]
end
```</p>

<p>This connects me to a specific member as found through <code>ENV['MEMBER_TOKEN']</code>. I previously wrote <a href="/blog/2014/03/18/connecting-to-the-trello-api/">another post</a> about getting a member token from a user.</p>

<p>For demonstration, I&rsquo;ll find myself, grab my first board, and then display the name, names of lists, members who have worked on the project, and some numbers about each of the cards in the board. This is essentially my proof of concept for a <a href="/blog/2014/03/17/sep-startup-weekend-ollert/">super-cool web-app I wrote</a> called <a href="//ollert.herokuapp.com">Ollert</a>.</p>

<p>``` ruby global_config_test.rb
&hellip;</p>

<h1>find myself</h1>

<p>me = Trello::Member.find(&ldquo;_larryprice&rdquo;)</p>

<h1>find first board</h1>

<p>board = me.boards.first
puts board.name
puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
board.cards.each do |card|</p>

<pre><code>  puts "- \"#{card.name}\""
  puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
  puts "-- Members: #{card.members.count}"
  puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>end
```</p>

<p>Wow, cool! Such data! This is really great for a single user because we only have to make the connection to Trello once (which is not incredibly fast). However, this won&rsquo;t work in a multi-user environment since we configured ruby-trello to use a specific member token. So how do we connect to multiple members at a time? Let&rsquo;s print out the same data we did above for a single user, but using <code>Trello::Client</code> to connect to Trello.</p>

<p>``` ruby client_test.rb
require &lsquo;trello&rsquo;</p>

<p>me = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;MY_MEMBER_TOKEN&rsquo;]
)</p>

<p>you = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;YOUR_MEMBER_TOKEN&rsquo;]
)</p>

<p>[me, you].each do |user|
  puts user.fullname
  board = user.boards.first
  puts board.name
  puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
  puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
  board.cards.each do |card|</p>

<pre><code>    puts "- \"#{card.name}\""
    puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
    puts "-- Members: #{card.members.count}"
    puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>  end
end
```</p>

<p>Now, as your friend and teacher, I command you to use this knowledge to go <a href="//ollert.herokuapp.com">do cool stuff</a> with Trello!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to the Trello API]]></title>
    <link href="http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/"/>
    <updated>2014-03-18T20:00:11-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api</id>
    <content type="html"><![CDATA[<p><a href="//trello.com">Trello</a> has a <a href="//trello.com/docs/">pretty sweet API</a>, which we use extensively in our Trello-analysis app <a href="//ollert.herokuapp.com">Ollert</a>. Initially connecting to the Trello API took us a few hours, so I&rsquo;d like to make a record of how we managed to connect.</p>

<p>Making a connection to Trello requires two hashcodes: an application key and a Trello member token. You can generate and view your application key by visiting <a href="//trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>.</p>

<p>The member token is something we need to get from the user. There are two ways to get a user&rsquo;s member token: through fragments and through a <strong>postMessage</strong>. You can also request different levels of access (read, write, read+write), and different expiration periods (such as 1 day, 30 days, or never) for member tokens. For the remainder of this writing, I&rsquo;ll be accessing a read-only member token that never expires.</p>

<p>We didn&rsquo;t have a lot of luck with fragments, but the concept is simple enough. You have the user click a link that probably says &ldquo;Connect With Trello&rdquo; which is similar to:</p>

<p><code>https://trello.com/1/authorize?key=applicationkey&amp;name=applicationname&amp;expiration=never&amp;response_type=token</code></p>

<p>At this point, the user is redirected to Trello and given the opportunity to Allow or Deny your application access. Once allowed, the user sees a static Trello page with their member token in plain text. Somehow you"re supposed to convey to them that they should copy this token and paste it back to you. This has clear drawbacks in usability.</p>

<p>Using the <strong>postMessage</strong> method of accessing a member token was significantly more fruitful. Trello provides a Javascript file named <a href="https://trello.com/docs/gettingstarted/clientjs.html">client.js</a> that does most of the legwork for you. An example:</p>

<p>``` haml
%script{src: &ldquo;//api.trello.com/1/client.js?key=applicationkey&rdquo;}</p>

<p>function AuthenticateTrello() {
  Trello.authorize({</p>

<pre><code>name: "YourApplication",
type: "popup",
interactive: true,
expiration: "never",
persist: true,
success: function () { onAuthorizeSuccessful(); },
scope: { write: false, read: true },
</code></pre>

<p>  });
}
function onAuthorizeSuccessful() {
  var token = Trello.token();
  window.location.replace(&ldquo;/auth?token=&rdquo; + token);
}</p>

<p>%a{href: &ldquo;javascript:void(0)&rdquo;, onClick: &ldquo;AuthenticateTrello()&rdquo;}
  Connect With Trello
```</p>

<p>When the user clicks the link, we have Trello set to activate a &ldquo;popup&rdquo; that will ask them to &ldquo;Allow&rdquo; or &ldquo;Deny&rdquo; our app from accessing their data. When the user allows us access, the popup closes and we hit the &ldquo;onAuthorizeSuccessful&rdquo; method. In my method, I simply redirect them to the <code>/auth</code> route with <code>token</code> manually added to the params list. One of the interesting options listed above is the &ldquo;persist&rdquo; option, which tells Trello whether it should prompt the user for his or her token every time. By telling Trello to persist, the user will only be presented with the popup when he or she needs to reauthenticate.</p>

<p>You can learn more about member tokens from <a href="//trello.com/docs/gettingstarted/authorize.html">https://trello.com/docs/gettingstarted/authorize.html</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEP Startup Weekend: Ollert]]></title>
    <link href="http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert/"/>
    <updated>2014-03-17T20:07:38-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert</id>
    <content type="html"><![CDATA[<p>Last weekend was <a href="//sep.com">SEP</a>&rsquo;s 6th Semi-Annual <a href="//sep.com/labs/startupweekend/">Startup Weekend</a>. For those unfamiliar, software developers pitch ideas Friday evening and developers volunteer their time to come up with a <a href="//en.wikipedia.org/wiki/Minimum_viable_product">minimum viable product</a> in the next 48 hours. Free beer is the only thing that makes such a weekend possible.</p>

<p>I&rsquo;ve been before and participated in other people&rsquo;s projects and it&rsquo;s always a blast. However, this weekend was different: I had an idea to pitch. Although the idea went through many names, the core concept remained the same:</p>

<blockquote><p>To tell Trello users what their boards say about the past and the future through unique visuals.</p></blockquote>

<p><a href="//trello.com">Trello</a> is a collaborative workflow management tool that does a wonderful job of showing you the present. There is currently no way on Trello to see your past history or compare yesterday&rsquo;s weather. This simplicity is part of the beauty of Trello, but also an opportunity.</p>

<p>My idea was to create a web application where a user could quickly and easily connect with Trello and view information he or she had never seen previously. I would offer a trial service requiring no login that would allow access to all this data, given that the user puts up with authenticating with Trello every time he or she visits the site. There would be a free membership, which would allow the user to &ldquo;permanantly&rdquo; connect to Trello. To monetize, I wanted to offer a paid membership, where the user would be given the ability to compare &ldquo;historical&rdquo; Trello data by selecting begin and end dates for the Trello data that is analyzed.</p>

<p><a href="//ollert.herokuapp.com">Ollert</a> is the result of this Startup Weekend idea. A live version of Ollert can be found at <a href="//ollert.herokuapp.com">ollert.herokuapp.com</a>.</p>

<p>I worked on <a href="//ollert.herokuapp.com">Ollert</a> with 5 other great developers, and we got a spectacular amount of work done given that we only spent a single weekend programming. We were able to direct users to connect with Trello, let them select a board, and then generate and display 12 different statistics and analyses. We also implemented Sign Up/Login.</p>

<p>We worked on <a href="//ollert.herokuapp.com">Ollert</a> to the last minute, so not everything got in. We never implemented the paid member feature and we didn&rsquo;t get in all the analytics we wanted. We also had some great ideas come out while we were working on <a href="//ollert.herokuapp.com">Ollert</a> that didn&rsquo;t make it into the application, such as filtering chart types and selecting favorites.</p>

<p>Overall, my teammates and I had a great time and we are confident that we&rsquo;ve created something useful.</p>

<p>My current intention is to do several more blog posts about <a href="//ollert.herokuapp.com">Ollert</a> including Connecting to the Trello API, Using ruby-trello, Using sqlite on Heroku, What I Should Have Had Ready Before Asking People To Work For Me, and The Future of Ollert.</p>
]]></content>
  </entry>
  
</feed>
