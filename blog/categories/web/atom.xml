<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2014-07-12T08:18:42-04:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing automated emails with email-spec in Cucumber]]></title>
    <link href="http://larry-price.com/blog/2014/07/12/testing-automated-emails-with-email-spec-in-cucumber/"/>
    <updated>2014-07-12T07:36:33-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/12/testing-automated-emails-with-email-spec-in-cucumber</id>
    <content type="html"><![CDATA[<p>Now that <a href="/blog/2014/07/07/deauthorizing-token-with-the-trello-client/">I send emails using Pony</a>, I want to be able to verify that the emails are being generated correctly. I also don&rsquo;t want to send real emails and have my tests check an inbox somewhere. I found a couple of solutions to do this, including <a href="https://github.com/johnmendonca/pony-test">pony-test</a> and <a href="https://github.com/bmabey/email-spec">email-spec</a>. Although pony-test fits my needs perfectly, the last commit was December 27, 2011 (2.5 years ago at the time of this post), and thus was using an outdated version of <a href="https://github.com/jnicklas/capybara">capybara</a> which I was unwilling to use. Fortunately, pony-spec is mostly just a fork of email-spec with all the non-Pony components ripped out.</p>

<p>I&rsquo;m going to be using Cucumber to test my emails, but email-spec also boasts compatibility with rspec and Turnip. To get started:</p>

<p><code>bash
$ gem install email-spec
</code></p>

<p>The developers of email-spec were kind enough to give us some free step definitions. If I was using rails, I could just type <code>rails generate email_spec:steps</code>, but since I&rsquo;m using Sinatra I opted just to copy-paste the file into my <code>step_definitions/</code> directory. You can find <code>email_steps.rb</code> <a href="https://raw.githubusercontent.com/bmabey/email-spec/master/lib/generators/email_spec/steps/templates/email_steps.rb">on Github</a>.</p>

<p>In <a href="/blog/2014/07/07/deauthorizing-token-with-the-trello-client/">my last post about small horses and emails</a>, I used the following code to send a confirmation email on signup:</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>post &lsquo;/signup&rsquo; do
  user = User.create! params</p>

<p>  url = &ldquo;#{request.base_url}/account/reset/#{user.generate_verification_hash}&rdquo;
  Pony.mail(</p>

<pre><code>to: user.email,
from: "MyApp Help Desk &lt;noreply@myapp.com&gt;",
subject: "MyApp Account Verification",
body: "A request has been made to verify your MyApp account (https://myapp.com)." +
      "If you made this request, go to " + url + ". If you did not make this request, ignore this email.",
html_body: haml(
  :verify_account_email,
  layout: false,
  locals: {
    email: user.email,
    date: DateTime.now.strftime("%H:%M:%S%P %B %d, %Y"),
    ip: request.ip,
    url: url
  }
)
</code></pre>

<p>  )
end</p>

<h1>&hellip;</h1>

<p>```</p>

<p>``` haml /views/verify_account_email.haml
%p
  Hello!
%p
  An account verification has been requested for your new <a href="https://myapp.com">MyApp</a> account.</p>

<p>%ul
  %li</p>

<pre><code>Username: #{locals[:email]}
</code></pre>

<p>  %li</p>

<pre><code>Time: #{locals[:date]}
</code></pre>

<p>  %li</p>

<pre><code>IP address: #{locals[:ip]}
</code></pre>

<p>%p
  If you made this request, click the link below or copy-paste the following URL into your browser to verify your account:</p>

<p>%p
  %a{href: &ldquo;#{locals[:url]}&rdquo;, alt: &ldquo;Verify&rdquo;, title: &ldquo;Click to verify account&rdquo;}</p>

<pre><code>#{locals[:url]}
</code></pre>

<p>%p
  If you did not request this new account, please ignore this email.</p>

<p>%p
  Sincerely,
  %br
  Team MyApp</p>

<p>%p
  This email account is not monitored and will not receive replies. For more information, contact <a href="mailto:connect@myapp.com"><a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#99;&#x6f;&#x6e;&#x6e;&#101;&#x63;&#x74;&#64;&#x6d;&#x79;&#x61;&#x70;&#x70;&#x2e;&#99;&#x6f;&#109;">&#x63;&#111;&#x6e;&#x6e;&#x65;&#x63;&#116;&#64;&#x6d;&#121;&#97;&#112;&#112;&#x2e;&#99;&#x6f;&#109;</a></a>.
```</p>

<p>Given the pre-defined steps from email-spec, testing that this email gets sent is a breeze. Adding a scenario to my feature file:</p>

<p>``` cucumber features/SignupConfirmation.feature
Feature: Signup Confirmation
  As a new user
  When I sign up
  I should receive a confirmation email</p>

<p>Background:
  Given a clear email queue
  When I go to the signup page
  And I fill in &ldquo;email&rdquo; with &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x70;&#114;&#x65;&#122;&#64;&#119;&#104;&#x69;&#x74;&#x65;&#x68;&#111;&#117;&#x73;&#101;&#x2e;&#x67;&#111;&#x76;">&#x70;&#x72;&#x65;&#x7a;&#x40;&#119;&#104;&#105;&#x74;&#101;&#x68;&#x6f;&#x75;&#x73;&#101;&#x2e;&#x67;&#x6f;&#x76;</a>&rdquo;
  And I fill in &ldquo;password&rdquo; with &ldquo;bunnies&rdquo;
  And I press &ldquo;Sign Up&rdquo;
  Then &ldquo;<a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x70;&#114;&#101;&#x7a;&#x40;&#119;&#x68;&#x69;&#x74;&#101;&#x68;&#x6f;&#x75;&#115;&#x65;&#46;&#x67;&#111;&#x76;">&#112;&#x72;&#101;&#x7a;&#64;&#x77;&#x68;&#105;&#x74;&#x65;&#x68;&#111;&#117;&#x73;&#x65;&#46;&#103;&#x6f;&#x76;</a>&rdquo; should receive an email</p>

<p>Scenario: Receives email with correct contents
  When &ldquo;<a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x70;&#114;&#x65;&#x7a;&#x40;&#x77;&#x68;&#105;&#116;&#x65;&#x68;&#x6f;&#117;&#x73;&#101;&#x2e;&#x67;&#x6f;&#118;">&#112;&#x72;&#101;&#x7a;&#64;&#119;&#x68;&#x69;&#x74;&#x65;&#104;&#111;&#117;&#115;&#x65;&#x2e;&#103;&#111;&#118;</a>&rdquo; opens the email
  Then they should see the email delivered from &ldquo;MyApp Help Desk <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#110;&#x6f;&#114;&#x65;&#x70;&#108;&#121;&#x40;&#109;&#121;&#x61;&#x70;&#x70;&#46;&#99;&#x6f;&#x6d;">&#110;&#111;&#114;&#101;&#112;&#x6c;&#121;&#64;&#x6d;&#121;&#x61;&#x70;&#112;&#46;&#x63;&#x6f;&#109;</a>&rdquo;
  And they should see &ldquo;MyApp Account Verification&rdquo; in the email subject
  And they should see &ldquo;Username: <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x70;&#114;&#x65;&#122;&#64;&#x77;&#x68;&#x69;&#x74;&#x65;&#x68;&#x6f;&#117;&#x73;&#x65;&#46;&#103;&#111;&#x76;">&#112;&#114;&#101;&#122;&#64;&#119;&#104;&#x69;&#116;&#101;&#x68;&#111;&#117;&#x73;&#x65;&#46;&#103;&#111;&#x76;</a>&rdquo; in the email body
  And they should see &ldquo;An account verification has been requested&rdquo;
```</p>

<p>That&rsquo;s it. Now we know that an email like the one above will be sent during signup. What we can&rsquo;t test here is that our SMTP server (or equivalent) is working, so in reality I&rsquo;m only testing that the email will attempt to send that looks like the one I test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending emails with Pony and Sendgrid]]></title>
    <link href="http://larry-price.com/blog/2014/07/08/sending-emails-with-pony-and-sendgrid/"/>
    <updated>2014-07-08T05:53:26-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/08/sending-emails-with-pony-and-sendgrid</id>
    <content type="html"><![CDATA[<p>It&rsquo;s incredible how easy it is to send emails through a web application, there&rsquo;s no wonder we get so much spam. Assuming we have a <a href="http://ruby-lang.org">ruby</a> app using <a href="http://sinatrarb.com">Sinatra</a>, <a href="http://adam.herokuapp.com/past/2008/11/2/pony_the_express_way_to_send_email_from_ruby/">Pony</a> is one of the easiest ways to get started with your own spam empire.</p>

<p>Installation is, as always, trivial with ruby. Install the gem with <code>gem install pony</code> or add <code>gem pony</code> to your <code>Gemfile</code> and run <code>bundle install</code>.</p>

<p>I like to configure Pony in my application&rsquo;s <code>configure</code> block. I could also add it to my <code>config.ru</code>, but I like to keep that file as tiny as posible to avoid having configuration code all over the place.</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>require &lsquo;pony&rsquo;
require &lsquo;sinatra/base&rsquo;</p>

<p>class Application &lt; Sinatra::Base
  configure do</p>

<pre><code># ...

Pony.options = {
  :via =&gt; :smtp,
  :via_options =&gt; {
    :address =&gt; 'smtp.sendgrid.net',
    :port =&gt; '587',
    :domain =&gt; 'myapp.com',
    :user_name =&gt; ENV['SENDGRID_USERNAME'],
    :password =&gt; ENV['SENDGRID_PASSWORD'],
    :authentication =&gt; :plain,
    :enable_starttls_auto =&gt; true
  }
}
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>This block tells Pony to use the <a href="http://sendgrid.com/">SendGrid</a> server to send mail, use the &ldquo;myapp.com&rdquo; HELO domain, and dig up the username and password fields from my environment.</p>

<p>If you&rsquo;re using <a href="https://heroku.com">Heroku</a> to host your application, you can <a href="https://addons.heroku.com/sendgrid">sign up for a SendGrid account through your Heroku app</a>, which gives you instant access to your SendGrid account. The <code>username</code> and <code>password</code> field you need to fill in your environment are automatically populated in your Heroku config, which you can view by running <code>heroku config</code> for your application. The free account gets you up to 200 emails a day.</p>

<p>Since I might have multiple developers working in my source code and testing the email-sending functionality, I have all the developers <a href="https://sendgrid.com/user/signup">sign up for their own free SendGrid account</a>. This should help to alleviate some of the email volume from any particular account while developing. After signing up, it took my account nearly 4 hours to be &ldquo;provisioned&rdquo; (see: approved) by the SendGrid team. Once you&rsquo;re approved you can start sending emails using your developer account credentials. I stick my username/password in my local <code>.env</code> file (another reason to make sure you&rsquo;re not storing your environment on your server or in your git repo).</p>

<p>So let&rsquo;s actually send an email. Let&rsquo;s create a route that sends an email to verify a new user account; I&rsquo;ll take some liberties by saying we have a <code>User</code> model defined already that generates a signup verification hash. I can tell pony to send a plaintext body through the <code>body</code> option and an HTML body through the <code>html_body</code> option.</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>post &lsquo;/signup&rsquo; do
  user = User.create! params</p>

<p>  url = &ldquo;#{request.base_url}/account/reset/#{user.generate_verification_hash}&rdquo;
  Pony.mail(</p>

<pre><code>to: user.email,
from: "MyApp Help Desk &lt;noreply@myapp.com&gt;",
subject: "MyApp Account Verification",
body: "A request has been made to verify your MyApp account (https://myapp.com)." +
      "If you made this request, go to " + url + ". If you did not make this request, ignore this email.",
html_body: haml(
  :verify_account_email,
  layout: false,
  locals: {
    email: user.email,
    date: DateTime.now.strftime("%H:%M:%S%P %B %d, %Y"),
    ip: request.ip,
    url: url
  }
)
</code></pre>

<p>  )
end
```</p>

<p>``` haml views/verify_account_email.rb
%p
  Hello!
%p
  An account verification has been requested for your new <a href="https://myapp.com">MyApp</a> account.</p>

<p>%ul
  %li</p>

<pre><code>Username: #{locals[:email]}
</code></pre>

<p>  %li</p>

<pre><code>Time: #{locals[:date]}
</code></pre>

<p>  %li</p>

<pre><code>IP address: #{locals[:ip]}
</code></pre>

<p>%p
  If you made this request, click the link below or copy-paste the following URL into your browser to verify your account:</p>

<p>%p
  %a{href: &ldquo;#{locals[:url]}&rdquo;, alt: &ldquo;Verify&rdquo;, title: &ldquo;Click to verify account&rdquo;}</p>

<pre><code>#{locals[:url]}
</code></pre>

<p>%p
  If you did not request this new account, please ignore this email.</p>

<p>%p
  Sincerely,
  %br
  Team MyApp</p>

<p>%p
  This email account is not monitored and will not receive replies. For more information, contact <a href="mailto:connect@myapp.com"><a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#x63;&#x6f;&#x6e;&#110;&#101;&#99;&#116;&#64;&#109;&#x79;&#97;&#112;&#112;&#46;&#x63;&#x6f;&#109;">&#x63;&#x6f;&#x6e;&#x6e;&#x65;&#99;&#116;&#64;&#x6d;&#121;&#97;&#112;&#x70;&#x2e;&#x63;&#111;&#x6d;</a></a>.
```</p>

<p>When you have a user hit this route, an email will be sent to the user with the given subject, to, from, and body fields using the configuration parameters given in the previous <code>configure</code> block. Fast, easy, and, best of all, no <code>sendmail</code> configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deauthorizing Token with the Trello Client]]></title>
    <link href="http://larry-price.com/blog/2014/07/07/deauthorizing-token-with-the-trello-client/"/>
    <updated>2014-07-07T05:59:13-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/07/deauthorizing-token-with-the-trello-client</id>
    <content type="html"><![CDATA[<p>In my <a href="https://ollertapp.com">application</a>, a user can connect to Trello without logging in. Whenever this &ldquo;anonymous&rdquo; user hits the landing page, I attempt to force the <a href="https://trello.com/docs/gettingstarted/clientjs.html">Trello client</a> to authorize the user again. By doing this, the user can return to the landing page whenever he or she likes to switch usernames. My authorize code looks like this:</p>

<p>``` javascript
function AuthenticateTrelloAlways() {
  Trello.authorize({</p>

<pre><code>name: "Ollert",
type: "popup",
interactive: true,
expiration: "1hour",
persist: false,
success: onAuthorizeSuccessful,
scope: {
  read: true
},
</code></pre>

<p>  });
}
```</p>

<p>This works oh-so-wonderfully in Chrome and Firefox, but, even during the hackathon which spawned <a href="https://ollertapp.com">Ollert</a>, we noticed that IE10/11 were causing some unexpected issues. Authorization would work the first time the user hit the landing page, but on subsequent visits telling Trello to Allow or Deny access resulted in the popup showing a white screen and never calling my callback function. Closing and reopening IE would allow me to authorize once, presumably until the &ldquo;1hour&rdquo; that I requested the original token for expired. I also verified this problem existed in IE9.</p>

<p>After several hours tweeting obscenities about IE, I stumbled upon the answer while browsing the source code for Trello&rsquo;s <a href="https://trello.com/1/client.coffee">client.coffee</a>. About one third of the way through the code, I found this function:</p>

<p>``` javascript</p>

<h1>Clear any existing authorization</h1>

<p>deauthorize: &ndash;>
  token = null
  writeStorage(&ldquo;token&rdquo;, token)
  return
```</p>

<p>All this code does is unset the class variable <code>token</code> and unset the local store variable of the same name. So I changed my <code>AuthenticateTrelloAlways()</code> method:</p>

<p>``` javascript
function AuthenticateTrelloAlways() {
  Trello.deauthorize();</p>

<p>  Trello.authorize({</p>

<pre><code>name: "Ollert",
type: "popup",
interactive: true,
expiration: "1hour",
persist: false,
success: onAuthorizeSuccessful,
scope: {
  read: true
},
</code></pre>

<p>  });
}
```</p>

<p>Voilà. Why does this only happen in IE? I was originally going to blame the local store, but, since I was able to reproduce the defect in IE9 (no HTML5), I no longer believe that to be the case. I&rsquo;m currently resigned to chalk it up as IE just being IE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to the Trello API]]></title>
    <link href="http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/"/>
    <updated>2014-03-18T20:00:11-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api</id>
    <content type="html"><![CDATA[<p><a href="//trello.com">Trello</a> has a <a href="//trello.com/docs/">pretty sweet API</a>, which we use extensively in our Trello-analysis app <a href="//ollert.herokuapp.com">Ollert</a>. Initially connecting to the Trello API took us a few hours, so I&rsquo;d like to make a record of how we managed to connect.</p>

<p>Making a connection to Trello requires two hashcodes: an application key and a Trello member token. You can generate and view your application key by visiting <a href="//trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>.</p>

<p>The member token is something we need to get from the user. There are two ways to get a user&rsquo;s member token: through fragments and through a <strong>postMessage</strong>. You can also request different levels of access (read, write, read+write), and different expiration periods (such as 1 day, 30 days, or never) for member tokens. For the remainder of this writing, I&rsquo;ll be accessing a read-only member token that never expires.</p>

<p>We didn&rsquo;t have a lot of luck with fragments, but the concept is simple enough. You have the user click a link that probably says &ldquo;Connect With Trello&rdquo; which is similar to:</p>

<p><code>https://trello.com/1/authorize?key=applicationkey&amp;name=applicationname&amp;expiration=never&amp;response_type=token</code></p>

<p>At this point, the user is redirected to Trello and given the opportunity to Allow or Deny your application access. Once allowed, the user sees a static Trello page with their member token in plain text. Somehow you"re supposed to convey to them that they should copy this token and paste it back to you. This has clear drawbacks in usability.</p>

<p>Using the <strong>postMessage</strong> method of accessing a member token was significantly more fruitful. Trello provides a Javascript file named <a href="https://trello.com/docs/gettingstarted/clientjs.html">client.js</a> that does most of the legwork for you. An example:</p>

<p>``` haml
%script{src: &ldquo;//api.trello.com/1/client.js?key=applicationkey&rdquo;}</p>

<p>function AuthenticateTrello() {
  Trello.authorize({</p>

<pre><code>name: "YourApplication",
type: "popup",
interactive: true,
expiration: "never",
persist: true,
success: function () { onAuthorizeSuccessful(); },
scope: { write: false, read: true },
</code></pre>

<p>  });
}
function onAuthorizeSuccessful() {
  var token = Trello.token();
  window.location.replace(&ldquo;/auth?token=&rdquo; + token);
}</p>

<p>%a{href: &ldquo;javascript:void(0)&rdquo;, onClick: &ldquo;AuthenticateTrello()&rdquo;}
  Connect With Trello
```</p>

<p>When the user clicks the link, we have Trello set to activate a &ldquo;popup&rdquo; that will ask them to &ldquo;Allow&rdquo; or &ldquo;Deny&rdquo; our app from accessing their data. When the user allows us access, the popup closes and we hit the &ldquo;onAuthorizeSuccessful&rdquo; method. In my method, I simply redirect them to the <code>/auth</code> route with <code>token</code> manually added to the params list. One of the interesting options listed above is the &ldquo;persist&rdquo; option, which tells Trello whether it should prompt the user for his or her token every time. By telling Trello to persist, the user will only be presented with the popup when he or she needs to reauthenticate.</p>

<p>You can learn more about member tokens from <a href="//trello.com/docs/gettingstarted/authorize.html">https://trello.com/docs/gettingstarted/authorize.html</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEP Startup Weekend: Ollert]]></title>
    <link href="http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert/"/>
    <updated>2014-03-17T20:07:38-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert</id>
    <content type="html"><![CDATA[<p>Last weekend was <a href="//sep.com">SEP</a>&rsquo;s 6th Semi-Annual <a href="//sep.com/labs/startupweekend/">Startup Weekend</a>. For those unfamiliar, software developers pitch ideas Friday evening and developers volunteer their time to come up with a <a href="//en.wikipedia.org/wiki/Minimum_viable_product">minimum viable product</a> in the next 48 hours. Free beer is the only thing that makes such a weekend possible.</p>

<p>I&rsquo;ve been before and participated in other people&rsquo;s projects and it&rsquo;s always a blast. However, this weekend was different: I had an idea to pitch. Although the idea went through many names, the core concept remained the same:</p>

<blockquote><p>To tell Trello users what their boards say about the past and the future through unique visuals.</p></blockquote>

<p><a href="//trello.com">Trello</a> is a collaborative workflow management tool that does a wonderful job of showing you the present. There is currently no way on Trello to see your past history or compare yesterday&rsquo;s weather. This simplicity is part of the beauty of Trello, but also an opportunity.</p>

<p>My idea was to create a web application where a user could quickly and easily connect with Trello and view information he or she had never seen previously. I would offer a trial service requiring no login that would allow access to all this data, given that the user puts up with authenticating with Trello every time he or she visits the site. There would be a free membership, which would allow the user to &ldquo;permanantly&rdquo; connect to Trello. To monetize, I wanted to offer a paid membership, where the user would be given the ability to compare &ldquo;historical&rdquo; Trello data by selecting begin and end dates for the Trello data that is analyzed.</p>

<p><a href="//ollert.herokuapp.com">Ollert</a> is the result of this Startup Weekend idea. A live version of Ollert can be found at <a href="//ollert.herokuapp.com">ollert.herokuapp.com</a>.</p>

<p>I worked on <a href="//ollert.herokuapp.com">Ollert</a> with 5 other great developers, and we got a spectacular amount of work done given that we only spent a single weekend programming. We were able to direct users to connect with Trello, let them select a board, and then generate and display 12 different statistics and analyses. We also implemented Sign Up/Login.</p>

<p>We worked on <a href="//ollert.herokuapp.com">Ollert</a> to the last minute, so not everything got in. We never implemented the paid member feature and we didn&rsquo;t get in all the analytics we wanted. We also had some great ideas come out while we were working on <a href="//ollert.herokuapp.com">Ollert</a> that didn&rsquo;t make it into the application, such as filtering chart types and selecting favorites.</p>

<p>Overall, my teammates and I had a great time and we are confident that we&rsquo;ve created something useful.</p>

<p>My current intention is to do several more blog posts about <a href="//ollert.herokuapp.com">Ollert</a> including Connecting to the Trello API, Using ruby-trello, Using sqlite on Heroku, What I Should Have Had Ready Before Asking People To Work For Me, and The Future of Ollert.</p>
]]></content>
  </entry>
  
</feed>
