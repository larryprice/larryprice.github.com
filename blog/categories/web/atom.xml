<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2014-02-22T19:47:49-05:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using x-editable to do in-line editing for you]]></title>
    <link href="http://larry-price.com/blog/2014/02/22/using-x-editable-to-do-in-line-editing-for-you/"/>
    <updated>2014-02-22T19:15:00-05:00</updated>
    <id>http://larry-price.com/blog/2014/02/22/using-x-editable-to-do-in-line-editing-for-you</id>
    <content type="html"><![CDATA[<p>In-line editing is traditionally difficult. Taking a static HTML node and turning it into an editable text field and then sending that data off somewhere is a little bit more Javascript than I like to write. My team and I came up against a very difficult UX problem which I spent over a week trying to understand. After building and discussing several solutions, we eventually decided to narrow the scope of what the user should be able to change. We would present the user with a table where one of the columns would be editable.</p>

<p>Rather than showing a table with the third column always as a field for text entry, I used the Javascript library <a href="//vitalets.github.io/x-editable/">X-editable</a>. X-editable allows me to display my editable item as a link. When the user clicks the item, the link turns into a text field with a Save/Cancel button (and a &lsquo;clear&rsquo; button as a bonus). The &lsquo;Save&rsquo; button submits an AJAX &lsquo;POST&rsquo; or &lsquo;PUTS&rsquo;, where we are then allowed to validate and save the data. The &lsquo;Cancel&rsquo; button turns the text field back into a link with the original value.</p>

<p>Hooray, someone else has already done the hard work for us! So, what I want to do is dynamically generate a table with objects and allow the user to edit one of the columns. In my case, only the end column is editable, but I could just as easily spread this availability to all my columns. I&rsquo;m using all my favorite tools to create this page, specifically <a href="//ruby-lang.org/en/">ruby</a>, <a href="//sinatrarb.com">Sinatra</a>, <a href="//getbootstrap.com">Twitter Bootstrap</a>, and <a href="//haml.info">HAML</a>.</p>

<p>X-editable has implementations using Bootstrap, jQuery UI, and jQuery. Since I&rsquo;m already using Bootstrap in my app, I&rsquo;m going to go with that version. Note that there are Bootstrap 2 and Bootstrap 3 builds of X-editable, and I&rsquo;m using the Bootstrap 3 variety.</p>

<p>First I include the necessary files at the top of my HAML document.</p>

<p>``` haml /views/manage_data.haml
%script{src: &ldquo;//code.jquery.com/jquery.js&rdquo;}
%script{src: &ldquo;//getbootstrap.com/dist/js/bootstrap.min.js&rdquo;}
%link{href: &ldquo;//getbootstrap.com/dist/css/bootstrap.min.css&rdquo;, rel: &ldquo;stylesheet&rdquo;}</p>

<p>%link{href: &ldquo;//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css&rdquo;, rel: &ldquo;stylesheet&rdquo;}
%script{src: &ldquo;//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js&rdquo;}
```</p>

<p>I&rsquo;m going to dumb my page down so I only have to show the important parts. I&rsquo;m going to create a table from an array of hashes called <code>@options</code>. Each hash has two important fields for this table: Points and Dollars. I will iterate over <code>@options</code>, displaying the <code>points</code> field as plain text and the <code>dollars</code> field as an X-editable link. Each hash also has a <code>value</code> field containing the primary key for the object to be edited.</p>

<p>``` haml /views/manage_data.haml
.container
  .row</p>

<pre><code>.col-md-6
  %table{id: "edit_points_goal", class: "table table-responsive table-hover table-bordered"}
    %thead
      %tr
        %th{width: "35%"}
          Points
        %th{width: "65%"}
          Dollars
    %tbody
      - @options.each do |option|
        %tr
          %td{style: "height: 45px; padding: 4px 8px; vertical-align: middle;"}
            #{option[:points]}
          %td{style: "height: 45px; padding: 4px 8px; vertical-align: middle;"}
            %a{href:"javascript:void(0)", "data-type"=&gt;"text", "data-pk"=&gt;"#{option[:value]}", "data-url"=&gt;"/update", "data-title"=&gt;"Enter dollar amount"}
              #{option[:dollars]}
</code></pre>

<p>```</p>

<p>The important part is the <code>a</code> tag:</p>

<ul>
<li><code>href</code> goes nowhere.</li>
<li><code>data-type</code> tells X-editable how it will edit the presented data. According to the docs, types include text, textarea, select, date, checklist and more.</li>
<li><code>data-pk</code> is the primary key of our data in the database. In my case, that comes to me stored in the <code>value</code> field of the option hash.</li>
<li><code>data-url</code> is the <code>post</code> method that will be used to interpret the data.</li>
<li><code>data-title</code> is used to tell the user what to do.</li>
</ul>


<p>Our code won&rsquo;t do anything yet seeing as it&rsquo;s not connected. We need some Javascript to do that. I put the Javascript at the top of my file, underneath the included files. The first thing we need to do is tell X-editable what type of editing we&rsquo;ll be doing. The options are in-line editing or a pop-up. I want the in-line editing in this case. The second thing I want to do is to set the <code>editable</code> attribute on the appropriate DOM objects. Since I&rsquo;m using an array, I found the easiest way to do this was to start at the table&rsquo;s id (edit_points_goal) and trace down to the <code>a</code> tag.</p>

<p>``` haml /views/manage_data.haml
:javascript
  $.fn.editable.defaults.mode = &lsquo;inline&rsquo;;</p>

<p>  $(document).ready(function() {</p>

<pre><code>if (#{vm.editable}) {
  $('#edit_points_goal tbody tr td a').editable();
}
</code></pre>

<p>  });
```</p>

<p>Now we need to deal with the <code>post</code> request. If you&rsquo;re really impatient to see things work, you should be able to see your in-line editable code in action, but the <code>post</code> call will fail with a &ldquo;NoMethodError.&rdquo;</p>

<p>Our <code>post</code> is going to be really simple. We verify that we have a non-negative integer and we either save and return 200 or we return 400 with an appropriate message. Our table in this example is just called <code>Data</code>, and we use <code>find</code> to get a value out of the database.</p>

<p>``` ruby web.rb
post &ldquo;/update&rdquo; do
  data = Data.find(id: params[&ldquo;pk&rdquo;])</p>

<p>  unless params[&ldquo;value&rdquo;].match(/[^0-9]/)</p>

<pre><code>data = params["value"].to_i
data.save
return 200
</code></pre>

<p>  end</p>

<p>  return {400, [], &ldquo;Please enter a valid non-negative number&rdquo;}
end
```</p>

<p>Things should be working now. When you enter good data and click the &lsquo;Ok&rsquo; button, our <code>post</code> will be called and the text field will turn back into a link. When you enter bad data, you should see our error message below the text field box.</p>

<p>Issues I encountered:</p>

<ul>
<li>Table column width shifting &ndash; Fixed by setting the widths explicitly, as seen above (35% and 65%).</li>
<li>Table height shifting &ndash; Fixed by setting the style of the <code>td</code> as seen above to give a larger height, more padding, and aligning the inner objects explicitly. I would recommend moving this definition to a <code>.css</code> or <code>.scss</code> file.</li>
<li>&ldquo;NoMethodError&rdquo; after clicking Go &ndash; Unfortunately, if you made any coding errors in your route, you won&rsquo;t be able to see the Sinatra error page but will instead you&rsquo;ll be presented with a giant wall of HTML below the text box. Try to parse this error, but if you struggle to find out what went wrong you can always substitute a form-post method in place of the <code>a</code> tag, which may allow you to more easily figure out the problem.</li>
</ul>


<p>The <a href="//vitalets.github.io/x-editable/docs.html">X-editable docs</a> are extremely helpful for beginners. There is even more detail on the X-editable site, including editing multiple items, editing dates, and using a pop-up to edit the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Letting the Browser Decide Betwen HTTP and HTTPS]]></title>
    <link href="http://larry-price.com/blog/2014/02/13/letting-the-browser-decide-betwen-http-and-https/"/>
    <updated>2014-02-13T17:55:00-05:00</updated>
    <id>http://larry-price.com/blog/2014/02/13/letting-the-browser-decide-betwen-http-and-https</id>
    <content type="html"><![CDATA[<p>While working on SEP Labs' <a href="//h2w.cc">Health2Wealth</a> app, I got my first taste of setting up a website to use secure connections. I&rsquo;ve been using the browser extension <a href="//www.eff.org/https-everywhere">HTTPS Everywhere</a> for quite some time now, so all of the web pages that I visit attempt to using <code>HTTPS</code>instead of the standard <code>HTTP</code>. When I inadvertently started testing our app with <code>HTTPS</code>, things got a little weird.</p>

<p>My machine was able to open most of a page, but it wouldn&rsquo;t load some of the graphics or javascript we had embedded in the page. I was the only one able to reproduce it, so we chalked it up to a wonky machine. Then I suddenly remembered that I was using HTTPS Everywhere. I found the area in FireFox that warns you about insecure connections and found that our page was only <em>partially</em> loading on my browser because some of the content was insecure. From there I enabled an option to reveal the insecure elements, which forced my page to load everything correctly. So now we needed to find what was insecure about our page. I trekked through the codebase and found that some of our graphs and links were hard-coded to use <code>HTTP</code>. My initial thought was just to force them to use <code>HTTPS</code>, which is <a href="//lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0625.html">almost certainly the impending standard</a>. With a quick search, I found that there exists a <strong>real</strong> solution to this problem.</p>

<p>Let&rsquo;s say I have a very normal web application, so I want to include <a href="//jquery.com">jQuery</a> embedded in my page. I initially copy-paste <code>&lt;script src='http://code.jquery.com/jquery.js'&gt;&lt;/script&gt;</code> right into my <code>&lt;head&gt;</code> node, which normally seems fine. Unfortunately, this is where issues arise. I&rsquo;m now forcing the user to make a connection which may or may not be secure to fetch data from an insecure page.</p>

<p>By removing the <code>http:</code> from the <code>http://</code>, the issue of deciding whether to fetch the file using <code>HTTP</code> or <code>HTTPS</code> is left to the web browser. So my script include becomes <code>&lt;script src='http://larry-price.com//code.jquery.com/jquery.js'&gt;&lt;/script&gt;</code> This also works for links, images, and web fonts. In fact, every link included in this post uses the same principal, where I leave the protocol out of what becomes the <code>href</code> tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Domain with Github Pages]]></title>
    <link href="http://larry-price.com/blog/2014/02/12/custom-domain-with-github-pages/"/>
    <updated>2014-02-12T21:30:00-05:00</updated>
    <id>http://larry-price.com/blog/2014/02/12/custom-domain-with-github-pages</id>
    <content type="html"><![CDATA[<p>As of today, I&rsquo;m the proud owner of <a href="//larry-price.com">larry-price.com</a>. On the recommendation from a friend, I used <a href="//domainmonster.com">domainmonster.com</a> for it&rsquo;s cost effectiveness and usable toolset. I wanted to link my Github Pages blog (this blog!) to my new site. In case I ever want to do this again, I&rsquo;ve provided myself (and you!) with a step-by-step guide below. Note that Github <a href="//help.github.com/articles/setting-up-a-custom-domain-with-pages">has a page that explains how to do this</a>, but there&rsquo;s some fluff and ordering issues that turned me off from using those instructions as any more than a reference.</p>

<h4>Step 0: Buy your domain</h4>

<p>All sites where you can purchase domains have the same domains available, but at different prices. From the sites I perused, <a href="//godaddy.com">GoDaddy</a> had the best search for domain names, suggesting different variations on the searched domain name. I found that <a href="//domainmonster.com">domainmonster.com</a> had the ugliest UI but the best prices. <a href="//hover.com">Hover.com</a> looked really modern and had moderate prices. Shop around and spend money.</p>

<h4>Step 0.5: Exercise restraint</h4>

<p>At this point in the process, <strong>don&rsquo;t go to your site</strong>.</p>

<p>My guess is you already have. If you don&rsquo;t have the ability to go back in time, don&rsquo;t sweat it, just know that you probably won&rsquo;t be able to verify the fruits of your labor for a few hours.</p>

<h4>Step 1: Setting up an &lsquo;A Record&rsquo;</h4>

<p>Find the ip address where your site is currently hosted. For me (replace URL with your own):</p>

<p>``` bash
$ nslookup larryprice.github.io
Server:   127.0.1.1
Address:  127.0.1.1#53</p>

<p>Non-authoritative answer:
Name: larryprice.github.io
Address: 199.27.74.133
```</p>

<p>You should be able to &ldquo;manage&rdquo; your domain on your domain provider&rsquo;s website. In the &ldquo;management&rdquo; area, you should be able to find a section about &ldquo;DNS&rdquo;. Find something labeled &ldquo;A records.&rdquo; There will likely already be one or two entries here &ndash; one for the IP address of your new domain and one with the IP address of your domain with &ldquo;www.&rdquo; prepended.</p>

<p>Modify the entry (or entries) with the IP address found using <code>nslookup</code> (&ldquo;199.27.74.133&rdquo; from the example above). Save your site settings.</p>

<h4>Step 2: Mucking with the &ldquo;www&rdquo; instance</h4>

<p>While we&rsquo;re modifying these settings, we might as well move the &lsquo;www&rsquo; case out of the &ldquo;A records&rdquo;. Go ahead and delete it.</p>

<p>Look for something named &ldquo;CNAME records&rdquo;, or figure out how to add records in general. We&rsquo;re going to add a CNAME record where the &ldquo;Alias&rdquo; is &ldquo;www&rdquo; and the &ldquo;Address&rdquo; is your site&rsquo;s name. In my case, my &ldquo;Alias&rdquo; field is &ldquo;www&rdquo; and my &ldquo;Address&rdquo; field is &ldquo;larry-price.com&rdquo;. Add the record and cross your fingers for success.</p>

<h4>Step 3: Telling Github Pages what to do</h4>

<p>Alhtough Github Pages is magical in its own right, it doesn&rsquo;t know what to do when receiving a request from the &ldquo;A record&rdquo; we created in Step 2 without further instruction.</p>

<p>If you&rsquo;re using Github Pages for a user page, we are going to make this change on the <code>master</code> branch. If this is a project page, do it on the <code>gh-pages</code> branch.</p>

<p>All we have to do is put our new domain into a file in the root folder called <code>CNAME</code>. Let&rsquo;s do it in one fell swoop of the command line.</p>

<p><code>bash
$ echo "larry-price.com" &gt; CNAME
</code></p>

<p>Push that to Github and wait 0 to 10 minutes for Github to refresh your page.</p>

<p>Note: If you&rsquo;re one of the few, the proud using the brilliant <a href="//octopress.org/">Octopress</a> to generate your blog, you want to make sure to add the <code>CNAME</code> file to the root of your <code>source/</code> directory. That way, when you call <code>deploy</code> your <code>CNAME</code> file will end up in the root of your <code>_deploy</code> directory.</p>

<h4>Step 4: Behold</h4>

<p>Check your Github repository&rsquo;s &ldquo;Settings&rdquo; section. In the &ldquo;GitHub Pages&rdquo; section, you should now see something along the lines of &ldquo;Your site is published at <a href="http://larry-price.com">http://larry-price.com</a>&rdquo;. Go, young one, and visit your new site; and behold the glory you have brought to your family.</p>

<p>I&rsquo;ll note that this is the point where not obeying Step 0.5 will cause issues. Once your internets knows that your page hit a certain DNS, it takes a few hours to refresh. In my case it only took about 2 hours, but it may take between 12 and 48 hours to refresh. A workaround to see if everything is working is to pull out your smart phone and use your carrier&rsquo;s network to check your new site, since that area of the internets is probably still untainted. (All of this paragraph is a simplified thought process on how DNS works, considering that&rsquo;s the level I understand it.)</p>

<p>Now fly, my children, and spread yourself over the internet with dozens of silly domain names!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finishing the Google Go Writing Web Applications Tutorial]]></title>
    <link href="http://larry-price.com/blog/2014/01/07/finishing-the-google-go-writing-web-applications-tutorial/"/>
    <updated>2014-01-07T22:45:03-05:00</updated>
    <id>http://larry-price.com/blog/2014/01/07/finishing-the-google-go-writing-web-applications-tutorial</id>
    <content type="html"><![CDATA[<h3>A golang web app tutorial</h3>

<p>I did some work with <a href="http://golang.org/">Google Go</a> recently and had the chance to follow their great tutorial <em><a href="http://golang.org/doc/articles/wiki/">Writing Web Applications</a></em>. The tutorial is pretty simple: use the Go http library to create a very simple wiki-style site. I like this tutorial a lot because there&rsquo;s not too much hand-holding, but they do eventually hand you the <a href="http://golang.org/doc/articles/wiki/final.go">final code listing</a>. Then the good people at Google give you the tall task of completing the following &lsquo;Other tasks&rsquo; without solutions:</p>

<ul>
<li>Store templates in tmpl/ and page data in data/.</li>
<li>Add a handler to make the web root redirect to /view/FrontPage.</li>
<li>Spruce up the page templates by making them valid HTML and adding some CSS rules.</li>
<li>Implement inter-page linking by converting instances of [PageName] to
&lt;a href=&ldquo;<a href="http://larry-price.com/view/PageName">http://larry-price.com/view/PageName</a>&rdquo;>PageName&lt;/a>. (hint: you could use regexp.ReplaceAllFunc to do this)</li>
</ul>


<p>This is what I&rsquo;d like to go over. I scoured the web and didn&rsquo;t have much luck finding solutions to these issues. That would be okay if they were all trivial, but the final step is not straightforward. I&rsquo;m going to assume you&rsquo;ve already gone over the tutorial. You can see <a href="https://github.com/larryprice/gowiki/">my repository on Github</a>, and I have included links to the appropriate commits in the code sections of this blog post.</p>

<h4>Store templates in tmpl/ and page data in data/</h4>

<p>The tutorial originally has the developer store all pages in the project directory. Every time a user made a new wiki page, a new file would creep into the project directory. All HTML templates were also stored in the project directory.</p>

<p>Moving templates is quite trivial. In the global scope:</p>

<p><code>diff wiki.go https://github.com/larryprice/gowiki/commit/9994d11b5275bc5faee911e5db2c994bc91052e2
-var templates = template.Must(template.ParseFiles("edit.html", "view.html"))
+var templates = template.Must(template.ParseFiles("tmpl/edit.html", "tmpl/view.html"))
</code></p>

<p>I found moving the page data to <code>data/</code> was a little trickier, especially if the directory didn&rsquo;t already exist. You may not have the same issue, but I remedied this by creating the directory if it doesn&rsquo;t exist. My <code>save</code> function differences:</p>

<p><code>diff wiki.go https://github.com/larryprice/gowiki/commit/e86a707d37b802b2d59b8ef261b3fdcab46d5870
func (p *Page) save() error {
-    filename := p.Title + ".txt"
-    return ioutil.WriteFile(filename, p.Body, 0600)
+  os.Mkdir("data", 0777)
+  filename := "data/" + p.Title + ".txt"
+  return ioutil.WriteFile(filename, p.Body, 0600)
}
</code></p>

<h4>Store templates in tmpl/ and page data in data/</h4>

<p>All we&rsquo;re going to do is create a simple handler called <code>rootHandler</code> that redirects to a new page called <code>FrontPage</code>. We then add it in the <code>main</code> function. The tutorial had us wrap out handlers in a function call to take some special actions, but that wrapper would mess up our handler in its current form. So I just <code>Redirect</code> to the <code>view</code> handler, which will then decide whether to view or create the FrontPage.</p>

<p>``` diff wiki.go <a href="https://github.com/larryprice/gowiki/commit/e41fccc2d244a3b0d62d600d94897a076c87d53d">https://github.com/larryprice/gowiki/commit/e41fccc2d244a3b0d62d600d94897a076c87d53d</a>
+ func rootHandler(w http.ResponseWriter, r *http.Request) {
+   http.Redirect(w, r, &ldquo;/view/FrontPage&rdquo;, http.StatusFound)
+ }</p>

<p>&hellip;</p>

<p>func main() {
+  http.HandleFunc(&ldquo;/&rdquo;, rootHandler)
  http.HandleFunc(&ldquo;/view/&rdquo;, makeHandler(viewHandler))
  http.HandleFunc(&ldquo;/edit/&rdquo;, makeHandler(editHandler))
  http.HandleFunc(&ldquo;/save/&rdquo;, makeHandler(saveHandler))
```</p>

<h4>Spruce up the page templates by making them valid HTML and adding some CSS rules.</h4>

<p>I took my old <code>.html</code> files and put them through <a href="http://validator.w3.org/#validate_by_input">a validator</a>. Making them valid only involved adding <code>DOCTYPE</code>, <code>html</code>, and <code>head</code> tags. The <code>head</code> tag needed <code>meta</code>, and <code>title</code> tags and we were valid. I&rsquo;ve shown <code>view.html</code> below.</p>

<p>``` diff view.html <a href="https://github.com/larryprice/gowiki/commit/771b4ecc8a550ee438720dc5c3d3f47954a1e4ff">https://github.com/larryprice/gowiki/commit/771b4ecc8a550ee438720dc5c3d3f47954a1e4ff</a>
+&lt;!DOCTYPE html>
+<html>
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
+<title>Wiki made using Golang</title>
+</head>
 <h1></h1></p>

<p> <p>[<a href="http://larry-price.com/edit/">edit</a>]</p></p>

<p> <div></div>
+</html>
```</p>

<h4>Implement inter-page linking by converting instances of [PageName]</h4>

<p>Converting [PageName] to a hyperlink was a bit more complicated than expected. I originally just tried to run the string through <code>ReplaceAllFunc</code> and replace all instance of [PageName] with an equivalent hyperlink. This does not work because we use Go&rsquo;s <code>ExecuteTemplate</code> method to render our template. <code>ExecuteTemplate</code> escapes any HTML that we give it to prevent us from displaying unwanted HTML. Getting around this was the fun part, because I want the benefit of escaped HTML while still having the ability to substitute my own HTML.</p>

<p>As it turns out, <code>ExecuteTemplate</code> will not escape variables of the type <code>template.HTML</code>. So I added another variable onto the <code>Page</code> struct called <code>DisplayBody</code>.</p>

<p>``` diff wiki.go <a href="https://github.com/larryprice/gowiki/commit/38c48717420de78f15dc48152ce16d1bdb417288">https://github.com/larryprice/gowiki/commit/38c48717420de78f15dc48152ce16d1bdb417288</a>
type Page struct {</p>

<pre><code> Title string
 Body  []byte
</code></pre>

<ul>
<li> DisplayBody template.HTML
}
```</li>
</ul>


<p>Next, I create a regular expression to find instances of [PageName] and I put the defintion above the <code>main</code> method.</p>

<p><code>diff wiki.go https://github.com/larryprice/gowiki/commit/38c48717420de78f15dc48152ce16d1bdb417288
+var linkRegexp = regexp.MustCompile("\\[([a-zA-Z0-9]+)\\]")
</code></p>

<p>In my <code>viewHandler</code>, I escape <code>Body</code> and then set <code>DisplayBody</code> to that escaped string with the links substituted.</p>

<p><code>diff wiki.go https://github.com/larryprice/gowiki/commit/38c48717420de78f15dc48152ce16d1bdb417288
+  escapedBody := []byte(template.HTMLEscapeString(string(p.Body)))
+
+  p.DisplayBody = template.HTML(linkRegexp.ReplaceAllFunc(escapedBody, func(str []byte) []byte {
+      matched := linkRegexp.FindStringSubmatch(string(str))
+      out := []byte("&lt;a href=\"/view/"+matched[1]+"\"&gt;"+matched[1]+"&lt;/a&gt;")
+      return out
+    }))
  renderTemplate(w, "view", p)
}
</code></p>

<p>To finish up, I modify the <code>view.html</code> to show <code>DisplayBody</code>. I don&rsquo;t use <code>printf</code>, because that would turn <code>DisplayBody</code> back into a <code>string</code> and <code>ExecuteTemplate</code> would escape it.</p>

<p><code>diff wiki.go https://github.com/larryprice/gowiki/commit/38c48717420de78f15dc48152ce16d1bdb417288
-&lt;div&gt;&lt;/div&gt;
+&lt;div&gt;&lt;/div&gt;
</code></p>

<p>And that completes the extra exercises for Google&rsquo;s <em>Writing Web Applications</em> tutorial. Hopefully one day this helps someone who gets stuck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Foreman to Create an Upstart Service]]></title>
    <link href="http://larry-price.com/blog/2013/08/31/using-foreman-to-create-an-upstart-service/"/>
    <updated>2013-08-31T17:05:00-04:00</updated>
    <id>http://larry-price.com/blog/2013/08/31/using-foreman-to-create-an-upstart-service</id>
    <content type="html"><![CDATA[<p>I just finished my first attempt at deploying a web app to run automatically in the background on a friend&rsquo;s server. Pretty easy, really. The first thing I did was install <a href="https://github.com/ddollar/foreman">foreman</a>. Assuming you have ruby and rubygems installed:</p>

<p><code>bash
$ sudo gem install foreman
</code></p>

<p>Next I needed to give foreman the commands to start my app. I created a file in the root of my project directory called &lsquo;Procfile&rsquo; and gave it the steps I would run to start my app manually. For the sake of simplicity, let&rsquo;s say I run my app pretty barebones:</p>

<p><code>bash Procfile
web: bundle exec rackup
</code></p>

<p>Now when I run <code>foreman start</code>, foreman will use <a href="http://bundler.io/">Bundler</a> to execute rackup with the correct gems in my Gemfile. Now exporting upstart config files is pretty easy.</p>

<p><code>bash
$ sudo foreman export upstart --app=MyApp --user=root /etc/init
</code></p>

<p>That command creates the .conf files needed for upstart to control the service called &lsquo;MyApp&rsquo; as the user &lsquo;root.&rsquo; It puts all the .conf files in <code>/etc/init</code> (which is where Ubuntu puts such things) and will create a default log directory in <code>/var/log/MyApp</code>. Now I can control my service by running <code>service MyApp start</code>, <code>service MyApp stop</code>, <code>service MyApp restart</code>, and <code>service MyApp status</code>. Hooray for me.</p>

<p>But I need to run my app in two ways: in dev mode on a local port with my dev database, and I need to run it in production mode using port 80 and the production database. I&rsquo;ve also heard that using <a href="https://en.wikipedia.org/wiki/WEBrick">webrick</a> (the default server installed with rackup) is great for develpment, but I should be using something else for my production server. So I made some config files for foreman:</p>

<p><code>bash development.env
RACK_ENV=development
PORT=9292
SERVER=rackup
</code></p>

<p><code>bash production.env
RACK_ENV=production
PORT=80
SERVER=unicorn
</code></p>

<p>And I change my Procfile to:</p>

<p><code>bash Procfile
web: bundle exec $SERVER -p $PORT -E $RACK_ENV
</code></p>

<p>Ridiculously configured. Now when I run <code>foreman start</code>, it will error out. I need to specify my environment file:</p>

<p><code>bash
$ foreman start -e production.env
</code></p>

<p>Now foreman will use Bundler to startup the server specified in <code>$SERVER</code>, run the app on port <code>$PORT</code> (-p), and will pass through the environment listed as <code>$RACK_ENV</code> to my application (-E), allowing my app to do whatever configuration it does given the current environment. Power to the people.</p>

<p><a href="http://michaelvanrooijen.com/articles/2011/06/08-managing-and-monitoring-your-ruby-application-with-foreman-and-upstart/">I found that this guy</a> does a lot more complicated stuff with Foreman, if you need more.</p>
]]></content>
  </entry>
  
</feed>
