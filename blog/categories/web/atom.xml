<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Larry Price]]></title>
  <link href="https://larry-price.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="https://larry-price.com/"/>
  <updated>2018-04-26T20:11:35-05:00</updated>
  <id>https://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    <email><![CDATA[larry@larry-price.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redirecting To Your Main Site With Heroku]]></title>
    <link href="https://larry-price.com/blog/2018/04/25/redirecting-to-your-main-site-with-heroku/"/>
    <updated>2018-04-25T20:52:19-05:00</updated>
    <id>https://larry-price.com/blog/2018/04/25/redirecting-to-your-main-site-with-heroku</id>
    <content type="html"><![CDATA[<p>We have a lot of domains that we want to redirect to the same server, but we use a DNS service that does not allow doing a domain forward, and we&rsquo;re not allowed to upgrade. I wanted to do this in the simplest way possible, so I created a workaround using a PHP script and Heroku. The source discussed in detail in this post is available on GitHub: <a href="https://github.com/larryprice/simple-heroku-redirect-app">https://github.com/larryprice/simple-heroku-redirect-app</a>.</p>

<p>The goal here is for users to visit a page and then be immediately redirected to the new site. I&rsquo;ve defined two environment variables to be used in this project: <code>SITENAME</code>, a human-readable name for our website, and <code>SITEURL</code>, the full URL that we actually want the user to end up on. I&rsquo;ve defined a PHP file called <code>index.php</code>:</p>

<pre><code class="php index.php">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;?php echo getenv('SITENAME') ?&gt; - You will be redirected shortly...&lt;/title&gt;
    &lt;meta http-equiv="refresh" content="0;URL='&lt;?php echo getenv('SITEURL') ?&gt;'" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Please visit the official &lt;?php echo getenv('SITENAME') ?&gt; site at &lt;a href="&lt;?php echo getenv('SITEURL') ?&gt;"&gt;&lt;?php echo getenv('SITEURL') ?&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>The important piece here is the <code>&lt;meta&gt;</code> tag, which actually does the redirect for us. The only PHP code here are <code>echo getenv</code> commands that render our environment variables in the template. Since I&rsquo;m a PHP novice, there may be a better way to do this, but the <code>echo</code> works just fine.</p>

<p>We also need to tell Apache how to serve the application. We want to match any routes and render our <code>index.php</code>. So we create an <code>.htcaccess</code> file:</p>

<pre><code class="sh .htaccess">RewriteEngine on
RewriteRule . index.php [L]
</code></pre>

<p>To satisfy Heroku, we need to list the dependencies for our PHP application. Fortunately for us, we don&rsquo;t have any dependencies that Heroku does not provide by default. We&rsquo;ll just create a <code>composer.json</code> file in the root of our project with an empty object:</p>

<pre><code class="json composer.json">{}
</code></pre>

<p>That&rsquo;s everything we need. You could recreate the project, but you could also just pull down the project listed above and push it up to Heroku:</p>

<pre><code class="bash">$ git clone https://github.com/larryprice/simple-heroku-redirect-app.git
$ cd simple-heroku-redirect-app
$ heroku create
$ git push heroku master
</code></pre>

<p>With your application available on Heroku, we still need to set the environment variables described earlier as <a href="https://devcenter.heroku.com/articles/config-vars">config variables</a>:</p>

<pre><code class="bash">$ heroku config:set SITENAME=yourgooddomain.com
$ heroku config:set "SITEURL=Your Good Domain's Website Name"
</code></pre>

<p>Now tell Heroku all <a href="https://devcenter.heroku.com/articles/custom-domains">the domains</a> that will be accessing this application. These are the domains you want users <em>not</em> to use:</p>

<pre><code class="bash">$ heroku domains:add yourbaddomain.com
$ heroku domains:add www.yourbaddomain.com
</code></pre>

<p>Now you just need to add the records indicated by the above command to your DNS records. These will probably be CNAME records pointing from <code>@</code> to <code>yourbaddomain.com.herokudns.com</code> or <code>www</code> to <code>yourbaddomain.com.herokudns.com</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Chronicle of SEP Startup Weekend 2016]]></title>
    <link href="https://larry-price.com/blog/2016/03/03/a-chronicle-of-sep-startup-weekend-2016/"/>
    <updated>2016-03-03T15:16:29-05:00</updated>
    <id>https://larry-price.com/blog/2016/03/03/a-chronicle-of-sep-startup-weekend-2016</id>
    <content type="html"><![CDATA[<p>Last weekend was the 2016 SEP Startup Weekend, a bi-annual hackathon where a few of the engineers get together for 48 hours to build things. As far as most people know, we transform massive quantities of beer, coffee, and unhealthy food into cohesive piles of code. Although that about sums it up, I thought it might be nice to chronicle my team&rsquo;s experience of this season&rsquo;s event. Enjoy!</p>

<h3>The Pitch</h3>

<p>In my first startup weekend since <a href="/blog/2014/07/13/ollert-reveal-the-data-behind-your-trello-boards/">Ollert</a>, I pitched an idea for an instant runoff voting platform called RePoll. RePoll would allow users to create polls, rank candidates, and view results in a login-less system via a web portal, Android, and iOS app. To make it all interesting, I wanted to do all of the coding in javascript by using <a href="http://facebook.github.io/react/">React</a> for the web frontend and <a href="https://facebook.github.io/react-native/">React Native</a> for the iOS and Android apps.</p>

<h3>Friday</h3>

<p>I somehow convinced 3 of my coworkers to help me on Friday night, who I&rsquo;ll refer to as H, G, and K, forming teams by combining the letters.</p>

<p>After sending around a few images and documents with my proposed architecture, I had GH start working together to build the Android app in React Native. Unfortunately, we hit a few snags in getting React Native to run an Android app on actual hardware, but late into the evening everything was up and running on a <a href="https://www.genymotion.com/">genymotion simulator</a>. By the end of the night, GH had a good portion of the <a href="https://facebook.github.io/react-native/docs/tutorial.html#content">React Native opening tutorial</a> completed.</p>

<p>In the meantime, K and myself were hard at work building a core web API in NodeJS for all apps to use. We decided to use Mongo so we didn&rsquo;t have to worry about updating schema and initializing databases, and we used <a href="http://www.getpostman.com/">Postman</a> to test our API calls. I may have overarchitected the session/token-based authorization system, but we got over 50% of the way done with the API. In my initial estimates, I wanted to have the API 100% completed by Friday night, but we were all tired and decided to break for the night around 10p.</p>

<p>Although everyone else headed out the door, the garage was packed with cars leaving a fancy-pants event held near our office. I stayed behind for about an hour setting up our API to run on <a href="https://re-poll.herokuapp.com/">heroku with a MongoDB instance</a>, and then configuring DNS for the domain I had already purchased.</p>

<h3>Saturday</h3>

<p>I arrived early and laid down <a href="https://open.spotify.com/album/0XxLqWttW6u6vP3Yz9Sye3">some sweet jams</a>. I continued working on the API alone and had K start working on the iOS app. We added a new teammate, dubbed A, who started work on the web frontend. The API neared completion by the end of the afternoon, and the mobile apps were beginning to hook into the publicly accessible API. During this time, several bugs were found in the initial API code and were fixed. The iOS app was making quick UI progress, but having issues connecting to the API. I started floating between dev teams as I got drowsy, but eventually got a second wind and started helping with the web frontend. The Android and web applications were both able to create polls before everyone went home. A started using a web React datetime component to set start and end dates, while the Android team was figuring out how to use the native calendar and clock to select dates and times.</p>

<p>To store data, the mobile teams started using the <a href="https://facebook.github.io/react-native/docs/asyncstorage.html">Async Storage</a> library which allows for OS-agnostic storage of data in iOS and Android. On the web frontend, we used local storage to keep around any information we might need.</p>

<p>Near the end of the night as I started working on the poll results page on the web frontend, I started finding system-crashing bugs in my interpretation of instant runoff voting, and eventually found that the results weren&rsquo;t always correct.</p>

<p>One item slowing us down Saturday when writing React Native code was its insistence on using syntax defined in ES2015. Our team was largely unfamiliar with this new syntax, so this tripped us up a bit more than expected. All in all, it was a great learning experience to see this cutting edge specification in action.</p>

<h3>Sunday</h3>

<p>Early again, I created a <a href="https://repoll-web.herokuapp.com/">heroku app for our web frontend</a> and set up the DNS appropriately. As the rest of the team started to pile in (and the smells of bacon arose from the Commons), I transitioned to trying to fix the incorrect ballot-counting logic in the API. I ended up rewriting the code several times, but finally found an algorithm that worked correctly. At this point I was kicking myself for not writing tests to verify we were writing good code.</p>

<p>The Android team caught a second wind, finishing the create poll page and started tackling poll lookup. The original plans called for a typeahead, which ended up being tougher to implement than expected, so the Android app instead supplied a simple textbox to attempt to match an existing poll. In doing this, the Android team successfully created an authentication token in the API and was able to display poll candidates in the app before running out of time.</p>

<p>The iOS team continued to have issues with the API, but successfully mocked out most of the rest of the app right before the demos.</p>

<p>Due to familiarity with the tech, the web team was able to get most of the way to a completed layout. I hastily fashioned a dual-list system for seeing candidates and ballot selection, while A transformed that system into a drag and droppable component. We were able to submit updated ballots to the server and fetch previous ballots for our poll tokens. With the updated API, the results page started working and it became possible to view the steps involved in eliminating candidates during the runoff process.</p>

<p>During demos, we presented all three apps and everyone was quite impressed at our javascripting.</p>

<h3>Action Items</h3>

<ul>
<li><em>General Things</em>

<ul>
<li><strong>Learn more about React Native.</strong> I was largely shielded from the pain as I was working on the API and React web parts of our project, but from what I&rsquo;ve seen and heard React Native is an incredible framework for getting things done and sharing code and code paradigms.</li>
<li><strong>Start using ES2015.</strong> Tools like <a href="https://babeljs.io/">Babel</a> allow us to start using next-generation javascript standards to write code now even if the browser support is unavailable.</li>
<li><strong>Do more with <a href="https://webpack.github.io/">webpack</a> or <a href="http://browserify.org/">browserify</a>.</strong> I want to be able to use these tools to optimize pre-rendering on our site, but we were in such a rush we primarily used webpack to enable us to use several NodeJS dependencies. Still cool, but there&rsquo;s so much else to explore.</li>
</ul>
</li>
<li><em>Startup Weekend</em>

<ul>
<li><strong>Estimate better.</strong> I drastically underestimated the amount of work needed to get this project completed in a weekend. We would have had a better chance had I pre-built the API. I think doing some pre-work in this case would have been okay, but I also could have asked for more help. Next time I would like to do a better job of figuring out how much work there is and how much time it will take.</li>
<li><strong>Be an expert.</strong> About half the work we did this weekend was in unknown territory for me. I should have studied further on getting React Native working before the event, and I should have known a little bit more about ES2015 as well. Although the lack of expertise slowed us down a bit, my teammates were extremely adaptive and loved learning the new tech.</li>
<li><strong>Create and prep the team beforehand.</strong> I had enlisted one engineer before the pitches Friday night, and I ran my presentation through that engineer to verify it all made sense. I should have also run some of my architecture ideas past that engineer to get buy-in. I also wouldn&rsquo;t mind having the team mostly formed before we start, but that&rsquo;s a big commitment to ask of people.</li>
<li><strong>Take more frequent, shorter breaks.</strong> We hit the Monon Saturday afternoon and walked for 30-40 minutes which ended up making me drowsy. However, the fresh air did us some good and was revitalizing for the project in general. It would be great to have more frequent, 10-15 minute walks, but it&rsquo;s really difficult to find a time when the team is ready to take a group break in such a fast-paced environment.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript: The Good Parts]]></title>
    <link href="https://larry-price.com/blog/2015/12/28/javascript-the-good-parts/"/>
    <updated>2015-12-28T20:17:33-05:00</updated>
    <id>https://larry-price.com/blog/2015/12/28/javascript-the-good-parts</id>
    <content type="html"><![CDATA[<h3>The Gist</h3>

<p><a href="http://amzn.to/1OVjj3Z">Javascript: The Good Parts</a> by Douglas Crockford is a short guide to the best parts of the javascript language. Javascript is notorious for being so flexible and feature-rich that many traditional programmers start writing code and completely forget how to program and building a startup based on an idea they got from the <a href="https://twitter.com/boredelonmusk">Bored Elon Musk</a> mock-Twitter account only to wake up a year later cold and alone living in the slums of San Francisco. This book is full of example code with thoughtful explanations to help the average developer write better javascript and leave the web a nicer place.</p>

<h3>Takeaways</h3>

<p>I read this book because I thought the title was too snarky for its own good. Javascript is flexible and capable of doing nearly anything you need but, like any tool, can easily be misused by newcomers. Since javascript is the de facto language of the web, many developers who use javascript are novices or don&rsquo;t think they need to know the language constructs because &ldquo;it&rsquo;s not a real language.&rdquo; Unfortunately, this results in a lot of spaghetti code and insecure javascript being processed by our web browsers.</p>

<p>I studied javascript this past fall to try to hone my skills, and I found that many of the little tricks I picked up through independent study had already been collected in this book. Anyone doing javascript should have a passing knowledge of the contents of this book before they are allowed to push to production.</p>

<p>Now I&rsquo;ll get off my soapbox and point out a few of my favorite points made in this book.</p>

<p>Javascripts most powerful structures are <code>Object</code> and <code>Array</code>. An <code>Array</code> is an <code>Object</code> with properties of type <code>Number</code> cast to integers in sequential order. This means that the <code>Array</code> object <code>[0, 1, "mario", "luigi"]</code> is represented as an <code>Object</code> as <code>{"0": 0, "1": 1, "2": "mario", "3": "luigi"}</code>.</p>

<p><code>Object.hasOwnProperty</code> tells you whether the given property name is on the object&rsquo;s prototype or has been defined on the current object. This is very useful when using a <code>for in</code> loop to filter properties on an object.</p>

<p>Although I&rsquo;ve frequently used the module pattern with a self-executing function to create private scope, I hadn&rsquo;t connected the dots that the reason this magic works is because of closures. Here&rsquo;s an example:</p>

<pre><code class="javascript">var MyModule = (function() {
  var x = 0;
  return {
    reset: function() {
      x = 0;
    },
    do: function() {
      console.log(x++);
    }
  }
}());

MyModule.reset();
MyModule.do();    // output: 0
MyModule.do();    // output: 1
MyModule.do();    // output: 2
MyModule.reset();
MyModule.do();    // output: 0
</code></pre>

<p><code>MyModule</code> contains the private variable <code>x</code>, which cannot be accessed by anyone who has a reference to this function. However, the internal functions <code>reset</code> and <code>do</code> do have access to the private variable. Because of this, we know no external code can manipulate our internal value and we can guarantee some amount of consistency in our code given there was no tampering of the source. Of course, closures are useful for far more than just scoping variables.</p>

<p>Although there are many ways to mimic traditional inheritance in javascript with <code>new</code> and defining the <code>constructor</code> method on a prototype, it usually makes more sense to use <em>differential inheritance</em>. Given an object named <code>bird</code>, we&rsquo;ll make a new object named <code>parrot</code> using <code>var parrot = Object.create(bird);</code> and start setting new properties on <code>parrot</code> This type of inheritance uses the basics of the language to our advantage and adheres nicely to the native prototypal constructs.</p>

<h3>Action Items</h3>

<ul>
<li><strong>Differential inheritance.</strong> I&rsquo;ve always tried to force traditional inheritance into my javascript architecture, and it&rsquo;s always felt wrong. The next time I need inheritance, I will try to use DI to utilize javascript&rsquo;s prototype system better.</li>
<li><strong>Write more javascript.</strong> It&rsquo;s been a while since I got to write javascript professionally, so I&rsquo;d like to ensure I maintain my knowledge base over the coming months by writing more javascript on the side. As web programming is where I want to be, hopefully I can get back into building for the web before the end of the year.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noty for Easy, Breezy, Beautiful Flash Messages]]></title>
    <link href="https://larry-price.com/blog/2015/09/01/noty-for-easy/"/>
    <updated>2015-09-01T18:29:27-04:00</updated>
    <id>https://larry-price.com/blog/2015/09/01/noty-for-easy</id>
    <content type="html"><![CDATA[<p><a href="http://ned.im/noty/#/about">Noty</a> is a jQuery plugin for showing flash messages. Noty is easy to use and creates great-looking flash notifications with little customization.</p>

<h4>What&rsquo;s a flash message?</h4>

<p>Flash messages are used to display small bits of information to a user without changing existing page content. If there is an error making an AJAX request, we can display an error flash message to let the user know to try again later. If there is a new shortcut available, we could let the user know with an information flash message.</p>

<h4>Example Time</h4>

<p>You&rsquo;ll need a copy of Noty. As of this time, I haven&rsquo;t seen a CDN hosting the minified version of Noty, so you can download it <a href="https://raw.githubusercontent.com/needim/noty/master/js/noty/packaged/jquery.noty.packaged.min.js">directly from Github</a> and put it somewhere nice. Add a <code>&lt;script&gt;</code> tag to your HTML including the library and let&rsquo;s start using it.</p>

<p>Let&rsquo;s create a single button on our HTML page that, when clicked, will create a new Noty error flash message in the top left.</p>

<p><iframe style="width: 100%; height: 150px" frameborder="0" seamless="seamless" src="//jsfiddle.net/f14xjf8b/embedded/result,html,js/light/"></iframe></p>

<p>Cool, right? Break it down:</p>

<ul>
<li>text

<ul>
<li>Obviously, this is the text that will be displayed</li>
</ul>
</li>
<li>layout

<ul>
<li>This allows us to change the position of the flash message. In this case I chose <code>topleft</code>, but other options include <code>top</code>, <code>topCenter</code>, <code>topRight</code>, <code>center</code>, <code>centerLeft</code>, <code>centerRight</code>, <code>bottom</code>, <code>bottomLeft</code>, <code>bottomCenter</code>, and <code>bottomRight</code></li>
</ul>
</li>
<li>timeout

<ul>
<li>How long the notification will stay on the screen (in milliseconds). <code>false</code> for a permanant notification.</li>
</ul>
</li>
<li>type

<ul>
<li>Style of notification to display. Options include <code>error</code>, <code>success</code>, <code>alert</code>, <code>warning</code>, <code>confirmation</code>, and <code>information</code>.</li>
</ul>
</li>
</ul>


<p> Let&rsquo;s add some more so we can see the difference.</p>

<p> <iframe style="width: 100%; height: 150px" frameborder="0" seamless="seamless" src="//jsfiddle.net/f14xjf8b/2/embedded/result,html,js/light/"></iframe></p>

<p> Three notifications, one which stays up for 500ms, one which stays up for 5000ms, and one which stays up indefinitely. I also set the <code>killer</code> property to true on the <code>error</code> notification such that the <code>error</code> notification will close all other notifications. Additionally, I added the <code>closeWith</code> property to the <code>success</code> message to close it by clicking. All of these notifications come up in different locations on the page.</p>

<p> We should also think about theming our notifications. To create a &ldquo;full&rdquo; theme for Noty is a lot of Javascript -  the odds are pretty good you just want to change the color. We can essentially inherit from the default theme and change the colors of the <code>error</code> and <code>information</code> notifictaions in our new theme like this:</p>

<pre><code class="javascript testtheme.noty.js">$.noty.themes.testtheme = Object.create($.noty.themes.defaultTheme);
$.noty.themes.testtheme.name = 'testtheme';
$.noty.themes.testtheme.style = function () {
    $.noty.themes.defaultTheme.style.apply(this);
    switch (this.options.type) {
        case 'error':
            this.$bar.css({
                backgroundColor: '#DC569F',
                borderColor: '#DC569F',
                color: '#F5F5F5'
            });
            break;
        case 'information':
            this.$bar.css({
                backgroundColor: '#ABABAB',
                borderColor: '#DC569F',
                color: '#F5F5F5'
            });
            break;
        default:
          break;
    }
    this.$message.css({
        fontWeight: 'bold'
    });
};
</code></pre>

<p> We create our new theme <code>testtheme</code> from the <code>defaultTheme</code> prototype and change the <code>name</code> and <code>style</code> properties. Within our custom <code>style</code> function, we go ahead and apply the default theme&rsquo;s style. Then we add a few more adjustments based on the current notification type. Thank goodness it&rsquo;s javascript. Don&rsquo;t forget to include your <code>testtheme.noty.js</code> file in a <code>&lt;script&gt;</code> tag in your HTML. We can apply this theme to any of our notifications by adding the <code>theme</code> property to our call to <code>noty</code> with a value of &lsquo;testtheme&rsquo; (which is the name of the theme we just created). Here&rsquo;s the fiddle showing off our new theme:</p>

<p> <iframe style="width: 100%; height: 150px" frameborder="0" seamless="seamless" src="//jsfiddle.net/f14xjf8b/3/embedded/result,html,js/light/"></iframe></p>

<p> There are many other customization options for the brave, including custom animations and callbacks when the notifications are dismissed. See <a href="http://ned.im/noty/#/about">the full documentation site</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Muck with History using the HTML5 History API]]></title>
    <link href="https://larry-price.com/blog/2015/07/19/muck-with-history-using-the-html5-history-api/"/>
    <updated>2015-07-19T11:00:00-04:00</updated>
    <id>https://larry-price.com/blog/2015/07/19/muck-with-history-using-the-html5-history-api</id>
    <content type="html"><![CDATA[<p>Congratulations! You just made a single page web application [SPWA] to do All The Things. What happens when you hit the Back button in the browser? Oops.</p>

<p>The Back button is <a href="http://www.internetnews.com/skerner/2010/07/what-is-the-most-clicked-firef.html">the most used navigation button in the modern browser</a>. SPWA often break the functionality of the Back button. We can fix this using the <a href="http://diveintohtml5.info/history.html">HTML 5 History API</a>.</p>

<p>For this demo, I&rsquo;ll make a simple web page starting with the text &ldquo;Page 1&rdquo; and a &ldquo;Continue&rdquo; button. When I click the &ldquo;Continue&rdquo; button, &ldquo;Welcome&rdquo; will change to &ldquo;Page 1&rdquo;; when I click &ldquo;Page 1&rdquo;, I change to &ldquo;Page 2&rdquo;; ad infinitum. My initial page looks like this:</p>

<pre><code class="html index.html">&lt;span id="content" style="margin-bottom: 1.5em;"&gt;Welcome&lt;/span&gt;
&lt;button id="continue" onclick="nextPage()"&gt;
  Continue
&lt;/button&gt;
</code></pre>

<pre><code class="javascript index.html">// ...
function nextPage() {
  var content = document.getElementById("content");
  if (content.innerHTML === "Welcome") {
    updatePageContent(1);
  } else {
    updatePageContent(parseInt(content.innerHTML.slice(5))+1);
  }
}
function updatePageContent(pageNumber) {
  document.getElementById("content").innerHTML = "Page " + pageNumber;
}
// ...
</code></pre>

<p>Running this code and clicking &ldquo;Continue&rdquo;, the user has no way to go back. He or she would need to start over from the beginning, which is bad for the user and bad for us too. We can update the browser&rsquo;s history using <code>pushState</code> and <code>popState</code> commands from the History API. For this contrived example, I&rsquo;ll add my <code>pushState</code> call in the <code>nextPage</code> function:</p>

<pre><code class="javascript index.html">// ...
function nextPage() {
  var content = document.getElementById("content"),
      nextPage = 1;
  if (content.innerHTML === "Welcome") {
    updatePageContent(nextPage);
  } else {
    nextPage = parseInt(content.innerHTML.slice(5))+1;
    updatePageContent(nextPage);
  }

  history.pushState(null, null, "?page=" + nextPage);
}

// ...
</code></pre>

<p>Now the site will add <code>?page=</code> to the URL whenever we update the page number. This happens when we call <code>history.pushState</code>. In the call to <code>history.pushState</code>, the first argument is some data identifying the state, the second argument is the <code>title</code> of the new page but is currently unused by all the major browsers, and the third argument is the URL of the new state.</p>

<p>In doing this, the Back button has become enabled in the browser. However, it still doesn&rsquo;t work. That&rsquo;s where <code>popState</code> comes in. <code>popState</code> is the other side of the equation which figures out how to change the page when the user hits the Back button. I&rsquo;ll update the call to <code>pushState</code> to include the page number in the <code>state</code> arugment so we can use it.</p>

<pre><code class="javascript index.html">// ...

function nextPage() {
  var content = document.getElementById("content"),
      nextPage = 1;
  if (content.innerHTML === "Welcome") {
    updatePageContent(nextPage);
  } else {
    nextPage = parseInt(content.innerHTML.slice(5))+1;
    updatePageContent(nextPage);
  }

  history.pushState(nextPage, null, "?page=" + nextPage);
}

function updatePageContent(pageNumber) {
  var content = document.getElementById("content");
  if (pageNumber === 0) {
    content.innerHTML = "Welcome";
  } else {
    content.innerHTML = "Page " + pageNumber;
  }
}

window.onpopstate = function(event) {
  updatePageContent(event.state || 0);
}

// ...
</code></pre>

<p>Now your history should be <em>mostly</em> working. Hitting Back should take you to the previous page, then hitting Forward should take you to the next page.</p>

<p>There is currently a bug in the version of webkit Safari uses which causes a <code>popstate</code> event to fire on initial page load. We can try to fix this using the <code>replaceState</code> call on page load to set our history&rsquo;s state to the initial value. You can add this event to the bottom of your javascript:</p>

<pre><code class="javascript index.html">// ... 

window.onload = function() {
  history.replaceState(0, null, "");
}

// ...
</code></pre>

<p>Of course, I want my web page to be smarter than this. If the user explicitly visits &ldquo;mysweetpage.com?page=3&rdquo; I want the user to be presented with page 3&rsquo;s epic content. Let&rsquo;s modify that <code>onload</code> function to check the current URL state and figure out which page the user has visited:</p>

<pre><code class="javascript index.html">// ...

window.onload = function() {
  var currentPage = parseInt(window.location.search.slice(6)) || 0;
  updatePageContent(currentPage);
  history.replaceState(currentPage, null, window.location.search);
}

// ...
</code></pre>

<p>History changed. Forever. Changing history is a good idea but can easily lead to an even more confusing user scenario. Choose when to change history based on when your application would traditionally need to bring up a new page. Once you have Back working, make sure Forward also acts as expected. Thinking about how you&rsquo;ll integrate the History API into your web application can help you write more sensible, modular code.</p>

<p>If you&rsquo;re looking for the full code that we created above, check out <a href="https://gist.github.com/larryprice/b06dd00c3e7f63ae7954">this gist</a>.</p>

<p>&lt;3 HTML5</p>
]]></content>
  </entry>
  
</feed>
