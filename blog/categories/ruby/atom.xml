<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2014-07-13T17:16:07-04:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing automated emails with email-spec in Cucumber]]></title>
    <link href="http://larry-price.com/blog/2014/07/12/testing-automated-emails-with-email-spec-in-cucumber/"/>
    <updated>2014-07-12T07:36:33-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/12/testing-automated-emails-with-email-spec-in-cucumber</id>
    <content type="html"><![CDATA[<p>Now that <a href="/blog/2014/07/07/deauthorizing-token-with-the-trello-client/">I send emails using Pony</a>, I want to be able to verify that the emails are being generated correctly. I also don&rsquo;t want to send real emails and have my tests check an inbox somewhere. I found a couple of solutions to do this, including <a href="https://github.com/johnmendonca/pony-test">pony-test</a> and <a href="https://github.com/bmabey/email-spec">email-spec</a>. Although pony-test fits my needs perfectly, the last commit was December 27, 2011 (2.5 years ago at the time of this post), and thus was using an outdated version of <a href="https://github.com/jnicklas/capybara">capybara</a> which I was unwilling to use. Fortunately, pony-spec is mostly just a fork of email-spec with all the non-Pony components ripped out.</p>

<p>I&rsquo;m going to be using Cucumber to test my emails, but email-spec also boasts compatibility with rspec and Turnip. To get started:</p>

<p><code>bash
$ gem install email-spec
</code></p>

<p>The developers of email-spec were kind enough to give us some free step definitions. If I was using rails, I could just type <code>rails generate email_spec:steps</code>, but since I&rsquo;m using Sinatra I opted just to copy-paste the file into my <code>step_definitions/</code> directory. You can find <code>email_steps.rb</code> <a href="https://raw.githubusercontent.com/bmabey/email-spec/master/lib/generators/email_spec/steps/templates/email_steps.rb">on Github</a>.</p>

<p>In <a href="/blog/2014/07/07/deauthorizing-token-with-the-trello-client/">my last post about small horses and emails</a>, I used the following code to send a confirmation email on signup:</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>post &lsquo;/signup&rsquo; do
  user = User.create! params</p>

<p>  url = &ldquo;#{request.base_url}/account/reset/#{user.generate_verification_hash}&rdquo;
  Pony.mail(</p>

<pre><code>to: user.email,
from: "MyApp Help Desk &lt;noreply@myapp.com&gt;",
subject: "MyApp Account Verification",
body: "A request has been made to verify your MyApp account (https://myapp.com)." +
      "If you made this request, go to " + url + ". If you did not make this request, ignore this email.",
html_body: haml(
  :verify_account_email,
  layout: false,
  locals: {
    email: user.email,
    date: DateTime.now.strftime("%H:%M:%S%P %B %d, %Y"),
    ip: request.ip,
    url: url
  }
)
</code></pre>

<p>  )
end</p>

<h1>&hellip;</h1>

<p>```</p>

<p>``` haml /views/verify_account_email.haml
%p
  Hello!
%p
  An account verification has been requested for your new <a href="https://myapp.com">MyApp</a> account.</p>

<p>%ul
  %li</p>

<pre><code>Username: #{locals[:email]}
</code></pre>

<p>  %li</p>

<pre><code>Time: #{locals[:date]}
</code></pre>

<p>  %li</p>

<pre><code>IP address: #{locals[:ip]}
</code></pre>

<p>%p
  If you made this request, click the link below or copy-paste the following URL into your browser to verify your account:</p>

<p>%p
  %a{href: &ldquo;#{locals[:url]}&rdquo;, alt: &ldquo;Verify&rdquo;, title: &ldquo;Click to verify account&rdquo;}</p>

<pre><code>#{locals[:url]}
</code></pre>

<p>%p
  If you did not request this new account, please ignore this email.</p>

<p>%p
  Sincerely,
  %br
  Team MyApp</p>

<p>%p
  This email account is not monitored and will not receive replies. For more information, contact <a href="mailto:connect@myapp.com"><a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#x63;&#111;&#x6e;&#x6e;&#x65;&#x63;&#x74;&#64;&#109;&#x79;&#97;&#112;&#112;&#46;&#99;&#111;&#x6d;">&#99;&#111;&#110;&#110;&#101;&#99;&#x74;&#64;&#109;&#121;&#x61;&#112;&#112;&#x2e;&#99;&#111;&#109;</a></a>.
```</p>

<p>Given the pre-defined steps from email-spec, testing that this email gets sent is a breeze. Adding a scenario to my feature file:</p>

<p>``` cucumber features/SignupConfirmation.feature
Feature: Signup Confirmation
  As a new user
  When I sign up
  I should receive a confirmation email</p>

<p>Background:
  Given a clear email queue
  When I go to the signup page
  And I fill in &ldquo;email&rdquo; with &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x70;&#x72;&#x65;&#x7a;&#x40;&#x77;&#104;&#105;&#x74;&#x65;&#104;&#111;&#x75;&#x73;&#101;&#x2e;&#103;&#x6f;&#118;">&#112;&#114;&#101;&#x7a;&#64;&#x77;&#104;&#105;&#x74;&#101;&#x68;&#111;&#x75;&#x73;&#x65;&#x2e;&#103;&#111;&#x76;</a>&rdquo;
  And I fill in &ldquo;password&rdquo; with &ldquo;bunnies&rdquo;
  And I press &ldquo;Sign Up&rdquo;
  Then &ldquo;<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#x70;&#x72;&#101;&#122;&#x40;&#x77;&#104;&#x69;&#116;&#x65;&#104;&#111;&#x75;&#x73;&#101;&#46;&#x67;&#111;&#x76;">&#112;&#x72;&#101;&#122;&#64;&#119;&#x68;&#x69;&#x74;&#x65;&#104;&#111;&#117;&#x73;&#101;&#x2e;&#103;&#x6f;&#x76;</a>&rdquo; should receive an email</p>

<p>Scenario: Receives email with correct contents
  When &ldquo;<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#112;&#114;&#x65;&#122;&#x40;&#x77;&#x68;&#x69;&#x74;&#101;&#104;&#x6f;&#x75;&#x73;&#101;&#x2e;&#x67;&#111;&#x76;">&#112;&#x72;&#x65;&#x7a;&#x40;&#x77;&#x68;&#x69;&#116;&#x65;&#x68;&#x6f;&#x75;&#x73;&#101;&#46;&#103;&#111;&#x76;</a>&rdquo; opens the email
  Then they should see the email delivered from &ldquo;MyApp Help Desk <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#110;&#111;&#x72;&#x65;&#x70;&#x6c;&#121;&#64;&#109;&#x79;&#x61;&#x70;&#x70;&#46;&#99;&#111;&#x6d;">&#110;&#x6f;&#x72;&#101;&#x70;&#x6c;&#x79;&#x40;&#x6d;&#x79;&#x61;&#x70;&#x70;&#x2e;&#99;&#x6f;&#109;</a>&rdquo;
  And they should see &ldquo;MyApp Account Verification&rdquo; in the email subject
  And they should see &ldquo;Username: <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#112;&#x72;&#101;&#122;&#x40;&#119;&#x68;&#x69;&#x74;&#x65;&#x68;&#111;&#117;&#x73;&#101;&#x2e;&#103;&#x6f;&#x76;">&#x70;&#114;&#x65;&#x7a;&#64;&#119;&#x68;&#x69;&#x74;&#101;&#x68;&#111;&#x75;&#115;&#101;&#x2e;&#x67;&#111;&#x76;</a>&rdquo; in the email body
  And they should see &ldquo;An account verification has been requested&rdquo;
```</p>

<p>That&rsquo;s it. Now we know that an email like the one above will be sent during signup. What we can&rsquo;t test here is that our SMTP server (or equivalent) is working, so in reality I&rsquo;m only testing that the email will attempt to send that looks like the one I test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending emails with Pony and Sendgrid]]></title>
    <link href="http://larry-price.com/blog/2014/07/08/sending-emails-with-pony-and-sendgrid/"/>
    <updated>2014-07-08T05:53:26-04:00</updated>
    <id>http://larry-price.com/blog/2014/07/08/sending-emails-with-pony-and-sendgrid</id>
    <content type="html"><![CDATA[<p>It&rsquo;s incredible how easy it is to send emails through a web application, there&rsquo;s no wonder we get so much spam. Assuming we have a <a href="http://ruby-lang.org">ruby</a> app using <a href="http://sinatrarb.com">Sinatra</a>, <a href="http://adam.herokuapp.com/past/2008/11/2/pony_the_express_way_to_send_email_from_ruby/">Pony</a> is one of the easiest ways to get started with your own spam empire.</p>

<p>Installation is, as always, trivial with ruby. Install the gem with <code>gem install pony</code> or add <code>gem pony</code> to your <code>Gemfile</code> and run <code>bundle install</code>.</p>

<p>I like to configure Pony in my application&rsquo;s <code>configure</code> block. I could also add it to my <code>config.ru</code>, but I like to keep that file as tiny as posible to avoid having configuration code all over the place.</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>require &lsquo;pony&rsquo;
require &lsquo;sinatra/base&rsquo;</p>

<p>class Application &lt; Sinatra::Base
  configure do</p>

<pre><code># ...

Pony.options = {
  :via =&gt; :smtp,
  :via_options =&gt; {
    :address =&gt; 'smtp.sendgrid.net',
    :port =&gt; '587',
    :domain =&gt; 'myapp.com',
    :user_name =&gt; ENV['SENDGRID_USERNAME'],
    :password =&gt; ENV['SENDGRID_PASSWORD'],
    :authentication =&gt; :plain,
    :enable_starttls_auto =&gt; true
  }
}
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>This block tells Pony to use the <a href="http://sendgrid.com/">SendGrid</a> server to send mail, use the &ldquo;myapp.com&rdquo; HELO domain, and dig up the username and password fields from my environment.</p>

<p>If you&rsquo;re using <a href="https://heroku.com">Heroku</a> to host your application, you can <a href="https://addons.heroku.com/sendgrid">sign up for a SendGrid account through your Heroku app</a>, which gives you instant access to your SendGrid account. The <code>username</code> and <code>password</code> field you need to fill in your environment are automatically populated in your Heroku config, which you can view by running <code>heroku config</code> for your application. The free account gets you up to 200 emails a day.</p>

<p>Since I might have multiple developers working in my source code and testing the email-sending functionality, I have all the developers <a href="https://sendgrid.com/user/signup">sign up for their own free SendGrid account</a>. This should help to alleviate some of the email volume from any particular account while developing. After signing up, it took my account nearly 4 hours to be &ldquo;provisioned&rdquo; (see: approved) by the SendGrid team. Once you&rsquo;re approved you can start sending emails using your developer account credentials. I stick my username/password in my local <code>.env</code> file (another reason to make sure you&rsquo;re not storing your environment on your server or in your git repo).</p>

<p>So let&rsquo;s actually send an email. Let&rsquo;s create a route that sends an email to verify a new user account; I&rsquo;ll take some liberties by saying we have a <code>User</code> model defined already that generates a signup verification hash. I can tell pony to send a plaintext body through the <code>body</code> option and an HTML body through the <code>html_body</code> option.</p>

<p>``` ruby web.rb</p>

<h1>&hellip;</h1>

<p>post &lsquo;/signup&rsquo; do
  user = User.create! params</p>

<p>  url = &ldquo;#{request.base_url}/account/reset/#{user.generate_verification_hash}&rdquo;
  Pony.mail(</p>

<pre><code>to: user.email,
from: "MyApp Help Desk &lt;noreply@myapp.com&gt;",
subject: "MyApp Account Verification",
body: "A request has been made to verify your MyApp account (https://myapp.com)." +
      "If you made this request, go to " + url + ". If you did not make this request, ignore this email.",
html_body: haml(
  :verify_account_email,
  layout: false,
  locals: {
    email: user.email,
    date: DateTime.now.strftime("%H:%M:%S%P %B %d, %Y"),
    ip: request.ip,
    url: url
  }
)
</code></pre>

<p>  )
end
```</p>

<p>``` haml views/verify_account_email.rb
%p
  Hello!
%p
  An account verification has been requested for your new <a href="https://myapp.com">MyApp</a> account.</p>

<p>%ul
  %li</p>

<pre><code>Username: #{locals[:email]}
</code></pre>

<p>  %li</p>

<pre><code>Time: #{locals[:date]}
</code></pre>

<p>  %li</p>

<pre><code>IP address: #{locals[:ip]}
</code></pre>

<p>%p
  If you made this request, click the link below or copy-paste the following URL into your browser to verify your account:</p>

<p>%p
  %a{href: &ldquo;#{locals[:url]}&rdquo;, alt: &ldquo;Verify&rdquo;, title: &ldquo;Click to verify account&rdquo;}</p>

<pre><code>#{locals[:url]}
</code></pre>

<p>%p
  If you did not request this new account, please ignore this email.</p>

<p>%p
  Sincerely,
  %br
  Team MyApp</p>

<p>%p
  This email account is not monitored and will not receive replies. For more information, contact <a href="mailto:connect@myapp.com"><a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#99;&#111;&#x6e;&#x6e;&#x65;&#x63;&#116;&#64;&#109;&#121;&#97;&#x70;&#112;&#x2e;&#99;&#x6f;&#109;">&#x63;&#x6f;&#110;&#110;&#101;&#x63;&#x74;&#x40;&#109;&#x79;&#97;&#112;&#112;&#x2e;&#99;&#111;&#x6d;</a></a>.
```</p>

<p>When you have a user hit this route, an email will be sent to the user with the given subject, to, from, and body fields using the configuration parameters given in the previous <code>configure</code> block. Fast, easy, and, best of all, no <code>sendmail</code> configuration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using sqlite on Heroku]]></title>
    <link href="http://larry-price.com/blog/2014/03/29/using-sqlite-on-heroku/"/>
    <updated>2014-03-29T11:16:06-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/29/using-sqlite-on-heroku</id>
    <content type="html"><![CDATA[<p>Or rather, &ldquo;Not Using sqlite on Heroku.&rdquo;</p>

<p><a href="//heroku.com">Heroku</a> does not support <a href="//sqlite.org">sqlite</a>. That doesn&rsquo;t mean we have to stop using sqlite in development, but it does mean we need to put in some workarounds to support our deployment environment. The rest of this article will use <a href="//ruby-lang.org">ruby</a> and <a href="//sinatrarb.com">Sinatra</a>.</p>

<p>Assuming you have a heroku app deployed and you have sqlite already working locally, this only takes a few steps. First we need to add a SQL database to our heroku app. From the project directory, we&rsquo;ll add the <a href="//addons.heroku.com/heroku-postgresql">heroku-postgresql</a> addon to our app.</p>

<p><code>bash
$ heroku addons:add heroku-postgresql:dev
</code></p>

<p>The <code>dev</code> piece of this command tells heroku we want the small, free database. This database supports up to 10,000 rows and has a 99.5% uptime. Best of all: it&rsquo;s free. Other options have you pay $9/mo for 10,000,000 rows or $50+ for Unlimited usage. I recommend you start small.</p>

<p>Hopefully you got some success statements after adding heroku-postgresql. They should have included some new environment variables, which are links to your new Postgres database. Record these; we&rsquo;ll use them a little later.</p>

<p>Now we need to set up the back-end to be able to access a Postgres database when necessary. Hopefully you&rsquo;re using a decent abstraction library in your app that can access any SQL database. For ruby, I find <a href="//www.sequel.rubyforge.org/">Sequel</a> to be sufficient.</p>

<p>In our Gemfile, we&rsquo;ve probably already included the sqlite gem for use in our local environment. We can go ahead and move that into a <code>development</code> block, and we need to add the <code>pg</code> gem to either <code>production</code> or the global block.</p>

<p>``` ruby Gemfile
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;</p>

<p>ruby &lsquo;2.1.0&rsquo;</p>

<p>gem &lsquo;bundler&rsquo;
gem &lsquo;rake&rsquo;
gem &lsquo;sinatra&rsquo;
gem &lsquo;haml&rsquo;
gem &lsquo;sequel&rsquo;</p>

<p>group :production do
  gem &lsquo;pg&rsquo;
end</p>

<p>group :development do
  gem &lsquo;sqlite3&rsquo;
end
```</p>

<p>Heroku sets <code>ENV['RACK_ENV']</code> to &ldquo;production&rdquo; for us, which means that the pg gem should get picked up the next time we deploy. Now we need to tell our app which database to use in which situation.</p>

<p>One of the easiest places to make this decision is in Sinatra&rsquo;s <code>configure</code> block. I keep my local db in an environment variable called <code>LOCAL_DATABASE_URL</code>. This is where you use the environment variable heroku set for you when you set up your Postgres database; mine was called <code>HEROKU_POSTGRESQL_MAROON_URL</code>.</p>

<p>``` ruby web.rb
class App &lt; Sinatra::Base
  configure :production do</p>

<pre><code>Sequel.connect ENV['HEROKU_POSTGRESQL_MAROON_URL']
</code></pre>

<p>  end</p>

<p>  configure :development do</p>

<pre><code>Sequel.connect ENV['LOCAL_DATABASE_URL']
</code></pre>

<p>  end
end
```</p>

<p>This works because the default environment is &ldquo;development.&rdquo; Test locally, and then we can deploy.</p>

<p><code>bash
$ git push heroku master
</code></p>

<p>And enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Trello API in Ruby]]></title>
    <link href="http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby/"/>
    <updated>2014-03-20T19:37:36-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby</id>
    <content type="html"><![CDATA[<p>So, you want to gather data using the <a href="//trello.com">Trello</a> API so that you can <a href="//ollert.herokuapp.com">do something cool with it</a>? And you&rsquo;re using <a href="//ruby-lang.org">Ruby</a>? Enter <a href="//github.com/jeremytregunna/ruby-trello">ruby-trello</a>. Install!</p>

<p><code>bash
$ gem install ruby-trello
</code></p>

<p>We&rsquo;ll start off easy, and assume that we&rsquo;re writing a personal application where we only need to access data for one user at a time. We start by configuring ruby-trello. I&rsquo;m going to assume that you&rsquo;ve already generated a public key and received a member token and stored them in your environment.</p>

<p>``` ruby global_config_test.rb
require &lsquo;trello&rsquo;</p>

<p>Trello.configure do |config|
  # API key generated by visiting <a href="https://trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>
  config.developer_public_key = ENV[&lsquo;PUBLIC_KEY&rsquo;]</p>

<p>  # Member token
  # larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/
  config.member_token = ENV[&lsquo;MEMBER_TOKEN&rsquo;]
end
```</p>

<p>This connects me to a specific member as found through <code>ENV['MEMBER_TOKEN']</code>. I previously wrote <a href="/blog/2014/03/18/connecting-to-the-trello-api/">another post</a> about getting a member token from a user.</p>

<p>For demonstration, I&rsquo;ll find myself, grab my first board, and then display the name, names of lists, members who have worked on the project, and some numbers about each of the cards in the board. This is essentially my proof of concept for a <a href="/blog/2014/03/17/sep-startup-weekend-ollert/">super-cool web-app I wrote</a> called <a href="//ollert.herokuapp.com">Ollert</a>.</p>

<p>``` ruby global_config_test.rb
&hellip;</p>

<h1>find myself</h1>

<p>me = Trello::Member.find(&ldquo;_larryprice&rdquo;)</p>

<h1>find first board</h1>

<p>board = me.boards.first
puts board.name
puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
board.cards.each do |card|</p>

<pre><code>  puts "- \"#{card.name}\""
  puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
  puts "-- Members: #{card.members.count}"
  puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>end
```</p>

<p>Wow, cool! Such data! This is really great for a single user because we only have to make the connection to Trello once (which is not incredibly fast). However, this won&rsquo;t work in a multi-user environment since we configured ruby-trello to use a specific member token. So how do we connect to multiple members at a time? Let&rsquo;s print out the same data we did above for a single user, but using <code>Trello::Client</code> to connect to Trello.</p>

<p>``` ruby client_test.rb
require &lsquo;trello&rsquo;</p>

<p>me = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;MY_MEMBER_TOKEN&rsquo;]
)</p>

<p>you = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;YOUR_MEMBER_TOKEN&rsquo;]
)</p>

<p>[me, you].each do |user|
  puts user.fullname
  board = user.boards.first
  puts board.name
  puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
  puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
  board.cards.each do |card|</p>

<pre><code>    puts "- \"#{card.name}\""
    puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
    puts "-- Members: #{card.members.count}"
    puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>  end
end
```</p>

<p>Now, as your friend and teacher, I command you to use this knowledge to go <a href="//ollert.herokuapp.com">do cool stuff</a> with Trello!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using x-editable to do in-line editing for you]]></title>
    <link href="http://larry-price.com/blog/2014/02/22/using-x-editable-to-do-in-line-editing-for-you/"/>
    <updated>2014-02-22T19:15:00-05:00</updated>
    <id>http://larry-price.com/blog/2014/02/22/using-x-editable-to-do-in-line-editing-for-you</id>
    <content type="html"><![CDATA[<p>In-line editing is traditionally difficult. Taking a static HTML node and turning it into an editable text field and then sending that data off somewhere is a little bit more Javascript than I like to write. My team and I came up against a very difficult UX problem which I spent over a week trying to understand. After building and discussing several solutions, we eventually decided to narrow the scope of what the user should be able to change. We would present the user with a table where one of the columns would be editable.</p>

<p>Rather than showing a table with the third column always as a field for text entry, I used the Javascript library <a href="//vitalets.github.io/x-editable/">X-editable</a>. X-editable allows me to display my editable item as a link. When the user clicks the item, the link turns into a text field with a Save/Cancel button (and a &lsquo;clear&rsquo; button as a bonus). The &lsquo;Save&rsquo; button submits an AJAX &lsquo;POST&rsquo; or &lsquo;PUTS&rsquo;, where we are then allowed to validate and save the data. The &lsquo;Cancel&rsquo; button turns the text field back into a link with the original value.</p>

<p>Hooray, someone else has already done the hard work for us! So, what I want to do is dynamically generate a table with objects and allow the user to edit one of the columns. In my case, only the end column is editable, but I could just as easily spread this availability to all my columns. I&rsquo;m using all my favorite tools to create this page, specifically <a href="//ruby-lang.org/en/">ruby</a>, <a href="//sinatrarb.com">Sinatra</a>, <a href="//getbootstrap.com">Twitter Bootstrap</a>, and <a href="//haml.info">HAML</a>.</p>

<p>X-editable has implementations using Bootstrap, jQuery UI, and jQuery. Since I&rsquo;m already using Bootstrap in my app, I&rsquo;m going to go with that version. Note that there are Bootstrap 2 and Bootstrap 3 builds of X-editable, and I&rsquo;m using the Bootstrap 3 variety.</p>

<p>First I include the necessary files at the top of my HAML document.</p>

<p>``` haml /views/manage_data.haml
%script{src: &ldquo;//code.jquery.com/jquery.js&rdquo;}
%script{src: &ldquo;//getbootstrap.com/dist/js/bootstrap.min.js&rdquo;}
%link{href: &ldquo;//getbootstrap.com/dist/css/bootstrap.min.css&rdquo;, rel: &ldquo;stylesheet&rdquo;}</p>

<p>%link{href: &ldquo;//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/css/bootstrap-editable.css&rdquo;, rel: &ldquo;stylesheet&rdquo;}
%script{src: &ldquo;//cdnjs.cloudflare.com/ajax/libs/x-editable/1.5.0/bootstrap3-editable/js/bootstrap-editable.min.js&rdquo;}
```</p>

<p>I&rsquo;m going to dumb my page down so I only have to show the important parts. I&rsquo;m going to create a table from an array of hashes called <code>@options</code>. Each hash has two important fields for this table: Points and Dollars. I will iterate over <code>@options</code>, displaying the <code>points</code> field as plain text and the <code>dollars</code> field as an X-editable link. Each hash also has a <code>value</code> field containing the primary key for the object to be edited.</p>

<p>``` haml /views/manage_data.haml
.container
  .row</p>

<pre><code>.col-md-6
  %table{id: "edit_points_goal", class: "table table-responsive table-hover table-bordered"}
    %thead
      %tr
        %th{width: "35%"}
          Points
        %th{width: "65%"}
          Dollars
    %tbody
      - @options.each do |option|
        %tr
          %td{style: "height: 45px; padding: 4px 8px; vertical-align: middle;"}
            #{option[:points]}
          %td{style: "height: 45px; padding: 4px 8px; vertical-align: middle;"}
            %a{href:"javascript:void(0)", "data-type"=&gt;"text", "data-pk"=&gt;"#{option[:value]}", "data-url"=&gt;"/update", "data-title"=&gt;"Enter dollar amount"}
              #{option[:dollars]}
</code></pre>

<p>```</p>

<p>The important part is the <code>a</code> tag:</p>

<ul>
<li><code>href</code> goes nowhere.</li>
<li><code>data-type</code> tells X-editable how it will edit the presented data. According to the docs, types include text, textarea, select, date, checklist and more.</li>
<li><code>data-pk</code> is the primary key of our data in the database. In my case, that comes to me stored in the <code>value</code> field of the option hash.</li>
<li><code>data-url</code> is the <code>post</code> method that will be used to interpret the data.</li>
<li><code>data-title</code> is used to tell the user what to do.</li>
</ul>


<p>Our code won&rsquo;t do anything yet seeing as it&rsquo;s not connected. We need some Javascript to do that. I put the Javascript at the top of my file, underneath the included files. The first thing we need to do is tell X-editable what type of editing we&rsquo;ll be doing. The options are in-line editing or a pop-up. I want the in-line editing in this case. The second thing I want to do is to set the <code>editable</code> attribute on the appropriate DOM objects. Since I&rsquo;m using an array, I found the easiest way to do this was to start at the table&rsquo;s id (edit_points_goal) and trace down to the <code>a</code> tag.</p>

<p>``` haml /views/manage_data.haml
:javascript
  $.fn.editable.defaults.mode = &lsquo;inline&rsquo;;</p>

<p>  $(document).ready(function() {</p>

<pre><code>if (#{vm.editable}) {
  $('#edit_points_goal tbody tr td a').editable();
}
</code></pre>

<p>  });
```</p>

<p>Now we need to deal with the <code>post</code> request. If you&rsquo;re really impatient to see things work, you should be able to see your in-line editable code in action, but the <code>post</code> call will fail with a &ldquo;NoMethodError.&rdquo;</p>

<p>Our <code>post</code> is going to be really simple. We verify that we have a non-negative integer and we either save and return 200 or we return 400 with an appropriate message. Our table in this example is just called <code>Data</code>, and we use <code>find</code> to get a value out of the database.</p>

<p>``` ruby web.rb
post &ldquo;/update&rdquo; do
  data = Data.find(id: params[&ldquo;pk&rdquo;])</p>

<p>  unless params[&ldquo;value&rdquo;].match(/[^0-9]/)</p>

<pre><code>data = params["value"].to_i
data.save
return 200
</code></pre>

<p>  end</p>

<p>  return {400, [], &ldquo;Please enter a valid non-negative number&rdquo;}
end
```</p>

<p>Things should be working now. When you enter good data and click the &lsquo;Ok&rsquo; button, our <code>post</code> will be called and the text field will turn back into a link. When you enter bad data, you should see our error message below the text field box.</p>

<p>Issues I encountered:</p>

<ul>
<li>Table column width shifting &ndash; Fixed by setting the widths explicitly, as seen above (35% and 65%).</li>
<li>Table height shifting &ndash; Fixed by setting the style of the <code>td</code> as seen above to give a larger height, more padding, and aligning the inner objects explicitly. I would recommend moving this definition to a <code>.css</code> or <code>.scss</code> file.</li>
<li>&ldquo;NoMethodError&rdquo; after clicking Go &ndash; Unfortunately, if you made any coding errors in your route, you won&rsquo;t be able to see the Sinatra error page but will instead you&rsquo;ll be presented with a giant wall of HTML below the text box. Try to parse this error, but if you struggle to find out what went wrong you can always substitute a form-post method in place of the <code>a</code> tag, which may allow you to more easily figure out the problem.</li>
</ul>


<p>The <a href="//vitalets.github.io/x-editable/docs.html">X-editable docs</a> are extremely helpful for beginners. There is even more detail on the X-editable site, including editing multiple items, editing dates, and using a pop-up to edit the data.</p>
]]></content>
  </entry>
  
</feed>
