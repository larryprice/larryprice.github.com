<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2020-10-19T20:41:40-05:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    <email><![CDATA[larry@larry-price.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Great Teams (Book Writeup)]]></title>
    <link href="http://larry-price.com/blog/2015/12/28/creating-great-teams-book-writeup/"/>
    <updated>2015-12-28T13:30:12-05:00</updated>
    <id>http://larry-price.com/blog/2015/12/28/creating-great-teams-book-writeup</id>
    <content type="html"><![CDATA[<h3>The Gist</h3>

<p>Building software teams is a very difficult task. In most organizations, managers cobble together teams based primarily on who&rsquo;s available when the team is forming. Since managers can only know so much about the skills and relationships of each engineer, forming teams this way is chaotic and produces inconsistent results. Instead of management selecting teams, what if engineers created their own teams based on need, past experience, relationships, and doing what&rsquo;s best for the company? <em><a href="http://amzn.to/1VmIS2Y">Creating Great Teams</a></em> by Sandy Mamoli and David Mole (published by PragProg) explores the team self-selection process in great details with step-by-step instructions on running one&rsquo;s own self-selection event.</p>

<h3>Takeaways</h3>

<p><em>Managerial selection</em> is the act of management selecting teams. <em>Self-selection</em> is the act of individuals deciding which team to be on</p>

<p>Managerial selection works really well for smaller companies as there are fewer variables. As an organization grows, it&rsquo;s illogical to assume that a single manager forming a team can continue to know every engineer&rsquo;s skills, interests, career path, and personal relationships with all the other engineers and managers in the company. The writers of <em>Creating Great Teams</em> believe that managerial selection can begin to break down with as few as 10 engineers in an organization.</p>

<p>Managerial selection has the tendency to treat people as interchangeable parts. Every engineer has a different personality and skillset. Project A doesn&rsquo;t need &ldquo;Generic Engineer&rdquo;, it needs Sally and her particular brand of software development.</p>

<p>Engineers working on multiple projects is non-optimal. Everyone agrees that there is a cost to context-switching in productivity, but there is also a cost in engineer happiness and energy levels. The concept of putting engineers on multiple projects is guided by utilization numbers. Utilization tells a manager that Joe is 50% on Project A, so the manager also puts him 25% or 50% on Project B. Utilization-based team design treats engineers like computers as opposed to really nerdy, easily-agitated human beings.</p>

<p>Of course, we already know that self-selection has the potential to build really cool software. Every hackathon weekend starts with engineers building self-selected teams, and these teams are able to crank out more code in the course of a weekend than some projects team can in a month. It&rsquo;s not just the lack of rules that&rsquo;s making these teams more productive, but the joy of working with people you like and the motivation of working on something that interests you.</p>

<p>Convincing an organization to try self-selecting teams is an exercise in public relations. Everyone needs to be on-board and no one can undermine the self-selection process. If &ldquo;management&rdquo; decides that Betty would be better off on Project B than on Project A and moves her after the self-selection process, people will lose faith in the whole event.</p>

<p>People will generally do what&rsquo;s best for the company. Self-selection is a socialist process, where everyone will want to feel good about the outcome. If there is a project that doesn&rsquo;t seem very fun but is vital to the organization&rsquo;s success, someone is guaranteed to bite the bullet and put themselves on that project for the sake of the company.</p>

<p>The middle of the book is dedicated to setting up and running a self-selection event. Setting up the event is a tough process and may take several iterations.</p>

<h3>My Action Items</h3>

<ul>
<li><strong>Perform a trial event.</strong> At some point in the near future, I want to be involved with a trial self-selection event at my current organization. We have several outlets to do this, such as the Leadership Review or a Lunch and Learn. Although it might be difficult to put company-wide self-selected teams into practice at my organization due to the client-based nature of our work, I am positive we would have many wonderful insights from running a trial event.</li>
<li><strong>Read Daniel Pink&rsquo;s <em>Drive</em>.</strong> <a href="http://amzn.to/1OpbToV"><em>Drive</em></a> is about what motivates people and is cited several times throughout this book. I&rsquo;ve been meaning to do this since I read <em>Punished By Rewards</em>, but now it&rsquo;s officially on my up-next reading list.</li>
<li><strong>Read <em>Scaling Agile @ Spotify with Tribes, Squads, Chapters, and Guilds</em>.</strong> <a href="https://dl.dropboxusercontent.com/u/1018963/Articles/SpotifyScaling.pdf"><em>Scaling Agile at Spotify</em></a> is a whitepaper by some of the employees at Spotify discussing how Spotify was able to successfully scale Agile within their organization by breaking groups down into smaller and smaller subgroups.</li>
<li><strong>Talk about it.</strong> I was invited to join a small book group to discuss the implications of this book after the holiday. Hopefully we can find a way to implement some small amount of self-selection within our own organization, or at the very least determine all the current blockers for doing self-selection. I&rsquo;ll note that this book group is a self-selected team.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Battle With Hour-Based Estimation]]></title>
    <link href="http://larry-price.com/blog/2014/10/29/the-epic-battle-between-estimates-and-getting-work-done/"/>
    <updated>2014-10-29T18:33:27-04:00</updated>
    <id>http://larry-price.com/blog/2014/10/29/the-epic-battle-between-estimates-and-getting-work-done</id>
    <content type="html"><![CDATA[<p>I despise estimating in hours. Hours are too granular. Hours are too difficult to distinguish from hours on a clock (<em>they&rsquo;re even spelled the same</em>).</p>

<p>In any project where we work in hours, we always desparately task out stories in hours fill our capacity. <em>Which is also measured in hours</em>. We take people&rsquo;s days off and we estimate that developers spend about &frac34; of the day watching Youtube videos and reading Hacker News. So a developer works <strong>about 6 clock hours</strong> in a given day.</p>

<p>Then we start tasking out stories. We estimate that this task will take <strong>about 12 hours</strong>, this one <strong>about 8 hours</strong>, and we&rsquo;ll top it all off with a task of <strong>about 4 hours</strong> for ad-hoc testing. All in all, this story is estimated to take <strong>exactly 24 hours</strong>.</p>

<p>Now we do some math. Obviously, since a developer can get <strong>6 hours</strong> of work done in a day and this story will take <strong>24 hours</strong>, the story will be done in <strong>exactly 4 development days</strong>, or <strong>exactly 3 real days</strong>. We watch our capacity (in hours) fill by 24 and note all the space that&rsquo;s left.</p>

<p>Someone without reference to our developer-day-to-work-day comparison walks by. Excellent, it&rsquo;ll be done in three days, you say? That fits the schedule perfectly, tell the client we&rsquo;ll be done with that feature by Thursday. Let&rsquo;s add some more to your backlog&hellip;</p>

<p>For all we know, this estimate may work out. However, from my experience, the 8 hour task and 12 hour task will probably spend about the same amount of time in development, taking anywhere from 1-3 days each. Fortunately, the &ldquo;testing&rdquo; task will only take about 30 minutes.</p>

<p>What&rsquo;s wrong here?</p>

<p>Humans are bad at estimating. We become much worse at estimating when we start talking about knowledge work. I happen to believe we become even worse at estimating when we try to use time as a unit of measure. How long does it take you to get to work? I would say it takes me about 5 minutes. Google Maps tells me I would be lucky to get there in 10 without traffic. My estimation in minutes is <strong>bad</strong>, conflated by the monotony of performing a menial task over and over again.</p>

<p>When we have retros, we don&rsquo;t discuss how incorrect our hourly measurements were. We have a hybrid system of estimating stories in points and tasks in hours. We discuss the discrepancy between estimated and actual story points instead, despite the disconnect between our task estimates and our story estimates. (Another reason we don&rsquo;t discuss hour estimations at the retro is that it would take <strong>forever</strong> due to the high number of tasks and the granularity of hours (did this take one day or two, I can&rsquo;t remember)).</p>

<p>Do I have a solution to this problem? Of course I do. Don&rsquo;t use hours. Stick with points, and keep them as vague and hand-wavey as possible.</p>

<p>We often run into an issue of associating points with number of hours or days. &ldquo;Well, a 3 takes us about a week and a 5 takes us about 2 weeks. This story seems like it&rsquo;ll take about a week.&rdquo;</p>

<p>Points <strong>do not</strong> translate directly to how long a story will take. Points <strong>do</strong> translate to how much work a story feels like relative to the stories which have come before it.</p>

<p>Eventually, you should have a big enough pile of 1s, 2s, 3s, and 5s that you can relate a new story to a previous story. This story feels like a 3, about as much work as that story where we had to herd those cats. This story feels like a 1, technically all I have to do is flip this boolean&hellip;</p>

<p>When starting a project, estimate stories but don&rsquo;t try to estimate a capacity. Just see how many points you can get done in a sprint. Do it again for the second sprint. Keep doing it until your numbers balance out. This means that your estimates are becoming consistent and you&rsquo;re getting over the new project hump. Now you can tell your manager that you should be able to get 20 points done in a sprint, because you&rsquo;ve consistently bounced around that number the past few sprints.</p>

<p>Don&rsquo;t get too hasty and start telling people that you should be able to do more points with each sprint. I hate to break it to you, but you&rsquo;re not getting that much better each sprint. You need to adjust your point estimation to match your current competency level.</p>

<p>End rant. It&rsquo;ll probably be a long time before we see the death of hourly estimations, especially with big-name tools like Rally and Visual Studio Online containing fields explicitly for that purpose. Just fight the good fight for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Takeaways From AgileIndy 2014]]></title>
    <link href="http://larry-price.com/blog/2014/05/14/takeaways-from-agileindy-2014/"/>
    <updated>2014-05-14T20:59:00-04:00</updated>
    <id>http://larry-price.com/blog/2014/05/14/takeaways-from-agileindy-2014</id>
    <content type="html"><![CDATA[<p><a href="//agileindy.org/conference/">The AgileIndy Conference 2014</a> has come and gone. I wasn&rsquo;t sure what to expect, since it was my first conference, but I came out of it feeling rather positive.</p>

<p>A short list of my favorite things from this year&rsquo;s AgileIndy:</p>

<ul>
<li>Interesting speakers</li>
<li>Good food</li>
<li>Uncomfortable chairs</li>
<li><a href="//twitter.com/search?q=%23agileindy14&amp;src=hash">#agileindy14</a></li>
<li>Free booze</li>
<li>Lots of coffee</li>
<li>Champion dogs</li>
</ul>


<p>Good times. Personally, I found the first half of the day to be superior to the afternoon. I&rsquo;m not sure if it was the speakers or if I&rsquo;m just a morning person, but I&rsquo;m much more interested in discussing what the morning speakers had to say.</p>

<h3>The Dude</h3>

<blockquote><p>We&rsquo;ve got hard problems to solve, we don&rsquo;t need aphorisms, we don&rsquo;t need truisms.
&ndash; David Hussman</p></blockquote>

<p>The event started out with the self-proclaimed &ldquo;Dude,&rdquo; <a href="//devjam.com/">David Hussman of DevJam</a>. I&rsquo;ve previously had some training involving Mr Hussman at <a href="//sep.com">SEP</a>, during which we had trouble explaining our relationship with Agile: gargantuan project, lots of devs, massive codebase, hour-long builds, and an immature implementation of the so-called Scalable Agile Framework. I thought I knew what to expect during this talk, but I was delightfully mistaken. Everything Hussman said during his keynote fit with the conversations I&rsquo;ve been having with my current teammates.</p>

<p>Hussman talked about &ldquo;process mass,&rdquo; or the weight that you carry as you gain more and more process on a project. &ldquo;Measure your success by evidence, not by adherence&rdquo; to the process. What good is completing a story if you don&rsquo;t have anything to show for it, or if you don&rsquo;t have the quality to back it up? Hussman discussed scrum, and the ridiculous concept of &ldquo;scrum of scrums,&rdquo; and potentially even a &ldquo;scrum of scrum of scrums.&rdquo; In his own words, &ldquo;At some point you have to have something other than a naming convention.&rdquo; Getting stuff done and feeling satisfied with your work is much more important than being able to audit the lifetime of a story, or what day of the week your team gets the most done, or how many meetings your ScrumMaster goes to.</p>

<p>Speaking of ScrumMasters (and Product Owners and Tech Leads for that matter), the Dude wants us to think critically about these roles. Why are Scrum Masters and Tech Leads in meetings all day? A Tech Lead mosies into standup in the morning just to say, &ldquo;Yesterday I was in meetings all day, today I&rsquo;m in meetings all day, no blockers.&rdquo; &ldquo;Somehow [we&rsquo;ve] bonded the process to the people,&rdquo; using process to hold team members hostage. We&rsquo;ve found ourselves turning Agile into a bloated mess, and we&rsquo;re in need of people to relieve the pressure.</p>

<h3>Estimation</h3>

<p>During the first break-out session, <a href="//vance.com/">Steve Vance</a> talked about estimation, one of my favorite topics to complain about.</p>

<p>We started out by defining terms. Unfortunately, we use the word &ldquo;estimation&rdquo; to mean almost anything, from the very precise to the very vague. We &ldquo;estimate&rdquo; in T-shirt sizes, story points, days, and hours. We all mean something different when we make an estimation; it all boils down to an opinion. &ldquo;The work is going to take what it takes,&rdquo; and everyone has an opinion on how long that is.</p>

<p>I mentioned hours in the above paragraph as a unit of estimation. This is a particular pet peeve of mine: I absolutely despise estimating in hours. What do we even mean when we estimate in hours? Vance says, &ldquo;When I say hours as in this is going to take 3 hours, that does not mean 3 clock hours.&rdquo; So what <em>does</em> an hour mean? My current team uses a tool called TFS, which actually forces you to answer this question. So we &ldquo;estimate&rdquo; that Danny Developer will be able to accomplish 5 hours of work every day. We just turned Danny&rsquo;s day into hours on a clock. Now we &ldquo;estimate&rdquo; that a task will take &ldquo;about a day,&rdquo; which translates into 8 hours. Note that <code>1 task day != 1 Danny Day</code>. We&rsquo;re estimating tasks in these very precise units (real-life hours), and poor Danny will probably just work a 10-hour day to finish the task in &ldquo;1 day,&rdquo; which is what the team estimated the task would take.</p>

<p>T-shirt sizing or story points should be able to alleviate these problems, but we have to be vigilant not to concretely define these terms. Estimates should always be relative to yesterday&rsquo;s weather and not based on real time frames. Once you&rsquo;ve defined a 5-point story as taking exactly 5 days, you&rsquo;ve destroyed the whole system and you might as well start estimating in hours again.</p>

<h3>Anti-fragility</h3>

<p><a href="//salhir.wordpress.com">Si Alhir</a> discussed the principles of &ldquo;anti-fragility&rdquo; during the pre-lunch session. Anti-fragility is a post-Agile concept. That&rsquo;s right: <em>post-Agile</em>. I know you were just getting used to Agile, but it seems that we&rsquo;ve created a monster that&rsquo;s getting harder and harder to control. Teams find themselves saying &ldquo;They&rsquo;re not Agile, we&rsquo;re Agile&rdquo; when describing the pitfalls of other teams.</p>

<p>So what is anti-fragility? It&rsquo;s easier to define in relative terms. Traditional teams are hurt by change and actively resist change; Agile teams embrace change and are able to inspect and adapt to it; Anti-Fragile teams embrace disorder and are able to adapt and evolve to chaos. &ldquo;Fragile teams want tranquility,&rdquo; while anti-fragile teams &ldquo;gain from stress.&rdquo; Anti-fragility involves shifting from focusing on avoiding risk to focusing on overcoming risk.</p>

<p>&ldquo;What have you removed?&rdquo; Si asks, reiterating Hussman from earlier in the day. &ldquo;More rules, more process causes more fragility.&rdquo; As our Agile teams add process, this becomes more evident. &ldquo;Dependency,&rdquo; &ldquo;the line between dev and test&rdquo;, and &ldquo;centralized power&rdquo; all cause fragility. Sprint cycles every 1-2 weeks cause a constant stress, which &ldquo;will kill you, numb you.&rdquo; Anti-fragile teams prefer &ldquo;acute stress with recovery time&rdquo; caused by overcoming risk as it materializes. The so-called ScrumMaster of an Agile team is protecting the team from risk, contributing to the overall fragility of the team.</p>

<p>&ldquo;The most fragile thing in the Agile world is teams,&rdquo; Si insists. &ldquo;Consistent, co-located teams.&rdquo; Teams should be able to be disbanded and created at-will or &ldquo;just in time&rdquo; as the need arises. Teams are created to attack &ldquo;focal points,&rdquo; or areas that need attention right away. This is an especially hard pill to swallow, since many of us like the familial feeling that comes with long-term teams. Not to mention the nightmares of billing if you&rsquo;re a consulting company.</p>

<h3>Conclusion</h3>

<p>There were a few other speakers at the conference, but none hit quite as close to home as the three I&rsquo;ve discussed. Overall a very interesting conference and a very fun experience. I&rsquo;m excited to think about these ideas and I&rsquo;d like to attempt to use some of them to make my teams more efficient and maybe even a little happier. It looks like the general flow is to move away from massive amounts of process, working more like Lean Startup or Anti-fragile teams.</p>

<p>A decade from now, we&rsquo;ll be living in a post-anti-fragile world wondering what on earth we were thinking in this world of rules, definitions, estimations, and process.</p>
]]></content>
  </entry>
  
</feed>
