<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Larry Price]]></title>
  <link href="https://larry-price.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="https://larry-price.com/"/>
  <updated>2020-11-03T11:30:15-06:00</updated>
  <id>https://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    <email><![CDATA[larry@larry-price.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redirecting To Your Main Site With Heroku]]></title>
    <link href="https://larry-price.com/blog/2018/04/25/redirecting-to-your-main-site-with-heroku/"/>
    <updated>2018-04-25T20:52:19-05:00</updated>
    <id>https://larry-price.com/blog/2018/04/25/redirecting-to-your-main-site-with-heroku</id>
    <content type="html"><![CDATA[<p>We have a lot of domains that we want to redirect to the same server, but we use a DNS service that does not allow doing a domain forward, and we&rsquo;re not allowed to upgrade. I wanted to do this in the simplest way possible, so I created a workaround using a PHP script and Heroku. The source discussed in detail in this post is available on GitHub: <a href="https://github.com/larryprice/simple-heroku-redirect-app">https://github.com/larryprice/simple-heroku-redirect-app</a>.</p>

<p>The goal here is for users to visit a page and then be immediately redirected to the new site. I&rsquo;ve defined two environment variables to be used in this project: <code>SITENAME</code>, a human-readable name for our website, and <code>SITEURL</code>, the full URL that we actually want the user to end up on. I&rsquo;ve defined a PHP file called <code>index.php</code>:</p>

<pre><code class="php index.php">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;?php echo getenv('SITENAME') ?&gt; - You will be redirected shortly...&lt;/title&gt;
    &lt;meta http-equiv="refresh" content="0;URL='&lt;?php echo getenv('SITEURL') ?&gt;'" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Please visit the official &lt;?php echo getenv('SITENAME') ?&gt; site at &lt;a href="&lt;?php echo getenv('SITEURL') ?&gt;"&gt;&lt;?php echo getenv('SITEURL') ?&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>The important piece here is the <code>&lt;meta&gt;</code> tag, which actually does the redirect for us. The only PHP code here are <code>echo getenv</code> commands that render our environment variables in the template. Since I&rsquo;m a PHP novice, there may be a better way to do this, but the <code>echo</code> works just fine.</p>

<p>We also need to tell Apache how to serve the application. We want to match any routes and render our <code>index.php</code>. So we create an <code>.htcaccess</code> file:</p>

<pre><code class="sh .htaccess">RewriteEngine on
RewriteRule . index.php [L]
</code></pre>

<p>To satisfy Heroku, we need to list the dependencies for our PHP application. Fortunately for us, we don&rsquo;t have any dependencies that Heroku does not provide by default. We&rsquo;ll just create a <code>composer.json</code> file in the root of our project with an empty object:</p>

<pre><code class="json composer.json">{}
</code></pre>

<p>That&rsquo;s everything we need. You could recreate the project, but you could also just pull down the project listed above and push it up to Heroku:</p>

<pre><code class="bash">$ git clone https://github.com/larryprice/simple-heroku-redirect-app.git
$ cd simple-heroku-redirect-app
$ heroku create
$ git push heroku master
</code></pre>

<p>With your application available on Heroku, we still need to set the environment variables described earlier as <a href="https://devcenter.heroku.com/articles/config-vars">config variables</a>:</p>

<pre><code class="bash">$ heroku config:set SITENAME=yourgooddomain.com
$ heroku config:set "SITEURL=Your Good Domain's Website Name"
</code></pre>

<p>Now tell Heroku all <a href="https://devcenter.heroku.com/articles/custom-domains">the domains</a> that will be accessing this application. These are the domains you want users <em>not</em> to use:</p>

<pre><code class="bash">$ heroku domains:add yourbaddomain.com
$ heroku domains:add www.yourbaddomain.com
</code></pre>

<p>Now you just need to add the records indicated by the above command to your DNS records. These will probably be CNAME records pointing from <code>@</code> to <code>yourbaddomain.com.herokudns.com</code> or <code>www</code> to <code>yourbaddomain.com.herokudns.com</code>.</p>
]]></content>
  </entry>
  
</feed>
