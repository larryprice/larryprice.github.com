<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Larry Price]]></title>
  <link href="https://larry-price.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="https://larry-price.com/"/>
  <updated>2018-02-02T16:22:12-06:00</updated>
  <id>https://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    <email><![CDATA[larry@larry-price.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[I am an Artist Now: CSS3 Transitions]]></title>
    <link href="https://larry-price.com/blog/2015/04/06/i-am-an-artist-now-css3-transitions/"/>
    <updated>2015-04-06T18:57:36-04:00</updated>
    <id>https://larry-price.com/blog/2015/04/06/i-am-an-artist-now-css3-transitions</id>
    <content type="html"><![CDATA[<p>I just discovered <a href="//www.w3.org/TR/css3-animations/">CSS3 Animation</a> and I am quickly becoming obsessed.</p>

<p><a name="infinite-ball"></a>
<iframe style="width: 100%; height: 150px" frameborder="0" seamless="seamless" src="//jsfiddle.net/9uny3mb1/7/embedded/result,html,css/light/"></iframe></p>

<p>CSS3 makes DOM animations really easy. I can move things around, shrink or enlarge text and images, make buttons and links &ldquo;pop&rdquo; on hover, and help the user focus on the most relevant information. This can all be done through CSS3.</p>

<p><strong>DISCLAIMER</strong>: Contrary to the title of this article, I am less of a Picasso and more of a dog making &ldquo;art&rdquo; all over your brand new rug.</p>

<h3>Animation</h3>

<p>Do you see that ball <a href="#infinite-ball">up there</a>? If you can&rsquo;t, go check out the <a href="//jsfiddle.net/9uny3mb1/7">jsfiddle</a>. The concepts are so simple an embedded programmer could do it. Let&rsquo;s look at the <code>animation-</code> tags on the ball first:</p>

<pre><code class="css">.ball {
  /* ... */
  animation-duration: 10s;
  animation-name: rollout;
  animation-iteration-count: infinite;
}
</code></pre>

<ul>
<li><code>animation-duration</code>

<ul>
<li>The length of time the animation will take to complete.</li>
<li>Example: 10s</li>
</ul>
</li>
<li><code>animation-name</code>

<ul>
<li>A unique name for the animation we want to use. If you write good animations, you might be able to reuse them later.</li>
<li>Example: rollout</li>
</ul>
</li>
<li><code>animation-iteration-count</code>

<ul>
<li>The number of times the animation should run. Default 1.</li>
<li>Example: infinite</li>
</ul>
</li>
</ul>


<p>Note that there are several other <code>animation-</code> attributes to give you more control, but we only need a few in this case. For a more in-depth look at these attributes and their constituents, I advise you to check out <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations">this MDN article</a>. Also, note that at this point Google&rsquo;s Chrome browser still requires <code>-webkit-</code> prefixes on animation objects. Hopefully they join the rest of the modern world soon.</p>

<p>The <code>animation-</code> attributes let us configure our usage of an animation, but the real guts of the animation come from the definition inside a <code>@keyframes</code> tag.</p>

<pre><code class="css">.ball { /* ... */ }

@keyframes rollout {
  25% {
    margin-left: 47%;
  }
  50% {
    margin-left: 94%;
  }
  75% {
    margin-left: 47%;
  }
  100% {
    margin-left: 0%;
  }
}
</code></pre>

<p>Note the name <code>rollout</code> is the same as the <code>animation-name</code> attribute we set on <code>.ball</code> previously. This is the definition of our animation at different timeframes. What this says:</p>

<ol>
<li><strong>25%</strong> of the way through the animation, the object should have <code>margin-left</code> of <strong>47%</strong>, putting it in the middle of the page.</li>
<li><strong>50%</strong> of the way through the animation, the object should have <code>margin-left</code> of <strong>94%</strong>, putting it at the far right of the page.</li>
<li><strong>75%</strong> of the way through the animation, the object should have <code>margin-left</code> of <strong>47%</strong>, putting it in the middle of the page again.</li>
<li><strong>100%</strong> of the way through the animation, the object should have <code>margin-left</code> of <strong>0%</strong>, putting it back where it started.</li>
</ol>


<p>This is easy and relatively readable. I can see exactly what is supposed to be going on and when.</p>

<h3>Transition</h3>

<p>Although the <code>animation-</code> attributes give you a lot of control over animations, there are several other tools available. <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions">CSS Transitions</a> are animations that are performed <a href="//stackoverflow.com/questions/20586143/css-animation-vs-transition#20590319">between two distinct states</a>. This is especially helpful when you want to run an animation after some event happens. When I click this button, I add a class to my ball to make it move to the right. I click it again and the ball moves to the left. You can see <a href="#ball-click">the fiddle below</a> or view it on <a href="//jsfiddle.net/9uny3mb1/4/">jsfiddle</a>.</p>

<p><a name="ball-click"></a>
<iframe style="width: 100%; height: 150px" frameborder="0" seamless="seamless" src="//jsfiddle.net/9uny3mb1/4/embedded/result,html,css,js/light/"></iframe></p>

<p>The important CSS here is <code>transition</code> and the <code>margin-left</code>:</p>

<pre><code class="css">.ball {
  /* ... */

  transition: margin-left 3s;   
  margin-left: 0%;
}

.rollout {
  margin-left: 94%;
}
</code></pre>

<p>When my DOM object has the <code>ball</code> class, a transition will begin to set the <code>margin-left</code> to <strong>0%</strong> over a period of 3 seconds. When the <code>rollout</code> class is applied, a transition begins which brings the <code>margin-left</code> to <strong>94%</strong> over another 3 seconds. The transition knows to apply the given CSS attribute as found in the last-applicable style definition.</p>

<p>Transitions are really great for single page applications - as I switch contexts in my application, I move my DOM elements around or I gradually hide them from view. When I get time to release my next homemade application, expect to see lots of little animations. Probably way more animations than necessary - just bear with me.</p>

<p>There are many other CSS animation topics, but I don&rsquo;t quite have the experience to elaborate. <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transforms">Transforms</a> give you really easy ways to rotate, skew, and translate objects, even allowing for the creation of 3-dimensional CSS objects. The <code>to</code> and <code>from</code> shorthand in <code>@keyframes</code> elements can make reading animations even easier. I may be a little late to the party, but the world created by CSS3 and HTML5 is a much better one for programmers and (hopefully) for end-users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sticky footer with Twitter Bootstrap]]></title>
    <link href="https://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap/"/>
    <updated>2014-03-24T20:12:50-04:00</updated>
    <id>https://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>Sometimes CSS is a total pain.</p>

<p>We encountered a major CSS problem while working on our incredible startup weekend project <a href="//ollert.herokuapp.com">Ollert</a>. We had created a footer that we wanted below all of our content. We threw together some quick HTML and got a footer below all of the main content, and it looked really good when our main content filled up the entire screen.</p>

<p>What about when there was very little data on the screen? Well, then the footer just floated in the middle of the page, staring at us like some kind of psychotic hummingbird, waiting to slice you up when you&rsquo;re not looking. We searched online and found lots of different solutions; None of them worked. The footer just floated there, taunting us; Telling us to cry home to mommy. So we gave up on the prospect for the rest of the afternoon.</p>

<p>A few days after startup weekend, I found the real solution from the good folks at <a href="//getbootstrap.com/2.3.2/examples/sticky-footer.html">Twitter Bootstrap</a> themselves. It&rsquo;s pretty simple, really. Hooray for the internet!</p>

<p>Below is the HTML to create this effect with all the CSS styles embedded. Marked up with plenty of comments.</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" style="height: 100%;"&gt;
  &lt;head&gt;
    &lt;link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"&gt;
  &lt;/head&gt;
  &lt;body style="height: 100%;"&gt;
    &lt;div id="wrap" style="min-height: 100%; height: auto !important; height: 100%; margin: 0 auto -50px;"&gt;
      &lt;!-- All your content goes inside wrap. --&gt;
      &lt;!-- The bottom margin must be negative the footer min-height --&gt;
      &lt;!-- Footer min-height is set to 50px in this case --&gt;
      &lt;div class="container"&gt;
        &lt;div class="row"&gt;
          &lt;div class="h1"&gt;
            All Your Content
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="row"&gt;
          All your content will go inside the 'wrap' div.
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id="push" style="min-height: 50px;"&gt;
        &lt;!-- This push node should be inside wrap and empty --&gt;
        &lt;!-- Min-height is equal to the min-height of the footer --&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
  &lt;div id="footer" style="min-height: 50px;"&gt;
    &lt;!-- Some sweet footer content --&gt;
    &lt;div class="container"&gt;
      &lt;div class="small"&gt;
        Zowee, I've got a footer stuck to the bottom!
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/html&gt;
</code></pre>

<p>Div tag ids such as &ldquo;wrap&rdquo;, &ldquo;push&rdquo;, and &ldquo;footer&rdquo; can be whatever you want. The height of the footer can be adjusted to fit whatever content you want; I found that using <code>min-height</code> instead of <code>height</code> allowed my content to resize appropriately when wrapped. Styles should definitely be moved to a css file.</p>
]]></content>
  </entry>
  
</feed>
