<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ollert | Larry Price]]></title>
  <link href="http://larry-price.com/blog/categories/ollert/atom.xml" rel="self"/>
  <link href="http://larry-price.com/"/>
  <updated>2014-05-25T16:43:47-04:00</updated>
  <id>http://larry-price.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using sqlite on Heroku]]></title>
    <link href="http://larry-price.com/blog/2014/03/29/using-sqlite-on-heroku/"/>
    <updated>2014-03-29T11:16:06-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/29/using-sqlite-on-heroku</id>
    <content type="html"><![CDATA[<p>Or rather, &ldquo;Not Using sqlite on Heroku.&rdquo;</p>

<p><a href="//heroku.com">Heroku</a> does not support <a href="//sqlite.org">sqlite</a>. That doesn&rsquo;t mean we have to stop using sqlite in development, but it does mean we need to put in some workarounds to support our deployment environment. The rest of this article will use <a href="//ruby-lang.org">ruby</a> and <a href="//sinatrarb.com">Sinatra</a>.</p>

<p>Assuming you have a heroku app deployed and you have sqlite already working locally, this only takes a few steps. First we need to add a SQL database to our heroku app. From the project directory, we&rsquo;ll add the <a href="//addons.heroku.com/heroku-postgresql">heroku-postgresql</a> addon to our app.</p>

<p><code>bash
$ heroku addons:add heroku-postgresql:dev
</code></p>

<p>The <code>dev</code> piece of this command tells heroku we want the small, free database. This database supports up to 10,000 rows and has a 99.5% uptime. Best of all: it&rsquo;s free. Other options have you pay $9/mo for 10,000,000 rows or $50+ for Unlimited usage. I recommend you start small.</p>

<p>Hopefully you got some success statements after adding heroku-postgresql. They should have included some new environment variables, which are links to your new Postgres database. Record these; we&rsquo;ll use them a little later.</p>

<p>Now we need to set up the back-end to be able to access a Postgres database when necessary. Hopefully you&rsquo;re using a decent abstraction library in your app that can access any SQL database. For ruby, I find <a href="//www.sequel.rubyforge.org/">Sequel</a> to be sufficient.</p>

<p>In our Gemfile, we&rsquo;ve probably already included the sqlite gem for use in our local environment. We can go ahead and move that into a <code>development</code> block, and we need to add the <code>pg</code> gem to either <code>production</code> or the global block.</p>

<p>``` ruby Gemfile
source &ldquo;<a href="https://rubygems.org">https://rubygems.org</a>&rdquo;</p>

<p>ruby &lsquo;2.1.0&rsquo;</p>

<p>gem &lsquo;bundler&rsquo;
gem &lsquo;rake&rsquo;
gem &lsquo;sinatra&rsquo;
gem &lsquo;haml&rsquo;
gem &lsquo;sequel&rsquo;</p>

<p>group :production do
  gem &lsquo;pg&rsquo;
end</p>

<p>group :development do
  gem &lsquo;sqlite3&rsquo;
end
```</p>

<p>Heroku sets <code>ENV['RACK_ENV']</code> to &ldquo;production&rdquo; for us, which means that the pg gem should get picked up the next time we deploy. Now we need to tell our app which database to use in which situation.</p>

<p>One of the easiest places to make this decision is in Sinatra&rsquo;s <code>configure</code> block. I keep my local db in an environment variable called <code>LOCAL_DATABASE_URL</code>. This is where you use the environment variable heroku set for you when you set up your Postgres database; mine was called <code>HEROKU_POSTGRESQL_MAROON_URL</code>.</p>

<p>``` ruby web.rb
class App &lt; Sinatra::Base
  configure :production do</p>

<pre><code>Sequel.connect ENV['HEROKU_POSTGRESQL_MAROON_URL']
</code></pre>

<p>  end</p>

<p>  configure :development do</p>

<pre><code>Sequel.connect ENV['LOCAL_DATABASE_URL']
</code></pre>

<p>  end
end
```</p>

<p>This works because the default environment is &ldquo;development.&rdquo; Test locally, and then we can deploy.</p>

<p><code>bash
$ git push heroku master
</code></p>

<p>And enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sticky footer with Twitter Bootstrap]]></title>
    <link href="http://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap/"/>
    <updated>2014-03-24T20:12:50-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/24/sticky-footer-with-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>Sometimes CSS is a total pain.</p>

<p>We encountered a major CSS problem while working on our incredible startup weekend project <a href="//ollert.herokuapp.com">Ollert</a>. We had created a footer that we wanted below all of our content. We threw together some quick HTML and got a footer below all of the main content, and it looked really good when our main content filled up the entire screen.</p>

<p>What about when there was very little data on the screen? Well, then the footer just floated in the middle of the page, staring at us like some kind of psychotic hummingbird, waiting to slice you up when you&rsquo;re not looking. We searched online and found lots of different solutions; None of them worked. The footer just floated there, taunting us; Telling us to cry home to mommy. So we gave up on the prospect for the rest of the afternoon.</p>

<p>A few days after startup weekend, I found the real solution from the good folks at <a href="//getbootstrap.com/2.3.2/examples/sticky-footer.html">Twitter Bootstrap</a> themselves. It&rsquo;s pretty simple, really. Hooray for the internet!</p>

<p>Below is the HTML to create this effect with all the CSS styles embedded. Marked up with plenty of comments.</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en" style="height: 100%;">
  <head></p>

<pre><code>&lt;link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"&gt;
</code></pre>

<p>  </head>
  <body style="height: 100%;"></p>

<pre><code>&lt;div id="wrap" style="min-height: 100%; height: auto !important; height: 100%; margin: 0 auto -50px;"&gt;
  &lt;!-- All your content goes inside wrap. --&gt;
  &lt;!-- The bottom margin must be negative the footer min-height --&gt;
  &lt;!-- Footer min-height is set to 50px in this case --&gt;
  &lt;div class="container"&gt;
    &lt;div class="row"&gt;
      &lt;div class="h1"&gt;
        All Your Content
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
      All your content will go inside the 'wrap' div.
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="push" style="min-height: 50px;"&gt;
    &lt;!-- This push node should be inside wrap and empty --&gt;
    &lt;!-- Min-height is equal to the min-height of the footer --&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>  </body>
  <div id="footer" style="min-height: 50px;"></p>

<pre><code>&lt;!-- Some sweet footer content --&gt;
&lt;div class="container"&gt;
  &lt;div class="small"&gt;
    Zowee, I've got a footer stuck to the bottom!
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
</html></p>

<p>```</p>

<p>Div tag ids such as &ldquo;wrap&rdquo;, &ldquo;push&rdquo;, and &ldquo;footer&rdquo; can be whatever you want. The height of the footer can be adjusted to fit whatever content you want; I found that using <code>min-height</code> instead of <code>height</code> allowed my content to resize appropriately when wrapped. Styles should definitely be moved to a css file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Trello API in Ruby]]></title>
    <link href="http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby/"/>
    <updated>2014-03-20T19:37:36-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/20/using-the-trello-api-in-ruby</id>
    <content type="html"><![CDATA[<p>So, you want to gather data using the <a href="//trello.com">Trello</a> API so that you can <a href="//ollert.herokuapp.com">do something cool with it</a>? And you&rsquo;re using <a href="//ruby-lang.org">Ruby</a>? Enter <a href="//github.com/jeremytregunna/ruby-trello">ruby-trello</a>. Install!</p>

<p><code>bash
$ gem install ruby-trello
</code></p>

<p>We&rsquo;ll start off easy, and assume that we&rsquo;re writing a personal application where we only need to access data for one user at a time. We start by configuring ruby-trello. I&rsquo;m going to assume that you&rsquo;ve already generated a public key and received a member token and stored them in your environment.</p>

<p>``` ruby global_config_test.rb
require &lsquo;trello&rsquo;</p>

<p>Trello.configure do |config|
  # API key generated by visiting <a href="https://trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>
  config.developer_public_key = ENV[&lsquo;PUBLIC_KEY&rsquo;]</p>

<p>  # Member token
  # larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/
  config.member_token = ENV[&lsquo;MEMBER_TOKEN&rsquo;]
end
```</p>

<p>This connects me to a specific member as found through <code>ENV['MEMBER_TOKEN']</code>. I previously wrote <a href="/blog/2014/03/18/connecting-to-the-trello-api/">another post</a> about getting a member token from a user.</p>

<p>For demonstration, I&rsquo;ll find myself, grab my first board, and then display the name, names of lists, members who have worked on the project, and some numbers about each of the cards in the board. This is essentially my proof of concept for a <a href="/blog/2014/03/17/sep-startup-weekend-ollert/">super-cool web-app I wrote</a> called <a href="//ollert.herokuapp.com">Ollert</a>.</p>

<p>``` ruby global_config_test.rb
&hellip;</p>

<h1>find myself</h1>

<p>me = Trello::Member.find(&ldquo;_larryprice&rdquo;)</p>

<h1>find first board</h1>

<p>board = me.boards.first
puts board.name
puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
board.cards.each do |card|</p>

<pre><code>  puts "- \"#{card.name}\""
  puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
  puts "-- Members: #{card.members.count}"
  puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>end
```</p>

<p>Wow, cool! Such data! This is really great for a single user because we only have to make the connection to Trello once (which is not incredibly fast). However, this won&rsquo;t work in a multi-user environment since we configured ruby-trello to use a specific member token. So how do we connect to multiple members at a time? Let&rsquo;s print out the same data we did above for a single user, but using <code>Trello::Client</code> to connect to Trello.</p>

<p>``` ruby client_test.rb
require &lsquo;trello&rsquo;</p>

<p>me = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;MY_MEMBER_TOKEN&rsquo;]
)</p>

<p>you = Trello::Client.new(
  :developer_public_key => ENV[&lsquo;PUBLIC_KEY&rsquo;],
  :member_token => ENV[&lsquo;YOUR_MEMBER_TOKEN&rsquo;]
)</p>

<p>[me, you].each do |user|
  puts user.fullname
  board = user.boards.first
  puts board.name
  puts &ldquo;Lists: #{board.lists.map {|x| x.name}.join(&lsquo;, &rsquo;)}&rdquo;
  puts &ldquo;Members: #{board.members.map {|x| x.full_name}.join(&lsquo;, &rsquo;)}&rdquo;
  board.cards.each do |card|</p>

<pre><code>    puts "- \"#{card.name}\""
    puts "-- Actions: #{card.actions.nil? ? 0 : card.actions.count}"
    puts "-- Members: #{card.members.count}"
    puts "-- Labels: #{card.labels.count}"
</code></pre>

<p>  end
end
```</p>

<p>Now, as your friend and teacher, I command you to use this knowledge to go <a href="//ollert.herokuapp.com">do cool stuff</a> with Trello!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to the Trello API]]></title>
    <link href="http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api/"/>
    <updated>2014-03-18T20:00:11-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/18/connecting-to-the-trello-api</id>
    <content type="html"><![CDATA[<p><a href="//trello.com">Trello</a> has a <a href="//trello.com/docs/">pretty sweet API</a>, which we use extensively in our Trello-analysis app <a href="//ollert.herokuapp.com">Ollert</a>. Initially connecting to the Trello API took us a few hours, so I&rsquo;d like to make a record of how we managed to connect.</p>

<p>Making a connection to Trello requires two hashcodes: an application key and a Trello member token. You can generate and view your application key by visiting <a href="//trello.com/1/appKey/generate">https://trello.com/1/appKey/generate</a>.</p>

<p>The member token is something we need to get from the user. There are two ways to get a user&rsquo;s member token: through fragments and through a <strong>postMessage</strong>. You can also request different levels of access (read, write, read+write), and different expiration periods (such as 1 day, 30 days, or never) for member tokens. For the remainder of this writing, I&rsquo;ll be accessing a read-only member token that never expires.</p>

<p>We didn&rsquo;t have a lot of luck with fragments, but the concept is simple enough. You have the user click a link that probably says &ldquo;Connect With Trello&rdquo; which is similar to:</p>

<p><code>https://trello.com/1/authorize?key=applicationkey&amp;name=applicationname&amp;expiration=never&amp;response_type=token</code></p>

<p>At this point, the user is redirected to Trello and given the opportunity to Allow or Deny your application access. Once allowed, the user sees a static Trello page with their member token in plain text. Somehow you"re supposed to convey to them that they should copy this token and paste it back to you. This has clear drawbacks in usability.</p>

<p>Using the <strong>postMessage</strong> method of accessing a member token was significantly more fruitful. Trello provides a Javascript file named <a href="https://trello.com/docs/gettingstarted/clientjs.html">client.js</a> that does most of the legwork for you. An example:</p>

<p>``` haml
%script{src: &ldquo;//api.trello.com/1/client.js?key=applicationkey&rdquo;}</p>

<p>function AuthenticateTrello() {
  Trello.authorize({</p>

<pre><code>name: "YourApplication",
type: "popup",
interactive: true,
expiration: "never",
persist: true,
success: function () { onAuthorizeSuccessful(); },
scope: { write: false, read: true },
</code></pre>

<p>  });
}
function onAuthorizeSuccessful() {
  var token = Trello.token();
  window.location.replace(&ldquo;/auth?token=&rdquo; + token);
}</p>

<p>%a{href: &ldquo;javascript:void(0)&rdquo;, onClick: &ldquo;AuthenticateTrello()&rdquo;}
  Connect With Trello
```</p>

<p>When the user clicks the link, we have Trello set to activate a &ldquo;popup&rdquo; that will ask them to &ldquo;Allow&rdquo; or &ldquo;Deny&rdquo; our app from accessing their data. When the user allows us access, the popup closes and we hit the &ldquo;onAuthorizeSuccessful&rdquo; method. In my method, I simply redirect them to the <code>/auth</code> route with <code>token</code> manually added to the params list. One of the interesting options listed above is the &ldquo;persist&rdquo; option, which tells Trello whether it should prompt the user for his or her token every time. By telling Trello to persist, the user will only be presented with the popup when he or she needs to reauthenticate.</p>

<p>You can learn more about member tokens from <a href="//trello.com/docs/gettingstarted/authorize.html">https://trello.com/docs/gettingstarted/authorize.html</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SEP Startup Weekend: Ollert]]></title>
    <link href="http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert/"/>
    <updated>2014-03-17T20:07:38-04:00</updated>
    <id>http://larry-price.com/blog/2014/03/17/sep-startup-weekend-ollert</id>
    <content type="html"><![CDATA[<p>Last weekend was <a href="//sep.com">SEP</a>&rsquo;s 6th Semi-Annual <a href="//sep.com/labs/startupweekend/">Startup Weekend</a>. For those unfamiliar, software developers pitch ideas Friday evening and developers volunteer their time to come up with a <a href="//en.wikipedia.org/wiki/Minimum_viable_product">minimum viable product</a> in the next 48 hours. Free beer is the only thing that makes such a weekend possible.</p>

<p>I&rsquo;ve been before and participated in other people&rsquo;s projects and it&rsquo;s always a blast. However, this weekend was different: I had an idea to pitch. Although the idea went through many names, the core concept remained the same:</p>

<blockquote><p>To tell Trello users what their boards say about the past and the future through unique visuals.</p></blockquote>

<p><a href="//trello.com">Trello</a> is a collaborative workflow management tool that does a wonderful job of showing you the present. There is currently no way on Trello to see your past history or compare yesterday&rsquo;s weather. This simplicity is part of the beauty of Trello, but also an opportunity.</p>

<p>My idea was to create a web application where a user could quickly and easily connect with Trello and view information he or she had never seen previously. I would offer a trial service requiring no login that would allow access to all this data, given that the user puts up with authenticating with Trello every time he or she visits the site. There would be a free membership, which would allow the user to &ldquo;permanantly&rdquo; connect to Trello. To monetize, I wanted to offer a paid membership, where the user would be given the ability to compare &ldquo;historical&rdquo; Trello data by selecting begin and end dates for the Trello data that is analyzed.</p>

<p><a href="//ollert.herokuapp.com">Ollert</a> is the result of this Startup Weekend idea. A live version of Ollert can be found at <a href="//ollert.herokuapp.com">ollert.herokuapp.com</a>.</p>

<p>I worked on <a href="//ollert.herokuapp.com">Ollert</a> with 5 other great developers, and we got a spectacular amount of work done given that we only spent a single weekend programming. We were able to direct users to connect with Trello, let them select a board, and then generate and display 12 different statistics and analyses. We also implemented Sign Up/Login.</p>

<p>We worked on <a href="//ollert.herokuapp.com">Ollert</a> to the last minute, so not everything got in. We never implemented the paid member feature and we didn&rsquo;t get in all the analytics we wanted. We also had some great ideas come out while we were working on <a href="//ollert.herokuapp.com">Ollert</a> that didn&rsquo;t make it into the application, such as filtering chart types and selecting favorites.</p>

<p>Overall, my teammates and I had a great time and we are confident that we&rsquo;ve created something useful.</p>

<p>My current intention is to do several more blog posts about <a href="//ollert.herokuapp.com">Ollert</a> including Connecting to the Trello API, Using ruby-trello, Using sqlite on Heroku, What I Should Have Had Ready Before Asking People To Work For Me, and The Future of Ollert.</p>
]]></content>
  </entry>
  
</feed>
