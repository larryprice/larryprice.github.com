<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Larry Price]]></title>
  <link href="http://larryprice.github.com/atom.xml" rel="self"/>
  <link href="http://larryprice.github.com/"/>
  <updated>2013-01-19T12:35:29-05:00</updated>
  <id>http://larryprice.github.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing a Sinatra App with Capybara]]></title>
    <link href="http://larryprice.github.com/blog/2013/01/19/testing-a-sinatra-app-with-capybara/"/>
    <updated>2013-01-19T12:20:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2013/01/19/testing-a-sinatra-app-with-capybara</id>
    <content type="html"><![CDATA[<p><em>This is Part 3 in a multi-part series to detail the creation of a &#8220;simple&#8221; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.com/blog/categories/pokephile">Pokephile category</a>. Part 3 of this series describes using Capybara to test a Sinatra application. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>, and the final product can be found <a href="http://pokephile.herokuapp.com">here</a>.</em></p>

<p>Now that <a href="http://larryprice.github.com/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">the database is populated</a> with data and I&#8217;ve switched over to <a href="http://larryprice.github.com/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/">a simpler interface with Mongo</a>, I can actually start creating a UI. For simplicity&#8217;s sake, I like to use Sinatra on small projects. Sinatra makes it easy to create a web application with minimal effort. With an emphasis on testing this <a href="http://larryprice.github.com/blog/categories/pokephile">series</a>, I want to be sure to throughly test my UI and any application integration. <a href="http://cukes.info/">Cucumber</a> is a brilliant DSL which allows a programmer to describe in plain English how an application should be behaving. The <a href="https://github.com/jnicklas/capybara">Capybara gem</a> is a Rack app that simulates running your application and performing basic user tasks, such as clicking a button, following a link, or, on a lower level, looking at your HTML source. Install Capybara like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install capybara
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s what I want my application to do:</p>

<ul>
<li>User is on home page.</li>
<li>User enters name of Pokemon and presses &#8216;Search&#8217;.</li>
<li>User is redirected to search page.</li>
<li>User can see some information about Pokemon.</li>
<li>User can repeat the search process.</li>
</ul>


<p>Error scenario:</p>

<ul>
<li>User enters garbage data.</li>
<li>User is redirected to search page.</li>
<li>User sees error message.</li>
<li>User can repeat search process.</li>
</ul>


<p>So I&#8217;ll begin by writing my features. Cucumber syntax is meant to be readable by non-technical persons, so the &#8220;code&#8221; may look a bit odd. All Cucumber feature files are written something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Viewer visits the Home Page</span>
</span><span class='line'><span class="nf">  In order to read the page</span>
</span><span class='line'><span class="nf">  As a viewer</span>
</span><span class='line'><span class="nf">  I want to see the home page of my app</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> View the home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Zowee, mama!</span><span class="nf">&quot; on the page</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8220;Feature&#8221; lines are not used in testing; they are simply to give some relevance to the file&#8217;s feature and to attempt to prevent scope creep in the file. The &#8220;Scenario&#8221; lines are what&#8217;s important. The first line is the test name, the &#8220;Given&#8221; line is the pre-condition, and the final line is what should be observed.</p>

<p>In reality, I have only one main feature: &#8220;Search.&#8221; One can argue that I also have a feature of &#8220;seeing&#8221; my home page and my search page, but those are both trivial cases, so for the purpose of this blog post, I&#8217;ll skip such tests. Both my success and error case revolves around searching, and there&#8217;s not really much else to do in the app. I have to create a directory for the cukes, and that directory is called &#8220;features.&#8221; I create such a directory in my &#8220;project/tools/test&#8221; directory and create a new file called &#8220;search.feature.&#8221; Now I&#8217;ll write the feature:</p>

<figure class='code'><figcaption><span>project/tools/test/features/search.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Viewer vists the page</span>
</span><span class='line'><span class="nf"> In order to search the page</span>
</span><span class='line'><span class="nf"> As a visitor</span>
</span><span class='line'><span class="nf"> I want to search for Pokemon.</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Find correct Pokemon from home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Bulbasaur</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">#001 - Bulbasaur</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see an image with url &quot;</span><span class="s">http://img.pokemondb.net/artwork/bulbasaur.jpg</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Types: Grass, Poison</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Show error text from home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Johnny Bravo</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Lol! Could not find a Pokemon named &#39;Johnny Bravo.&#39; Try something else!</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Find correct Pokemon from search page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the search page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Bulbasaur</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">#001 - Bulbasaur</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see an image with url &quot;</span><span class="s">http://img.pokemondb.net/artwork/bulbasaur.jpg</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Types: Grass, Poison</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Show error text from search page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the search page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Johnny Bravo</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Lol! Could not find a Pokemon named &#39;Johnny Bravo.&#39; Try something else!</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I&#8217;ve overlooked a lot of tests that one would normally write while doing this, such as verifying that the search bar and search buttons exist and are enabled, but I&#8217;d like to keep it simple for now and just stick to testing my search feature. What do these tests do? The first scenario starts on the home page, enters data in the search box, presses the search button, and then verifies that all expected Pokemon data is visible. When writing cukes, I can append statements with an &#8220;And&#8221; statement as seen above. Run Cucumber:</p>

<figure class='code'><figcaption><span>project/tools/test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cucumber
</span></code></pre></td></tr></table></div></figure>


<p>Cucumber doesn&#8217;t exactly give us errors, but it also doesn&#8217;t give us success. Fortunately, what it did give us was sample code for all of the steps we need to write. So, let&#8217;s perform some copy/paste magic and create a steps file:</p>

<figure class='code'><figcaption><span>project/tools/test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir -p features/step_definitions
</span><span class='line'><span class="nv">$ </span>touch features/step_definitions/search_steps.rb
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the home page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I type &quot;(.*?)&quot; in the search bar$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I click &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should be on the &quot;(.*?)&quot; page$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see an image with url &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the search page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I futilely run &#8220;cucumber&#8221; again now, my tests still don&#8217;t pass because I haven&#8217;t actually implemented my steps. This is where Capybara comes in. I found that a <a href="https://gist.github.com/428105">Capybara cheat sheet</a> is quite helpful while writing out my steps. The syntax I&#8217;m going to use is similar to RSpec, except that it includes some Capybara methods. The first two test steps I want to deal with are the &#8220;Given&#8221; steps.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the home page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the search page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s2">&quot;Search&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All these statements are just Regular Expressions, as indicated by the /<sup>$/.</sup> The regex acts as a sort of method name that Cucumber finds to run the steps. Given I am on the home page is trivial: just &#8216;visit&#8217; the index. Given I am on the search page will first require me to click the &#8220;search&#8221; button. This is valid because my spec above says this is how to get to the search page. Now can do the &#8216;When&#8217; statements.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^I type &quot;(.*?)&quot; in the search bar$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I click &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I click just needs to click a button/link/whatever on the screen. The &#8220;(.*?)&#8221; is a regular expression that will match anything in quotes and assign it to the variable &#8216;arg1.&#8217; So I can give any button description and Capybara will try to click a button with the given content. When I type in the search bar takes the regex arg1 and uses the &#8220;fill_in&#8221; method to fill in a text input with id &#8220;pokemon-input.&#8221; The rest of the steps are all about what should be observed after performing the Given/When steps.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^I should be on the &quot;(.*?)&quot; page$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">current_path</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see an image with url &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//img[@src=&#39;</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2">&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I have all of the necessary steps defined! So, I&#8217;ll run Cucumber and&#8230; Actual errors! None of my four tests made it past the Given step, so I see the output &#8216;(4 failed, 19 skipped).&#8217; The only way to fix these errors is to finally start writing a web application. So I&#8217;ll move back out to the root of my project directory and create a file for my application called &#8216;app.rb&#8217; and give it the most basic information to run. And, if you haven&#8217;t already, install Sinatra.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install sinatra
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Application class inherits from the Sinatra::Base class. This allows me to define a &#8216;get&#8217; operation to perform actions and load a web page. &#8216;get &#39;&#39; do&#8217; signifies the first page a user sees when they go to my web application, commonly known as a home or index page. I plan to use <a href="http://haml.info">HAML</a> to create my page, so I make a call to haml followed by the name of my HAML document as a symbol. We need to define an &#8216;index.haml&#8217; page and stick it in a directory called &#8216;views&#8217; for Sinatra to find it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install haml
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      LOL HAI.
</span></code></pre></td></tr></table></div></figure>


<p>Tough work. If you&#8217;re not familiar with HAML, it&#8217;s a markup language that is &#8220;compiled&#8221; into an HTML page. The main difference between HAML and HTML is that HAML parses white space to figure out where closing tags should be placed. So now I want to run my application. I want to run it using &#8216;rackup,&#8217; so I&#8217;d like to define a &#8216;config.ru&#8217; file in the root of my project directory to do all the work for me.</p>

<figure class='code'><figcaption><span>project/config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we run &#8216;rackup&#8217; from the root of my project directory and see the fruits of my labor. Open up a web browser and enter &#8216;localhost:9292&#8217; in the address bar. You should see a very simple web page with the content of &#8220;LOL HAI&#8221; and a title of &#8220;Pokemon App.&#8221; If you view the source, you&#8217;ll see the HTML the HAML was compiled into. Just beautiful, isn&#8217;t it? Now if I switch back to my test directory and run Cucumber, what happens? The same result. That&#8217;s because I need to tell Capybara what to load before trying to run the tests. I do this by defining an &#8220;env.rb&#8221; file in a &#8220;support&#8221; directory of the features directory.</p>

<figure class='code'><figcaption><span>project/tools/test/features/support/env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../../../../app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="no">Application</span>
</span></code></pre></td></tr></table></div></figure>


<p>All I do is require my &#8220;app.rb&#8221; file which is seemingly <em>forever</em> away and then set the Capybara.app variable to my Application class. Now I run Cucumber and&#8230; &#8216;(4 failed, 17 skipped, 2 passed)&#8217; Two steps passed! Yippee! Now if only the rest passed as well. Looking at my &#8216;search.feature&#8217; file, I can see that the first &#8216;When&#8217; step is about typing into the search bar. So my first design decision is what kind of search bar I want. I&#8217;ve opted for the fun way out: using the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap&#8217;s</a> <a href="http://twitter.github.com/bootstrap/javascript.html#typeahead">typeahead</a>. The typeahead has functionality to give suggestions while the user types, and the best news is this is already coded for us. Adding the code for my search bar and a search button:</p>

<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>      <span class="nt">%link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap.css&quot;</span>)
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://code.jquery.com/jquery.min.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://twitter.github.com/bootstrap/assets/js/bootstrap-typeahead.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nf">#search</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 10%;&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="nt">%form</span><span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;search&quot;</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-search&quot;</span><span class="p">}</span>
</span><span class='line'>              <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;input-large&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon&quot;</span><span class="p">,</span> <span class="s2">&quot;data-provide&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;typeahead&quot;</span><span class="p">,</span> <span class="s2">&quot;data-items&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;10&quot;</span><span class="p">,</span> <span class="s2">&quot;autocomplete&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;off&quot;</span><span class="p">,</span> <span class="ss">:autofocus</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:placeholder</span> <span class="o">=&gt;</span> <span class="s2">&quot;Find a Pokémon...&quot;</span><span class="p">,</span> <span class="s2">&quot;data-source&quot;</span> <span class="o">=&gt;</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>}
</span><span class='line'>              <span class="nt">%button</span><span class="p">{</span><span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-small&quot;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;margin-bottom: 10px; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>                  Search
</span></code></pre></td></tr></table></div></figure>


<p>In the &lt;head> tag, I include a link to the Bootstrap stylesheet. In the &lt;body> tag, I include a link to the JQuery and Bootstrap Typeahead JavaScript files remotely so I don&#8217;t have to keep track of them. I then add a &lt;div> tag called &#8220;search&#8221; and center it on the page. Inside the div tag I create a form whose action sends a POST signal to the &#8220;search&#8221; action. Inside the form is first the typeahead, then a small submit button. The important parameters in the typeahead are &#8220;data-items&#8221; and &#8220;data-source;&#8221; &#8220;data-items&#8221; tells the JavaScript function how many items to suggest at a time, and &#8220;data-source&#8221; is an array of data for the JavaScript to search. Notice that my &#8220;data-source&#8221; uses the Pokemon class <a href="http://larryprice.github.com/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">created previously</a>, so I need to be able to set up a <a href="http://larryprice.github.com/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/">Mongoid connection</a> to access that data. I&#8217;ll make this connection in my &#8220;config.ru&#8221; file:</p>

<figure class='code'><figcaption><span>project/config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span>
</span><span class='line'>  <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;mongoid.yml&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have chosen to extend the Application class in my &#8220;config.ru&#8221; file to prevent interference with my test setups later. Taking a look at the application would be a good idea, but if I run &#8220;rackup&#8221; now Mongoid will complain about environment setup. By default, &#8220;Mongoid.load!&#8221; will try to load the &#8220;development&#8221; settings, so I need to include a &#8220;development&#8221; setup in my &#8220;mongoid.yml.&#8221; For now, it&#8217;s going to be identical to my &#8220;test&#8221; environment setup except for the database name:</p>

<figure class='code'><figcaption><span>project/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p>And ensuring some Pokemon are in the &#8220;dev&#8221; database:</p>

<figure class='code'><figcaption><span>Populating the dev database</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>&gt;&gt; Dir.pwd
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;project/tools/populate&quot;</span>
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>&gt;&gt; Mongoid.load! <span class="s1">&#39;../../mongoid.yml&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;sessions&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;default&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;database&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;dev&quot;</span>, <span class="s2">&quot;hosts&quot;</span><span class="o">=</span>&gt;<span class="o">[</span><span class="s2">&quot;localhost&quot;</span><span class="o">]}}}</span>
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;./populater&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>&gt;&gt; Populater.new.add_pokemon <span class="nv">152</span>
</span><span class='line'><span class="o">=</span>&gt; nil
</span><span class='line'>&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>And requiring the Pokemon model in app.rb:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;pokemon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, run &#8216;rackup&#8217; from the root of the &#8216;project&#8217; directory and load up the web application at &#8216;localhost:9292.&#8217; There&#8217;s now a typeahead and a search button in the top center of the page, and typing in the &#8216;Search&#8217; bar shows up to 10 suggestion Pokemon. Now I&#8217;ll return to my Cucumber tests. I need to add a line in the &#8216;env.rb&#8217; file to set up the Mongoid environment and ensure there are Pokemon in the collection.</p>

<figure class='code'><figcaption><span>project/tools/test/features/support/env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../populate/populater&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../../../../app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;../../mongoid.yml&#39;</span><span class="p">,</span> <span class="ss">:test</span>
</span><span class='line'>
</span><span class='line'><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">add_pokemon</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="no">Application</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can run Cucumber and see some jovial results: &#8216;(4 failed, 9 skipped, 10 passed).&#8217; I now have more steps passing than failing! The root cause of the failures is that there currently is no &#8220;search&#8221; page; let&#8217;s fix that:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want my search page to have a search bar just like my index page. If I want them to be identical, I want to only have to change that code once. When writing HAML, I can create a &#8216;layout.haml&#8217; file to act as a base page for my application and move all the text from &#8216;index.haml.&#8217; I&#8217;ll add a &#8216;=yield&#8217; statement where I want the information from &#8216;index.haml&#8217; and &#8216;search.haml&#8217; to be placed.</p>

<figure class='code'><figcaption><span>project/views/layout.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>      <span class="nt">%link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap.css&quot;</span>)
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://code.jquery.com/jquery.min.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://twitter.github.com/bootstrap/assets/js/bootstrap-typeahead.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nf">#search</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 10%;&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="nt">%form</span><span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;search&quot;</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-search&quot;</span><span class="p">}</span>
</span><span class='line'>              <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;input-large&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon&quot;</span><span class="p">,</span> <span class="s2">&quot;data-provide&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;typeahead&quot;</span><span class="p">,</span> <span class="s2">&quot;data-items&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;10&quot;</span><span class="p">,</span> <span class="s2">&quot;autocomplete&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;off&quot;</span><span class="p">,</span> <span class="ss">:autofocus</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:placeholder</span> <span class="o">=&gt;</span> <span class="s2">&quot;Find a Pokémon...&quot;</span><span class="p">,</span> <span class="s2">&quot;data-source&quot;</span> <span class="o">=&gt;</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>}
</span><span class='line'>              <span class="nt">%button</span><span class="p">{</span><span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-small&quot;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;margin-bottom: 10px; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>                  Search
</span><span class='line'>      <span class="p">=</span><span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Begin typing to search for your Pokemon!
</span></code></pre></td></tr></table></div></figure>


<p>At this point, I&#8217;ll create a &#8216;search.haml&#8217; file in the &#8216;views&#8217; directory, but leave it empty. Running Cucumber now, I get &#8216;(4 failed, 4 skipped, 15 passed).&#8217; Pretty close! All I fail now is actually seeing the desired information on the page. First I want to get access to the Pokemon searched for: I can do that by parsing the params passed to us in app.rb:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@pokemon</span> <span class="o">=</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:pokemon</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now on my search page:</p>

<figure class='code'><figcaption><span>project/views/search.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Search for another Pokemon.
</span><span class='line'><span class="nf">#search-results</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 20%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%img</span><span class="p">{</span><span class="ss">:src</span> <span class="o">=&gt;</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="s2">&quot;250px&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%br</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;#</span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">number</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nt">%br</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;Types: </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">first</span><span class="si">}#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="s1">&#39; &#39;</span> <span class="p">:</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I reference the class variable &#8220;@pokemon&#8221; and access its data. To output Ruby-formatted strings, I use an &#8220;=&#8221; sign. Running Cucumber, I now see &#8216;(2 failed, 21 passed).&#8217; 2 of my 4 tests are passing! A trivial amount of investigation reveals that I didn&#8217;t deal with the situation where the user types in garbage data. That can mostly be done in the HAML file, but I also want a way to get the bad text the user gave me so they can see what was wrong.</p>

<figure class='code'><figcaption><span>project/views/search.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Search for another Pokemon.
</span><span class='line'><span class="nf">#search-results</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 20%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">-</span> <span class="k">unless</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nt">%img</span><span class="p">{</span><span class="ss">:src</span> <span class="o">=&gt;</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="s2">&quot;250px&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;#</span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">number</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;Types: </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">first</span><span class="si">}#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="s1">&#39; &#39;</span> <span class="p">:</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="p">-</span> <span class="k">else</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;Lol! Could not find a Pokemon named &#39;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">.&#39; Try something else!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:pokemon</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@pokemon</span> <span class="o">=</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@name</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby code with no output is preceded with a &#8216;-&#8217; and because HAML is space-sensitive, there&#8217;s no need to include &#8216;end&#8217; statements. Now I run Cucumber and&#8230; 4 scenarios/23 steps passed! I have a functional web application! Of course, the page itself is somewhat bland, some of the styles could be put in a stylesheet and reused, and the only tests I&#8217;ve written are for super-high-level functionality. Those are all problems someone with infinite time would deal with, so I&#8217;ll just leave the page is is for now.</p>

<p>The next blog post <a href="http://larryprice.github.com/blog/categories/pokephile">in this series</a> will be about deploying this application to the web using Heroku.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from the MongoDB Ruby Driver to Mongoid]]></title>
    <link href="http://larryprice.github.com/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/"/>
    <updated>2013-01-05T20:04:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid</id>
    <content type="html"><![CDATA[<p>This is Part 2 in a multi-part series to detail the creation of a &#8220;simple&#8221; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.com/blog/categories/pokephile">Pokephile category</a>. Part 2 details refactoring code using the MongoDB Ruby driver to use Mongoid. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>.</p>

<h3>What I&#8217;ve Done</h3>

<p>In a <a href="http://larryprice.github.com/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">previous post</a>, I described creating a class that would populate a database with data scraped from the internet. I used the MongoDB Ruby driver to accomplish this. However, using the driver can be laborious and there are simpler ways. In this post, I&#8217;m going to refactor the Populater class to use Mongoid.</p>

<h3>Mongoid</h3>

<p><a href="http://http://mongoid.org/en/mongoid/index.html">Mongoid</a> (pronounced mann-goyd) is an Object-Document Wrapper for Ruby. Using mongoid abstracts some of the database operations that must be performed when using the MongoDB Ruby driver. It comes in handy when using models in an MVC application. To install the Mongoid gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install mongoid</span></code></pre></td></tr></table></div></figure>


<h3>Refactoring</h3>

<p>In populater.rb, we only inserted one structure of document into our &#8220;pokemons&#8221; collection. That makes this a great opportunity to use Mongoid. We remember that there were four fields in our document: number (string), name (string), image link (string), and types (array). Knowing this, we can create a model for this data:</p>

<figure class='code'><figcaption><span>project/pokemon.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pokemon</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:number</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:types</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:image</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for our model. Although we specified the types in this case, it&#8217;s not necessary if we want a looser definition of our model. Here&#8217;s how we change our implementation file:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#require &#39;mongo&#39; #deleted</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../pokemon&#39;</span> <span class="c1">#added</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="c1">#def initialize(db_name) #removed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="c1">#@col = Mongo::Connection.new.db(db_name)[&quot;pokemons&quot;] #deleted</span>
</span><span class='line'>      <span class="c1">#@col.remove #deleted</span>
</span><span class='line'>      <span class="no">Pokemon</span><span class="o">.</span><span class="n">delete_all</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="vi">@data</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num_to_add</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&quot;//table[@class=&#39;wikitable sortable&#39;]/tr&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>        <span class="k">break</span> <span class="k">if</span> <span class="n">num_to_add</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">dex_num</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">if</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">dex_name</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[2]/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">unless</span> <span class="n">dex_num</span> <span class="o">==</span> <span class="s2">&quot;000&quot;</span>
</span><span class='line'>            <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span> <span class="o">||</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;http://img.pokemondb.net/artwork/</span><span class="si">#{</span><span class="n">dex_name</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">.jpg&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;images/missingo.png&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">types</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_1</span> <span class="k">unless</span> <span class="n">type_1</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_1</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_2</span> <span class="k">unless</span> <span class="n">type_2</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_2</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#@col.insert({:number =&gt; dex_num, :name =&gt; dex_name, :types =&gt; types, :image =&gt; image_link}) #deleted</span>
</span><span class='line'>        <span class="no">Pokemon</span><span class="o">.</span><span class="n">create</span> <span class="p">{</span><span class="ss">:number</span> <span class="o">=&gt;</span> <span class="n">dex_num</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">dex_name</span><span class="p">,</span> <span class="ss">:types</span> <span class="o">=&gt;</span> <span class="n">types</span><span class="p">,</span> <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">image_link</span><span class="p">}</span> <span class="c1">#added</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">num_to_add</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That one&#8217;s easy. We deleted four lines and added 3. However, now you can see that the Populater does not have to deal with connecting to the database, it only has to know what model it wants to modify. So we&#8217;ve removed some complexity from this file by no longer requiring the database name on initialization. However, that means that someone else has to be in charge of setting up the initial connection. In the overlying project, we want that someone else to be a controller. In our tests, we want that someone else to be our test file. So let&#8217;s do it. We&#8217;re going to start by adding a config section in our before:all block.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'><span class="c1">#require &#39;mongo&#39; #removed</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span> <span class="c1">#added</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../pokemon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:all</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="n">config</span><span class="o">.</span><span class="n">connect_to</span> <span class="s1">&#39;test&#39;</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span> <span class="c1"># added</span>
</span><span class='line'>      <span class="c1">#@col = Mongo::Connection.new.db(&#39;test&#39;)[&quot;pokemons&quot;] # removed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In doing this, we&#8217;ve set up any of our document models to use the &#8216;test&#8217; database. Now we go through each test and replace the Mongo Ruby Driver syntax with Mongoid syntax, which is similar to Ruby&#8217;s Array syntax.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#@populater = Populater.new(&#39;test&#39;) #removed</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span> <span class="c1">#added</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="c1">#expect {Populater.new(&#39;test&#39;)}.to_not raise_error #removed</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes one param and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;empties pokemon collection&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="c1">#@col.insert({:test =&gt; &quot;hi there&quot;}) #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should_not eql 0 #removed</span>
</span><span class='line'>          <span class="c1">#Populater.new(&#39;test&#39;) #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 0 #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">create</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Populater</span><span class="o">.</span><span class="n">new</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8216;new&#8217; tests are straightforward. We remove the usage of an input parameter to the Populater initializer. The only significant change we make is to the &#8220;empties pokemon collection&#8221; test. Here we replace the Mongo Ruby Driver syntax of inserting into a collection with Mongoid syntax of creating a Pokemon document. The &#8216;create&#8217; method inserts a document into the collection with the given values, or defaults if none are given. We also see that we can remove the &#8220;find&#8221; syntax completely and just use a &#8220;count&#8221; method on the document type.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;adds 0 pokemon given 0&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">0</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 0 #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;adds pokemon with a number&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 1 #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.first[&#39;number&#39;].should_not be_nil #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;number&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests for adding 0, 1, and 2 documents to the collection are all very similar. The only change is to replace the Mongo Ruby Driver &#8220;find.count&#8221; syntax with the Mongoid &#8220;count.&#8221; The &#8220;adds pokemon with a ____&#8221; tests all undergo the same changes. I replace the &#8220;.find.first&#8221; statement with a simple &#8220;.first&#8221; to get the same meaning. So our Populater has been converted to use Mongoid instead of the Mongo Ruby Driver. Bully for us.</p>

<p>There&#8217;s one more change that would be nice to make before we hang up our hats. Configuring Mongoid using the .config syntax is okay, but it would be a lot nicer to keep all of our configuration in a file. We can create such a file called &#8220;mongoid.yml&#8221; and put some configuration information in it:</p>

<figure class='code'><figcaption><span>project/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax is valid in Mongoid 3.x. This is a very simply configuration for our test environment. Now we can go back into our test file and change the &#8216;before:all&#8217; block:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:all</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#Mongoid.configure do |config| #removed</span>
</span><span class='line'>      <span class="c1">#  config.connect_to &#39;test&#39; #removed</span>
</span><span class='line'>      <span class="c1">#end # removed</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;../../../mongoid.yml&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span> <span class="c1">#added</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second parameter can be a string or a symbol. Now there&#8217;s only one file to modify the environment configurations, and we&#8217;re better off for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schemaless databases with Ruby and MongoDB]]></title>
    <link href="http://larryprice.github.com/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/"/>
    <updated>2013-01-05T16:54:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb</id>
    <content type="html"><![CDATA[<p>This is Part 1 in a multi-part series to detail the creation of a &#8220;simple&#8221; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.com/blog/categories/pokephile">Pokephile category</a>. Part 1 details getting started with MongoDB and creating a collection using data scraped off the web using <a href="http://nokogiri.org/">Nokogiri</a>. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>.</p>

<h3>A little background</h3>

<p>NoSQL is a database service used when working with a large amount of data that doesn&#8217;t fit a relational model (read: <a href="http://en.wikipedia.org/wiki/Nosql">wikipedia</a>). It allows for mass storage without the overhead of SQL relations. There are many types of schemaless database services (<a href="http://en.wikipedia.org/wiki/Nosql#Taxonomy">here&#8217;s a list</a>), but in particular I&#8217;ve been looking into what&#8217;s called &#8220;Document Store.&#8221;</p>

<p>Documents can be any number of key-value fields with a unique id. Document Store services usually encode data in a simple format such as XML, YAML, JSON, or BSON for storage purposes. MongoDB is a document store service which uses BSON to store documents. In Mongo, we connect to a specific database and then we can look through &#8220;collections,&#8221; which are more-or-less equivalent to &#8220;tables&#8221; in relational databases.</p>

<h3>What about MongoDB and the Ruby driver?</h3>

<p>The first step is to get MongoDB working on your machine. Install MongoDB for your system &#8211; on Ubuntu 12.10 I do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mongodb mongodb-dev mongodb-clients mongodb-server</span></code></pre></td></tr></table></div></figure>


<p>Then we start up the daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service mongodb start</span></code></pre></td></tr></table></div></figure>


<h3>What&#8217;s the concept?</h3>

<p>The concept here is that we are going to have a database populated with <a href="http://www.pokemon.com/">Pokemon</a>. The user types a Pokemon&#8217;s name into a search field and submits the form, which brings up an image of the Pokemon and some useful information.</p>

<h3>Getting started</h3>

<p>Since I would like to focus on MongoDB, we can start by populating our database with Pokemon. If you&#8217;re not familiar with Pokemon, there are lots of them (~650 at the date of this blog post). For my purposes, I may want to only add the first ~150 Pokemon, or I may want to add every Pokemon imaginable. I want it to be easy to add more if any new ones are added. So I&#8217;m going to start this project by creating a Populater, and we&#8217;re going to use TDD to help us create it.</p>

<p>If you don&#8217;t have RSpec installed, it&#8217;s as easy as opening up a shell and:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install rspec mongo</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m going to put the Populater in a tools directory, and I&#8217;m going to put my spec files in a test/spec directory. The directory structure I want to use is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project
</span><span class='line'>--tools
</span><span class='line'>----populate
</span><span class='line'>----test
</span><span class='line'>------spec</span></code></pre></td></tr></table></div></figure>


<p>In the &#8216;tools/test/spec&#8217; directory, I create &#8216;populater_spec.rb.&#8217; We&#8217;ll write our first test:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax for RSpec is mostly pseudo-English, so it&#8217;s fairly straightforward to follow. The first &#8216;describe&#8217; block says that we are describing the Populater class. The second &#8216;describe&#8217; block says that we are describing the &#8216;new&#8217; method of the &#8216;Populater&#8217; class. The inner-most block is our test. We want to make sure that no exception is thrown when we create a new Populater. To run this test, open a terminal and type:</p>

<figure class='code'><figcaption><span>Running Rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>~/project/tools/test
</span><span class='line'><span class="nv">$ </span>rspec populater_spec.rb
</span></code></pre></td></tr></table></div></figure>


<p>We get a big fat compile error, obviously due to the fact that there&#8217;s no such thing as a &#8216;Populater&#8217; class. So create the file &#8216;populater.rb&#8217; in &#8216;project/tools/populate&#8217; and create the class:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And include the &#8216;Populater&#8217; class in our spec file:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run rspec. Hooray, we&#8217;re passing all our tests! Let&#8217;s add another test and some let&#8217;s have RSpec do a little work before each test.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes no params and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &#8216;before:each&#8217; syntax tells RSpec to perform this action before running each test. This way, we don&#8217;t have to type out &#8216;Populater.new&#8217; in each test. When we run RSpec, this test passes. Now let&#8217;s actually do something meaningful in our new call. We want the Populater to empty all Pokemon from our database as it begins. In order to do this, we need to also tell the Populater what database to use, so we&#8217;ll refactor slightly to pass in the name of our database to the Populater.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:all</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">before</span><span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes one param and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;empties pokemon collection&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">:test</span> <span class="o">=&gt;</span> <span class="s2">&quot;hi there&quot;</span><span class="p">})</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should_not</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>          <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to the &#8216;before:each&#8217; syntax, the &#8216;before:all&#8217; syntax runs the statement once. Here we want to get a handle to the &#8216;pokemons&#8217; collection from our &#8216;test&#8217; database. In our test, we run a &#8216;find&#8217; with no arguments on the &#8216;pokemons&#8217; collection to query everything in that collection. We also have an &#8216;insert&#8217; statement where we insert an arbitrary document into our collection. You&#8217;ll note later that this garbage document looks nothing like the Pokemon documents we insert, which is just another reason to love document-store databases. We run RSpec and we fail the test. Let&#8217;s open up &#8216;populater.rb&#8217; and fix this.</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">remove</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test fixed. We connect to the same database and access the same collection and remove all the old data on intialize. So now we actually want to add Pokemon to the collection. We&#8217;ll pick up a new &#8216;describe&#8217; block for an &#8216;add_pokemon&#8217; method. We&#8217;ll then test that calling it with 0 adds no Pokemon to the collection.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 0 pokemon given 0&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run our tests, we get a NoMethodError and fail. We create a trivial fix in populater.rb</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we pass the test, having added 0 Pokemon to our database. Let&#8217;s do it with 1 now.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 1 pokemon given 1&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We fail. Another trivial fix:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">num</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="n">number</span><span class="p">:</span> <span class="n">x</span><span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We pass again. We&#8217;ll also pass when checking for multiple Pokemon:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 2 pokemon given 2&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">2</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we&#8217;re missing substance. There&#8217;s only garbage being shoved in our database. Our TDD methodology breaks down slightly here because we want our database to have dynamic information scraped from a website, and I don&#8217;t want to hard code any data nor do I want to scrape the same website in my tests and my implementation. So we&#8217;re going to do a little bit of behind-the-scenes stuff and test that the fields we want are simply not nil. I want each Pokemon to have a number, name, an array of types, and a link to an image:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with a number&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;number&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with a name&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with array of types&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">types</span> <span class="o">=</span> <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;types&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="nb">Array</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_least</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_most</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with image link&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">image</span> <span class="o">=</span> <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">image</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">image</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_empty</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many websites where you can get this kind of data for each Pokemon, but I chose <a href="http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon">the Pokemon Wiki</a> for its consistency. In the initializer of the Populater, I open up the URL using Nokogiri so I can access the sweet, creamy data contained within. In my add_pokemon method, I extract this data I want based on the way the table is set up on the website. To continue, we need to install the Nokogiri gem:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">nokogiri</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we add the logic to add_pokemon:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">remove</span>
</span><span class='line'>      <span class="vi">@data</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num_to_add</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@data</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&quot;//table[@class=&#39;wikitable sortable&#39;]/tr&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>          <span class="k">break</span> <span class="k">if</span> <span class="n">num_to_add</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">dex_num</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>          <span class="k">next</span> <span class="k">if</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">dex_name</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[2]/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">unless</span> <span class="n">dex_num</span> <span class="o">==</span> <span class="s2">&quot;000&quot;</span>
</span><span class='line'>              <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span> <span class="o">||</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;http://img.pokemondb.net/artwork/</span><span class="si">#{</span><span class="n">dex_name</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">.jpg&quot;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;images/missingo.png&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">types</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>          <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_1</span> <span class="k">unless</span> <span class="n">type_1</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_1</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_2</span> <span class="k">unless</span> <span class="n">type_2</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_2</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">:number</span> <span class="o">=&gt;</span> <span class="n">dex_num</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">dex_name</span><span class="p">,</span> <span class="ss">:types</span> <span class="o">=&gt;</span> <span class="n">types</span><span class="p">,</span> <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">image_link</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">num_to_add</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll admit The add_pokemon method is now quite a bit more daunting to interpret. Here&#8217;s the breakdown of what&#8217;s going on: Nokogiri finds us the table tag with class of &#8216;wikitable sortable&#8217; and we iterate over that. There are two breaking conditions of our loop: we hit the max number of Pokemon as given, or we can&#8217;t find anymore Pokemon in the table. So we check that we haven&#8217;t hit our max. Then we find the Pokemon&#8217;s number in the table after we manually parse the HTML. In the case of this table, the first row is all garbage, so we continue to the next row if we are on the first row.  We then grab the name from the table, which is luckily always in the same place. The branch is for the special case of Pokemon #000 (Missingo), which is set up slightly differently in the table for some reason. We create an empty array and shove our types in it, but we have to be careful because not all Pokemon have two types. We then create a document in the braces and insert it into the collection. The final step is to decrement the loop counter.</p>

<p>Tests pass. We now have a working Populater! Now we can either write a script or open up the irb and populate as necessary and we know that the Populater is functional:</p>

<figure class='code'><figcaption><span>Populating Databases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;project/tools/populate&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;./populater&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">152</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="mi">152</span>
</span><span class='line'><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to further familiarize yourself with the MongoDB Ruby driver, you should check out the MongoDB Koans. Unfortunately, the original <a href="https://github.com/tredfern/MongoDB_Koans">MongoDB Koans</a> have not been updated in a while, and so my more recent installations of Ruby and the MongoDB driver didn&#8217;t work. I found a set of <a href="https://github.com/edgecase/ruby_koans">updated koans</a> which worked with my install of Ruby 1.9.3. However, the updated version also had a couple of annoying issues with deprecations, so I created <a href="https://github.com/larryprice/MongoDB_Koans">my own fork</a> on GitHub with the fixes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Moved My Cheese?: An Amazing Way to Deal with Change in Your Work and in Your Life]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/27/who-moved-my-cheese-an-amazing-way-to-deal-with-change-in-your-work-and-in-your-life/"/>
    <updated>2012-11-27T20:47:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/27/who-moved-my-cheese-an-amazing-way-to-deal-with-change-in-your-work-and-in-your-life</id>
    <content type="html"><![CDATA[<p><img src="http://dontstepinthepoop.com/wp-content/uploads/2010/01/cheese.jpg" style="border: 0" width="130px" title="Who Moved My Cheese?" alt="Cover for Who Moved My Cheese?" /><br/>
<a href="http://www.amazon.com/Who-Moved-My-Cheese-Amazing/dp/0399144463/"><strong>Who Moved My Cheese?: An Amazing Way to Deal with Change in Your Work and in Your Life</strong></a><br/>
<strong>Spencer Johnson</strong></p>

<hr />

<h3>The Gist</h3>

<p><em>Who Moved My Cheese?</em> is a book about being prepared to lose your job. The book was written during times of rapid economic growth caused by the <a href="http://en.wikipedia.org/wiki/Dot-com_boom">dot-com bubble</a>, which resulted in many companies emerging out of the primordial ooze and then falling back down into the tarpit after an extremely short time on the market. The author uses a cute analogy about cheese to convey that success is fleeting, and each day could be the day a company will shut down.</p>

<h3>My Feelings</h3>

<p>This is another book I read during summer 2012 and wrote a mediocre write-up regarding. This write-up is fresh and in my new write-up style.</p>

<p>The authors of this book want to help people realize that their job is a gift, not a privilage. Just because a company is doing well this quarter does not imply that it will still be in business next quarter. During the time period this book was written in, this was especially true. The theory of companies during the late &#8217;90s was to spend as much money as possible to gather as many customers as possible disregarding profits in the short-term (read: <a href="http://www.paulgraham.com/start.html">Get Large or Get Lost</a>). Of course, this kind of mentality did not fit all businesses, and many companies which looked like they would be the future leaders of the American economy were quickly forgotten by the mid-2000s (see: <a href="http://en.wikipedia.org/wiki/Pets.com">Pets.com</a>).</p>

<p>The authors want employees to stop fearing change, and to accept it as a normal part of life. Sometimes companies falter, and oftentimes there&#8217;s nothing an individual can do about it. In doing so, sometimes old friends are left behind while an individual moves on in search of bigger and better things. Sometimes it takes a long time to find those bigger and better things, but every time it&#8217;s worth it due to the thrill of confronting your fears and exploring something new.</p>

<p>The use of a &#8220;maze&#8221; with two tiny people and two anthropomorphic mice is strange and feels purposefully forced. The authors wanted to make a memorable anecdote, and they succeeded with their strange analogy. Having said that, several times I was confused by the names of the four characters as they were very similar and nonsensical. Because of this, I had to reread some sections after referencing the first page of the book to determine who was who.</p>

<p>The primary author appended &#8220;MD&#8221; to his name on the front cover. Similarly, the &#8220;secondary&#8221; author appended a &#8220;PhD&#8221; to his name on the front cover. This bothered me as it is an obvious ploy to make people value the opinions held within the book more highly because they are written by &#8220;doctors.&#8221;</p>

<h3>Who Would Like This</h3>

<p>This is a book that tries to prepare people for the worst and to teach them not to just give up when the future looks grim. It could be an interesting book for anyone, especially after several years of an economic boom caused by a new technology. A person who is very content in their current position at a company could also benefit from this book, as it may give them some incentive to seek out change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passionate Programmer: Creating a Remarkable Career in Software Development]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/26/the-passionate-programmer-creating-a-remarkable-career-in-software-development/"/>
    <updated>2012-11-26T22:20:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/26/the-passionate-programmer-creating-a-remarkable-career-in-software-development</id>
    <content type="html"><![CDATA[<p><img src="http://www.inquisitivechap.com/wp-content/uploads/2010/11/ThePassionateProgrammerCover.png" style="border: 0" width="130px" title="The Passionate Programmer: Creating a Remarkable Career in Software Development" alt="Cover for The Passionate Programmer" /><br/>
<a href="http://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic/dp/1934356344/"><strong>The Passionate Programmer: Creating a Remarkable Career in Software Development</strong></a><br/>
<strong>Chad Fowler</strong></p>

<hr />

<h3>The Gist</h3>

<p>This book tells the story of Chad Fowler (no relation to <a href="http://martinfowler.com/">Martin Fowler</a>). Fowler got himself into a software development slump and was able to turn it around and rejuvinate his passion for his career. Much of the book revolves around how to keep oneself engaged with one&#8217;s work and how to determine when it&#8217;s time to shake things up.</p>

<h3>My Feelings</h3>

<p>I read this book in Summer 2012 and did a mediocre write-up on my old blog, so I&#8217;ve decided to quickly redo the write-up from scratch using my new format.</p>

<p>What Fowler talks about in his book is exactly what I was afraid of when looking for a job last fall: getting stuck. It&#8217;s easy to do: many employers are looking for employees who are willing to work on projects throughout their entire lifespan, which may be 12 months, 5 years or in some cases the lifespan of the company.</p>

<p>Personal story time. I was offered a job at an Indianapolis company with many long-term projects. One of my interviewers had been working on his current project for 5 years, and was trying desparately to get out of it. However, based on his seniority and domain knowledge of the project, he was told it would be at least another 6 months before he could move on. The developer was miserable working his current job and had no exit routes available to him, which scared me quite a bit.</p>

<p>Fowler&#8217;s methods don&#8217;t describe how to avoid this situation. They describe how to keep yourself happy by learning new technology and branching away from your &#8220;domain knowledge&#8221; while still remaining the go-to guy on your current project. Showing an interest in doing things outside of your current project should show an employer that you&#8217;re capable of more, and that you&#8217;re more than willing to do something new.</p>

<p>Fowler also talks about moving jobs if you&#8217;re unhappy, noting that the new world of software development doesn&#8217;t offer all the bells and whistles that it used to. Although I agree that you should try to find a new job if you&#8217;re unhappy, it&#8217;s not always as easy to pack up your things and move as the author makes it seem.</p>

<p>The coolest parts of the book were the personal stories of several high-tech big-wigs. The silliest parts were the &#8216;Act On It&#8217; sections. The &#8216;Act On It&#8217; sections described how to implement some of the methods detailed in the book, but they often seemed obvious and unnecessary to me.</p>

<h3>Who Would Like This</h3>

<p>This book can offer a lot to someone who wants to revitalize their career after getting in a rut. It may also be able to serve as a guide to preventing yourself from getting in a rut. As a recent college grad with many of my dreams still alive, I only found a moderate amount of honey in this beehive. An interesting read, but maybe not entirely relevant to fresh faces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Linux Works: What Every Superuser Should Know]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/26/how-linux-works-what-every-superuser-should-know/"/>
    <updated>2012-11-26T21:27:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/26/how-linux-works-what-every-superuser-should-know</id>
    <content type="html"><![CDATA[<p><img src="http://books.gigaimg.com/avaxhome/77/6b/000c6b77_medium.jpeg" style="border: 0" width="130px" title="How Linux Works" alt="Cover for How Linux Works" /><br/>
<a href="http://www.amazon.com/How-Linux-Works-Superuser-Should/dp/1593270356/"><strong>How Linux Works: Things Every Superuser Should Know</strong></a><br/>
<strong>Brian Ward</strong></p>

<hr />

<h3>The Gist</h3>

<p>Linux is a complicated operating system which gives its users the freedom to do anything. This book details things that any Linux superuser should be aware of, including printing, networking, scripting, compiling source code, setting up users, and buying hardware.</p>

<h3>My Feelings</h3>

<p>I&#8217;ve been running <a href="http://ubuntu.com/">Ubuntu</a> as the only operating system on my home computer since the 11.04 Natty Narwhal release in 2011, and I&#8217;ve been using Ubuntu in varying degrees since 9.04 Lucid Lynx. I&#8217;ve also recently ported my wife&#8217;s computer over to Ubuntu after she finally got fed up with Linux. There is a course at Purdue called ECE364 that taught us lots of cool Linux commands which I had forgotten, so I&#8217;ve been looking for a good refresher. This book helped jog my memory of things like grep, sed, and awk. The book also provided lots of information on things that I&#8217;d been using for years without really realizing what I was doing.</p>

<p>This book was written in 2004, which was a long time ago in the computing world. In 2004, Ubuntu Linux (<a href="http://www.pcworld.com/article/254516/which_linux_distro_is_fairest_of_them_all_ubuntu_survey_says.html">the most popular personal desktop Linux distribution</a>) was released. Ward makes mentions of setting up network interfaces, firewalls, and printers through the terminal, which are all things that now are either done automatically by most operating systems or at a minimum have a GUI to support setup. Ward also mentions that <a href="http://en.wikipedia.org/wiki/Cathode_ray_tube">CRT monitors</a> are on the cheap, but if you want the best resolution an <a href="http://en.wikipedia.org/wiki/Lcd">LCD monitor</a> is the new cool thang. He talks about <a href="http://en.wikipedia.org/wiki/Pentium">Pentium processors</a>, half gigabytes of DDR, and slow, heavy laptops. Be warned that you won&#8217;t find anything in this book about 64-bit processors, SSDs, or cloud computing.</p>

<p>Most of the book is still very relevant. As mentioned previously, I got a lot of benefit from reading the section on common commands. The section on setting up dot-files was also extremely useful for me. There was also a lot of interesting information about the Linux filesystem being databases that I had never really thought about before.</p>

<h3>Who Would Like This</h3>

<p>Those new to Linux or those needing a refresher would benefit from scanning this book, at least the interesting sections. This book is not for people looking for bleeding-edge information on their new hardware or software. The reader can get a large amount of information that has aged well and will continue to be relevant for Linux users for years to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Optimistic Programmer]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/08/the-optimistic-programmer/"/>
    <updated>2012-11-08T19:06:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/08/the-optimistic-programmer</id>
    <content type="html"><![CDATA[<p>Meet Anne. Anne&#8217;s a programmer in a thriving tech company. Anne goes into work every day to work on a shiny new product for her company.</p>

<p>Anne&#8217;s customer knows exactly what they want. Anne writes all of her tests using pure TDD. Anne updates her tasks on the company&#8217;s ALM software, which was defined with programmers in mind and not just managers. She knows everything about her domain, and every UI element she touches is the epitome of good user experience. She works with 100 other programmers, each of which is equally as skilled as she is. Every time she pushes her most recent file changes, there are no merge conflicts and the build server works without a hitch. The deadline for the project is defined as whenever the last feature is finished. The best part: Anne spends fewer than an hour a week in meetings, none of which is a complete waste of time.</p>

<p>You&#8217;ve got to be kidding me.</p>

<p>If I experienced a day like I just described for Anne, I would have to assume I had been killed in a tragic car accident on my way into work.</p>

<p>How can a programmer possibly be optimistic? Let me say: The client never knows what they want. The programmer couldn&#8217;t possibly write all of their tests TDD style unless they&#8217;re a saint. ALM software has a tendency to suck. Programmers don&#8217;t have the inherent ability to know precisely how a user will try to use the product. Oftentimes your teammates may not be on the same level as you are, or you may not be on as high a level as they are. There are always merge conflicts and build server anomalies. &#8216;Random&#8217; is generally an apt description of project deadlines. Lastly, we spend lots of times in meetings which often don&#8217;t appear to provide much face value. Those are the facts of life.</p>

<p>If we&#8217;re optimists, why would we bother writing tests for anything beyond happy-path? How could we ever justify refactoring if we&#8217;re optimistic that we did it right the first time? Why bother putting in security if no one will ever try to use their 1337 hax to get to the client&#8217;s data? It&#8217;s important that we stay planted firmly in reality to ensure we think of most everything that can go wrong when a customer uses a product.</p>

<p>I&#8217;m not saying there aren&#8217;t optimistic moments in a programmer&#8217;s life. Phrases like &#8220;I&#8217;m optimistic the project will end some day&#8221; and &#8220;I&#8217;m pretty sure the customer will like this&#8221; and &#8220;I highly doubt we&#8217;ll get sued for that&#8221; are phrases that I&#8217;d feel inclined to throw around most any time to raise the morale of my companions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Idea, Bad Idea]]></title>
    <link href="http://larryprice.github.com/blog/2012/10/30/good-idea-bad-idea/"/>
    <updated>2012-10-30T21:37:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2012/10/30/good-idea-bad-idea</id>
    <content type="html"><![CDATA[<p>There is a general, unnamed rule when coming up with ideas:</p>

<p><strong><em>A person is required to have one or more bad ideas before having a single good idea</em></strong>.</p>

<p>Since this rule is unnamed, it shall henceforth be referred to as Larry&#8217;s Law.</p>

<p>Note that the thinker in question is not limited to just one bad idea under Larry&#8217;s Law, but as many as he so desires. Also note that Larry&#8217;s Law does not imply that the thinker will necessarily ever have any good ideas.</p>

<p>Having bad ideas is necessary. Bad ideas let the brain see what it shouldn&#8217;t be thinking about, which has the potential to lead to good ideas. Then again, many bad ideas may just spawn more bad ideas. That&#8217;s just Larry&#8217;s Law.</p>

<h3>Examples</h3>

<p>You sit down at your desk and pick up a bug. Your first idea doesn&#8217;t fix the code. Your second idea doesn&#8217;t compile. Your third idea breaks all 3400 unit tests in the test suite. Your fourth idea is a complete hack. Your fifth idea breaks some other component of the application. Your sixth idea seems genius to you but doesn&#8217;t survive the code review. Your seventh idea is a winner.</p>

<p>Before Edison could invent the <a href="http://edison.rutgers.edu/ticker.htm">Universal Stock Ticker</a>, he had to invent a <a href="http://edison.rutgers.edu/vote.htm">crummy vote recorder</a>.</p>

<p>Do you have any idea the number of albums Pink Floyd released before <a href="http://en.wikipedia.org/wiki/The_Dark_Side_of_the_Moon"><em>The Dark Side of the Moon</em></a>? <a href="http://en.wikipedia.org/wiki/Pink_Floyd_discography">Seven</a>. Don&#8217;t kid yourself: these seven albums were not gems. But don&#8217;t fret! Larry&#8217;s Law states that these albums had to be low quality to allow <em>The Dark Side of the Moon</em> to be a monumental album.</p>

<p>Someone invented <a href="http://en.wikipedia.org/wiki/New_coke">New Coke</a>. This is an instance of someone making a bad decision without any corresponding good decisions.</p>

<p>Domino&#8217;s pizza was <a href="http://www.nowpublic.com/culture/pizza-turnaround-dominos-pizza-knows-they-suck-2555951.html">terrible</a> until very recently. Now it&#8217;s delicious, at least according to <a href="http://answers.yahoo.com/question/index?qid=20110609112806AABnOTo">this man on Yahoo! Answers</a>.</p>

<p>A group of people wants to go out to eat. Jon Doe will suggest Jimmy John&#8217;s, then Penn Station, McDonald&#8217;s, Five Guys, Taco Bell, and Denny&#8217;s. Finally Jon Doe offers a reasonable idea, like YATS. This process will now be repeated by every person in the group, and the best decision will never become visible. And Larry&#8217;s Law specifies that the group may never come to a good decision, and will probably end up eating at Five Guys.</p>

<h3>Conclusion</h3>

<p>The next time you have a bad idea, embrace it. Realize that having that bad idea might clear space in your head for a good idea. Or possibly an infinite number of bad ideas. Either way, that&#8217;s just Larry&#8217;s Law.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Don't Have Time]]></title>
    <link href="http://larryprice.github.com/blog/2012/10/24/i-dont-have-time/"/>
    <updated>2012-10-24T22:35:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2012/10/24/i-dont-have-time</id>
    <content type="html"><![CDATA[<p>&#8220;Wanna go for a walk?&#8221; my wife asks over my shoulder.</p>

<p>&#8220;I don&#8217;t have time for your walks, woman! I&#8217;ve got a city to run!&#8221; I exclaim as I frantically move the mouse around the screen to raise taxes on the rich so I can afford to build another statue of myself in the blossoming city of Velcro. I&#8217;d been absolutely engulfed in the popular city simulator <a href="http://en.wikipedia.org/wiki/Simcity_4"><em>SimCity 4</em></a> for about five hours already that day. Needless to say, my wife &#8220;convinced&#8221; me to hit the pause button on the game and join her back in reality, where I&#8217;m a software developer who has to go on walks to counter his poor eating habits.</p>

<p>We take time too seriously.</p>

<p>When we feel like we don&#8217;t have enough time, we complain. When we feel like we have too much time, we think we&#8217;re bored, and so we complain about that.</p>

<p>Maybe if we spent less time complaining, we&#8217;d have time to see how ridiculous we are.</p>

<p>Time is time. What&#8217;s there is there, and we&#8217;re not getting any more or less of it based on what we get accomplished in a given day.</p>

<p>&#8230;Unless of course what you accomplish is manipulating time in some manner. Or you create a serum to slow/expediate/stop the aging process. But those are side projects to talk about in another blog post on another day.</p>

<p>Back to <em>SimCity 4</em>. After I rediscovered the dusty game disc at my parents&#8217; house, the game completely absorbed me, even 10 years after it was originally released (my computer is finally powerful enough to play it). I didn&#8217;t mind that it was taking up so much of my time. I had a myriad of more conventional things I wanted to do that weekend: side projects to work on, books to read, TV shows to watch, internets to check, housework to do, groceries to buy, and meals to cook; but none of that mattered.</p>

<p>I repeat: none of that important-sounding stuff mattered. I had stumbled upon this completely arbitrary childhood memory to relive, so everything else took a back seat. I don&#8217;t regret all the hours I ended up spending on that game, as a kid or as an adult. A compulsive opportunity arose to have some fun and I snatched it up. I stopped worrying about time and decided to just enjoy myself. You should try it sometime. We spend way too much of our time trying to abide by our schedules and to-do lists. The best parts of life are when you stumble upon something that makes you completely forget what you were doing before you found it, and then continues to obliterate any plans you might have had for the rest of the day.</p>

<p>Now if you&#8217;ll excuse me, I have a city to run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Hacky Solution to the Unicode data in a Unicode-only collation problem]]></title>
    <link href="http://larryprice.github.com/blog/2012/10/19/a-hacky-solution-to-the-unicode-data-in-a-unicode-only-collation-problem/"/>
    <updated>2012-10-19T17:23:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2012/10/19/a-hacky-solution-to-the-unicode-data-in-a-unicode-only-collation-problem</id>
    <content type="html"><![CDATA[<h2>The Issue Rises <a id="problem"></a></h2>

<p>Earlier this week a defect was found in my application. A defect that I could have sworn I fixed several weeks ago and written about in a <a href="http://nullablevoid.blogspot.com/2012/10/unicode-data-in-unicode-only-collation.html">previous blog post</a>. Let me start from the beginning:</p>

<h4>The Setup</h4>

<p>The application is a web app using Rails 3.2, MSSQL Server for the database, and Tiny-TDS for database communications from the CloudFoundry server. There are three different types of builds and three databases I access: development (for development, obviously), staging (for testing), and production (for the users to complain about, mostly).</p>

<h4>The Original Issue</h4>

<p>I inherited this code and ran it on my dev build with no issues. Upon doing some testing with the staging build, the page crashed. The logs revealed the following (horrible) error:</p>

<figure class='code'><figcaption><span>Vague error</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Unicode</span> <span class="n">data</span> <span class="k">in</span> <span class="n">a</span> <span class="no">Unicode</span><span class="o">-</span><span class="n">only</span> <span class="n">collation</span> <span class="ow">or</span> <span class="n">ntext</span> <span class="n">data</span> <span class="n">cannot</span> <span class="n">be</span> <span class="n">sent</span> <span class="n">to</span> <span class="n">clients</span> <span class="n">using</span> <span class="no">DB</span><span class="o">-</span><span class="no">Library</span> <span class="p">(</span><span class="n">such</span> <span class="n">as</span> <span class="no">ISQL</span><span class="p">)</span> <span class="ow">or</span> <span class="no">ODBC</span> <span class="n">version</span> <span class="mi">3</span><span class="o">.</span><span class="mi">7</span> <span class="ow">or</span> <span class="n">earlier</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does this mean? Well. Beats me. <a href="http://dirk.net/2010/09/18/sql-server-with-freetds-unicode-data-error/">Several</a> <a href="http://stackoverflow.com/questions/5414890/mssql-query-issue-in-php-and-querying-text-data">sources</a> had <a href="http://stackoverflow.com/questions/8705008/tiny-tds-error-on-heroku-connecting-to-sqlserver-db">similar</a> <a href="http://findyourscript.com/index.php/2011/05/20/unicode-data-in-a-unicode-only-collation-or-ntext-data-cannot-be-sent-to-clients-using-db-library/">issues</a> and the ones I liked eventually came to the conclusion that ntext and nvarchar variables in the database were ticking off the host server. <a href="http://msdn.microsoft.com/en-us/library/ms186939.aspx">Apparently</a>, text variables are translated to nvarchar(MAX), where MAX is something like 2GB of data. I hunted through my database and, sure enough, the &#8216;Narrative&#8217; column was an nvarchar(MAX).</p>

<h4>The Original Fix</h4>

<p>Based on the mighty power of the internet, I decided that the best thing for me to do was to change the variable in the database from a &#8220;text&#8221; to a &#8220;string&#8221; with a limit of 8000 (which translates to varchar(8000)) using this migration:</p>

<figure class='code'><figcaption><span>Simple migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ChangeNarrativeColumnToVarChar</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">change_column</span> <span class="ss">:evaluation</span><span class="p">,</span> <span class="ss">:narrative</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">8000</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I ran through my repro steps and&#8230; Drumroll&#8230; Suspense&#8230; It worked! Or so it appeared. I went to the narrative textbox and put some words in it, saved, and confirmed that everything was great. Then I pushed it to production and heard nothing for two weeks.</p>

<h2>Failure Is Always An Option <a id="failure"></a></h2>

<p>Too bad that wasn&#8217;t the end of the story. This week my users finally started using the app again. They found all kinds of defects, of course, but one in particular that caught me off guard: When viewing the narrative text, which we had &#8220;fixed&#8221; using that little migration above, the text cut off to about two lines. Two lines? I never really bothered to test more than a couple words or a short, goofy phrase. So I opened up the app on my dev build and it worked great with up to 8000 characters. I switched over to the staging build and was able to reproduce the error immediately.</p>

<p>At first I thought it was just the test_area, but I was wrong. Even static fields which displayed narrative cut off text. After some testing, the text was always cut off to 255 characters. I watched the SQL logs and confirmed that all 8000 characters would come back from the SQL queries. I looked in the database and verified the data was still present. What was going on?</p>

<h4>Dear Rails: Oh, you</h4>

<p>I thought and eventually realized something: the default of a &#8220;string&#8221; in Rails is 255 characters. Rails was cutting off my text. Curse you, Rails, I trusted you with my heart!</p>

<h4>The Fix</h4>

<p>Alright. The fix. Unfortunately, the fix sucks. In my app, I had to get the whole model that contained a narrative. Doing only that, the narrative would be cut short. So then I had to get the narrative again, and this time cast that sucker to a &#8220;text.&#8221;</p>

<figure class='code'><figcaption><span>< 1337 Hax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@eval</span> <span class="o">=</span> <span class="no">Evaluation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="vi">@eval</span><span class="o">.</span><span class="n">narrative</span> <span class="o">=</span> <span class="no">Evaluation</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s2">&quot;id as id, CAST(narrative as text) as narrative&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">narrative</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a part of me that likes sensible, clean code. This code did not come from that part of me. If you really want, you can do a select and get all the columns of your model, and then case the field in question, but what if your columns change? I didn&#8217;t want to be responsible for that, especially after I hand this code off to someone else in the coming weeks.</p>
]]></content>
  </entry>
  
</feed>
