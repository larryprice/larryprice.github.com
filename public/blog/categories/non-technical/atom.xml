<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: non-technical | Larry Price]]></title>
  <link href="http://larryprice.github.com/blog/categories/non-technical/atom.xml" rel="self"/>
  <link href="http://larryprice.github.com/"/>
  <updated>2013-03-26T20:57:31-04:00</updated>
  <id>http://larryprice.github.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blog Battle: Pvreryvre of fyne coddes]]></title>
    <link href="http://larryprice.github.com/blog/2013/03/25/pvreryvre-of-fyne-coddes/"/>
    <updated>2013-03-25T22:09:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2013/03/25/pvreryvre-of-fyne-coddes</id>
    <content type="html"><![CDATA[<p>Ice pellets bounced off my head as I walked myself home late one night. The air was dreadfully cold, so I swooped into one of Carmel's seedy side alleys to take a shotcut. Out of the shadows crept a man wearing a long trenchcoat and thick-rimmed glasses. Hunched over, he brushed his unkempt hair out of his eyes. His coffee-stained breath rushed from beneath his pencil moustache as he asked, "Can I interest you in any of these fine iPhone apps?" I tried to cautiously back away. "How would you like a real BaZynga game, only ninety-nine cents, it's called Perturbed Birds with Pals?" I was briefly distracted by sirens in the distance; by the time I returned my glance to the man's last position he had disappeared, my virtual wallet was empty, and my phone was filled with bloatware and repetitive 'Ville-style games.</p>

<p>There are more KLOCs in this world than there have been McDonald's hamburgers sold. How do the good programmers differentiate themselves from the common street peddlers? How do companies convince you to pay $2.99 for their app when a clone is released less than a week later for free?</p>

<p>The answer? Maybe they don't. Maybe a comparison can be made between software companies and pharamceutical companies.</p>

<p>Big Pharmaceutical companies spend many years researching, developing, and testing drugs to treat the common cold, arthritis, bad cholesterol, or even to sedate your energetic children. These drugs spend several years on the market where patents on the drug are valid, meaning that only the company that invented the drug can legally sell it. After the patent protections expire (approx 7-12 years), any big, small, or mom &amp; pop drug manufacturer is legally allowed to "clone" this drug and make what's called a "generic." Generics are sold at a fraction of the cost of the original drug. At this point, no one wants to give Big Pharma $20 for 6 tablets to cure their heartburn when they could pay $5 for a year's supply of generics.</p>

<p>Software companies tend to spend somewhere between 12 weeks and 12 months developing apps that will be consumed by the general population. If the company just released an Android or iOS app, then the product will stay relevant somewhere between 2 weeks and 2 years. After that time, the app will either no longer have market value or will need to be revamped to please the modern consumer. Within a short number of days or weeks, there is a high probability that surly software pirates will begin to copy your app and put it on the market for free. At this point, no one wants to give your company $4.99 for an endless runner when they could just as easily find a copy for free. Of course, app developers can submit complaints and get the pirated app taken down, but more and more will crop up as time goes on, and eventually it won't be worth the trouble to get the doppelgangers removed.</p>

<p>For both industries, a company comes up with a novel idea and presents it to the world. People who like that product can start associating the brand name with other products. After recognizing the brand, a person may start to trust that company and look for other products associated with the brand. That company will become known as a purveyor of fine wares.</p>

<p>So here we stand, reader. Make code that you can be proud of; not for getting tens of thousands of downloads, but for scrawling your good name on the white boards of the world in Sharpie. The customers will keep coming back as long as you've got the cure for what ails them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Complete Second Edition]]></title>
    <link href="http://larryprice.github.com/blog/2013/02/19/code-complete-second-edition/"/>
    <updated>2013-02-19T22:38:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2013/02/19/code-complete-second-edition</id>
    <content type="html"><![CDATA[<blockquote><p>Design is a process of carefully planning small mistakes in order to avoid making big ones.
-- Steve McConnell</p></blockquote>

<h3>The Gist</h3>

<p><em><a href="http://www.cc2e.com/Default.aspx">Code Complete Second Edition</a></em> by Steve McConnell is the ultimate programmer's handbook, though certainly not a pocket guide considering its massive 850+ page size. This book contains a seemingly endless amount of information regarding the state of programming circa 2004. Topics range from extremely technical, such as making code readable above making it clever, to office politics, such as dealing with non-technical managers.</p>

<h3>My Opinion</h3>

<p>McConnell has written an encyclopedia for software development. In doing so, the book sometimes suffers from the "wide as an ocean, shallow as a puddle" complex. Nonetheless, the book holds an incredible amount of information that I found refreshing to see in print.</p>

<p>The use of the term "construction" to refer to coding throughout the book is an apt analogy for McConnell's views on the world of software development. Before beginning construction, a team should have a plan. Construction requires a solid base. While constructing a project, individuals should ensure that anyone else could look at their part of the project and figure out what's happening. Working with a partner often improves quality. People doing construction should test their work to ensure the integrity of their product. Redoing lower levels causes a lot of pain. The team is unlikely to hit the original due date. Etc, etc.</p>

<p>Many things in this book go directly against what I was taught in at university. McConnell recites a quote several times in the book:</p>

<blockquote><p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.
-- Brian Kernighan</p></blockquote>

<p>At university, we're taught all the secrets of writing clever code: pointer manipulation, recursion, inappropriate variable reuse, and others. We were also never taught to plan ahead (...besides flowcharts, which were never required) or test, both of which McConnell highly recommends as necessary steps in software development. It's no wonder my programs took so long to debug! Of course, I've learned to perform these tasks naturally while working as a Real Life Programmer. Reading this book is likely more helpful than taking the first few semesters of programming at university.</p>

<p>A small issue I had was a wishy-washy attitude towards comments. In one chapter, McConnell describes having minimal comments in a code and keeping it mostly self-documenting. He then goes on to show all kinds of different, horrifying comments and justifies why they are sometimes okay.</p>

<p>This is where I will note that <em>Code Complete Second Edition</em> is a book published by <a href="http://en.wikipedia.org/wiki/Microsoft_Press">Microsoft Press</a>. I was often surprised by McConnell's adamance that Visual Basic is the most popular programming language at the time of publishing. Even circa 2004 (the year this book was published), the <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">Tiobe index</a> shows VB behind Java, C, and C++. The <a href="https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language">PyPl index</a> also shows VB behind Java, PHP, C, and C++ in 2004. For the record, VB is a silly language.</p>

<h3>Who Would Like This</h3>

<p>This book would be nice required reading for students. Given the length and technical depth, it's practically a textbook. Developers a few years out of university would still enjoy this text, but some topics are so obvious or overdone that many readers may start skipping chapters. If a developer knew of precisely the area he or she wanted to improve, then said developer could likely benefit from perusing a chapter of this book covering that topic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Moved My Cheese?: An Amazing Way to Deal with Change in Your Work and in Your Life]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/27/who-moved-my-cheese-an-amazing-way-to-deal-with-change-in-your-work-and-in-your-life/"/>
    <updated>2012-11-27T20:47:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/27/who-moved-my-cheese-an-amazing-way-to-deal-with-change-in-your-work-and-in-your-life</id>
    <content type="html"><![CDATA[<p><img src="http://dontstepinthepoop.com/wp-content/uploads/2010/01/cheese.jpg" style="border: 0" width="130px" title="Who Moved My Cheese?" alt="Cover for Who Moved My Cheese?" /><br/>
<a href="http://www.amazon.com/Who-Moved-My-Cheese-Amazing/dp/0399144463/"><strong>Who Moved My Cheese?: An Amazing Way to Deal with Change in Your Work and in Your Life</strong></a><br/>
<strong>Spencer Johnson</strong></p>

<hr />

<h3>The Gist</h3>

<p><em>Who Moved My Cheese?</em> is a book about being prepared to lose your job. The book was written during times of rapid economic growth caused by the <a href="http://en.wikipedia.org/wiki/Dot-com_boom">dot-com bubble</a>, which resulted in many companies emerging out of the primordial ooze and then falling back down into the tarpit after an extremely short time on the market. The author uses a cute analogy about cheese to convey that success is fleeting, and each day could be the day a company will shut down.</p>

<h3>My Feelings</h3>

<p>This is another book I read during summer 2012 and wrote a mediocre write-up regarding. This write-up is fresh and in my new write-up style.</p>

<p>The authors of this book want to help people realize that their job is a gift, not a privilage. Just because a company is doing well this quarter does not imply that it will still be in business next quarter. During the time period this book was written in, this was especially true. The theory of companies during the late '90s was to spend as much money as possible to gather as many customers as possible disregarding profits in the short-term (read: <a href="http://www.paulgraham.com/start.html">Get Large or Get Lost</a>). Of course, this kind of mentality did not fit all businesses, and many companies which looked like they would be the future leaders of the American economy were quickly forgotten by the mid-2000s (see: <a href="http://en.wikipedia.org/wiki/Pets.com">Pets.com</a>).</p>

<p>The authors want employees to stop fearing change, and to accept it as a normal part of life. Sometimes companies falter, and oftentimes there's nothing an individual can do about it. In doing so, sometimes old friends are left behind while an individual moves on in search of bigger and better things. Sometimes it takes a long time to find those bigger and better things, but every time it's worth it due to the thrill of confronting your fears and exploring something new.</p>

<p>The use of a "maze" with two tiny people and two anthropomorphic mice is strange and feels purposefully forced. The authors wanted to make a memorable anecdote, and they succeeded with their strange analogy. Having said that, several times I was confused by the names of the four characters as they were very similar and nonsensical. Because of this, I had to reread some sections after referencing the first page of the book to determine who was who.</p>

<p>The primary author appended "MD" to his name on the front cover. Similarly, the "secondary" author appended a "PhD" to his name on the front cover. This bothered me as it is an obvious ploy to make people value the opinions held within the book more highly because they are written by "doctors."</p>

<h3>Who Would Like This</h3>

<p>This is a book that tries to prepare people for the worst and to teach them not to just give up when the future looks grim. It could be an interesting book for anyone, especially after several years of an economic boom caused by a new technology. A person who is very content in their current position at a company could also benefit from this book, as it may give them some incentive to seek out change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passionate Programmer: Creating a Remarkable Career in Software Development]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/26/the-passionate-programmer-creating-a-remarkable-career-in-software-development/"/>
    <updated>2012-11-26T22:20:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/26/the-passionate-programmer-creating-a-remarkable-career-in-software-development</id>
    <content type="html"><![CDATA[<p><img src="http://www.inquisitivechap.com/wp-content/uploads/2010/11/ThePassionateProgrammerCover.png" style="border: 0" width="130px" title="The Passionate Programmer: Creating a Remarkable Career in Software Development" alt="Cover for The Passionate Programmer" /><br/>
<a href="http://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic/dp/1934356344/"><strong>The Passionate Programmer: Creating a Remarkable Career in Software Development</strong></a><br/>
<strong>Chad Fowler</strong></p>

<hr />

<h3>The Gist</h3>

<p>This book tells the story of Chad Fowler (no relation to <a href="http://martinfowler.com/">Martin Fowler</a>). Fowler got himself into a software development slump and was able to turn it around and rejuvinate his passion for his career. Much of the book revolves around how to keep oneself engaged with one's work and how to determine when it's time to shake things up.</p>

<h3>My Feelings</h3>

<p>I read this book in Summer 2012 and did a mediocre write-up on my old blog, so I've decided to quickly redo the write-up from scratch using my new format.</p>

<p>What Fowler talks about in his book is exactly what I was afraid of when looking for a job last fall: getting stuck. It's easy to do: many employers are looking for employees who are willing to work on projects throughout their entire lifespan, which may be 12 months, 5 years or in some cases the lifespan of the company.</p>

<p>Personal story time. I was offered a job at an Indianapolis company with many long-term projects. One of my interviewers had been working on his current project for 5 years, and was trying desparately to get out of it. However, based on his seniority and domain knowledge of the project, he was told it would be at least another 6 months before he could move on. The developer was miserable working his current job and had no exit routes available to him, which scared me quite a bit.</p>

<p>Fowler's methods don't describe how to avoid this situation. They describe how to keep yourself happy by learning new technology and branching away from your "domain knowledge" while still remaining the go-to guy on your current project. Showing an interest in doing things outside of your current project should show an employer that you're capable of more, and that you're more than willing to do something new.</p>

<p>Fowler also talks about moving jobs if you're unhappy, noting that the new world of software development doesn't offer all the bells and whistles that it used to. Although I agree that you should try to find a new job if you're unhappy, it's not always as easy to pack up your things and move as the author makes it seem.</p>

<p>The coolest parts of the book were the personal stories of several high-tech big-wigs. The silliest parts were the 'Act On It' sections. The 'Act On It' sections described how to implement some of the methods detailed in the book, but they often seemed obvious and unnecessary to me.</p>

<h3>Who Would Like This</h3>

<p>This book can offer a lot to someone who wants to revitalize their career after getting in a rut. It may also be able to serve as a guide to preventing yourself from getting in a rut. As a recent college grad with many of my dreams still alive, I only found a moderate amount of honey in this beehive. An interesting read, but maybe not entirely relevant to fresh faces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Linux Works: What Every Superuser Should Know]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/26/how-linux-works-what-every-superuser-should-know/"/>
    <updated>2012-11-26T21:27:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/26/how-linux-works-what-every-superuser-should-know</id>
    <content type="html"><![CDATA[<p><img src="http://books.gigaimg.com/avaxhome/77/6b/000c6b77_medium.jpeg" style="border: 0" width="130px" title="How Linux Works" alt="Cover for How Linux Works" /><br/>
<a href="http://www.amazon.com/How-Linux-Works-Superuser-Should/dp/1593270356/"><strong>How Linux Works: Things Every Superuser Should Know</strong></a><br/>
<strong>Brian Ward</strong></p>

<hr />

<h3>The Gist</h3>

<p>Linux is a complicated operating system which gives its users the freedom to do anything. This book details things that any Linux superuser should be aware of, including printing, networking, scripting, compiling source code, setting up users, and buying hardware.</p>

<h3>My Feelings</h3>

<p>I've been running <a href="http://ubuntu.com/">Ubuntu</a> as the only operating system on my home computer since the 11.04 Natty Narwhal release in 2011, and I've been using Ubuntu in varying degrees since 9.04 Lucid Lynx. I've also recently ported my wife's computer over to Ubuntu after she finally got fed up with Linux. There is a course at Purdue called ECE364 that taught us lots of cool Linux commands which I had forgotten, so I've been looking for a good refresher. This book helped jog my memory of things like grep, sed, and awk. The book also provided lots of information on things that I'd been using for years without really realizing what I was doing.</p>

<p>This book was written in 2004, which was a long time ago in the computing world. In 2004, Ubuntu Linux (<a href="http://www.pcworld.com/article/254516/which_linux_distro_is_fairest_of_them_all_ubuntu_survey_says.html">the most popular personal desktop Linux distribution</a>) was released. Ward makes mentions of setting up network interfaces, firewalls, and printers through the terminal, which are all things that now are either done automatically by most operating systems or at a minimum have a GUI to support setup. Ward also mentions that <a href="http://en.wikipedia.org/wiki/Cathode_ray_tube">CRT monitors</a> are on the cheap, but if you want the best resolution an <a href="http://en.wikipedia.org/wiki/Lcd">LCD monitor</a> is the new cool thang. He talks about <a href="http://en.wikipedia.org/wiki/Pentium">Pentium processors</a>, half gigabytes of DDR, and slow, heavy laptops. Be warned that you won't find anything in this book about 64-bit processors, SSDs, or cloud computing.</p>

<p>Most of the book is still very relevant. As mentioned previously, I got a lot of benefit from reading the section on common commands. The section on setting up dot-files was also extremely useful for me. There was also a lot of interesting information about the Linux filesystem being databases that I had never really thought about before.</p>

<h3>Who Would Like This</h3>

<p>Those new to Linux or those needing a refresher would benefit from scanning this book, at least the interesting sections. This book is not for people looking for bleeding-edge information on their new hardware or software. The reader can get a large amount of information that has aged well and will continue to be relevant for Linux users for years to come.</p>
]]></content>
  </entry>
  
</feed>
