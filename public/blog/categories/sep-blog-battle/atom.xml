<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sep-blog-battle | Larry Price]]></title>
  <link href="http://larryprice.github.com/blog/categories/sep-blog-battle/atom.xml" rel="self"/>
  <link href="http://larryprice.github.com/"/>
  <updated>2013-03-26T20:57:31-04:00</updated>
  <id>http://larryprice.github.com/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blog Battle: Pvreryvre of fyne coddes]]></title>
    <link href="http://larryprice.github.com/blog/2013/03/25/pvreryvre-of-fyne-coddes/"/>
    <updated>2013-03-25T22:09:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2013/03/25/pvreryvre-of-fyne-coddes</id>
    <content type="html"><![CDATA[<p>Ice pellets bounced off my head as I walked myself home late one night. The air was dreadfully cold, so I swooped into one of Carmel's seedy side alleys to take a shotcut. Out of the shadows crept a man wearing a long trenchcoat and thick-rimmed glasses. Hunched over, he brushed his unkempt hair out of his eyes. His coffee-stained breath rushed from beneath his pencil moustache as he asked, "Can I interest you in any of these fine iPhone apps?" I tried to cautiously back away. "How would you like a real BaZynga game, only ninety-nine cents, it's called Perturbed Birds with Pals?" I was briefly distracted by sirens in the distance; by the time I returned my glance to the man's last position he had disappeared, my virtual wallet was empty, and my phone was filled with bloatware and repetitive 'Ville-style games.</p>

<p>There are more KLOCs in this world than there have been McDonald's hamburgers sold. How do the good programmers differentiate themselves from the common street peddlers? How do companies convince you to pay $2.99 for their app when a clone is released less than a week later for free?</p>

<p>The answer? Maybe they don't. Maybe a comparison can be made between software companies and pharamceutical companies.</p>

<p>Big Pharmaceutical companies spend many years researching, developing, and testing drugs to treat the common cold, arthritis, bad cholesterol, or even to sedate your energetic children. These drugs spend several years on the market where patents on the drug are valid, meaning that only the company that invented the drug can legally sell it. After the patent protections expire (approx 7-12 years), any big, small, or mom &amp; pop drug manufacturer is legally allowed to "clone" this drug and make what's called a "generic." Generics are sold at a fraction of the cost of the original drug. At this point, no one wants to give Big Pharma $20 for 6 tablets to cure their heartburn when they could pay $5 for a year's supply of generics.</p>

<p>Software companies tend to spend somewhere between 12 weeks and 12 months developing apps that will be consumed by the general population. If the company just released an Android or iOS app, then the product will stay relevant somewhere between 2 weeks and 2 years. After that time, the app will either no longer have market value or will need to be revamped to please the modern consumer. Within a short number of days or weeks, there is a high probability that surly software pirates will begin to copy your app and put it on the market for free. At this point, no one wants to give your company $4.99 for an endless runner when they could just as easily find a copy for free. Of course, app developers can submit complaints and get the pirated app taken down, but more and more will crop up as time goes on, and eventually it won't be worth the trouble to get the doppelgangers removed.</p>

<p>For both industries, a company comes up with a novel idea and presents it to the world. People who like that product can start associating the brand name with other products. After recognizing the brand, a person may start to trust that company and look for other products associated with the brand. That company will become known as a purveyor of fine wares.</p>

<p>So here we stand, reader. Make code that you can be proud of; not for getting tens of thousands of downloads, but for scrawling your good name on the white boards of the world in Sharpie. The customers will keep coming back as long as you've got the cure for what ails them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Optimistic Programmer]]></title>
    <link href="http://larryprice.github.com/blog/2012/11/08/the-optimistic-programmer/"/>
    <updated>2012-11-08T19:06:00-05:00</updated>
    <id>http://larryprice.github.com/blog/2012/11/08/the-optimistic-programmer</id>
    <content type="html"><![CDATA[<p>Meet Anne. Anne's a programmer in a thriving tech company. Anne goes into work every day to work on a shiny new product for her company.</p>

<p>Anne's customer knows exactly what they want. Anne writes all of her tests using pure TDD. Anne updates her tasks on the company's ALM software, which was defined with programmers in mind and not just managers. She knows everything about her domain, and every UI element she touches is the epitome of good user experience. She works with 100 other programmers, each of which is equally as skilled as she is. Every time she pushes her most recent file changes, there are no merge conflicts and the build server works without a hitch. The deadline for the project is defined as whenever the last feature is finished. The best part: Anne spends fewer than an hour a week in meetings, none of which is a complete waste of time.</p>

<p>You've got to be kidding me.</p>

<p>If I experienced a day like I just described for Anne, I would have to assume I had been killed in a tragic car accident on my way into work.</p>

<p>How can a programmer possibly be optimistic? Let me say: The client never knows what they want. The programmer couldn't possibly write all of their tests TDD style unless they're a saint. ALM software has a tendency to suck. Programmers don't have the inherent ability to know precisely how a user will try to use the product. Oftentimes your teammates may not be on the same level as you are, or you may not be on as high a level as they are. There are always merge conflicts and build server anomalies. 'Random' is generally an apt description of project deadlines. Lastly, we spend lots of times in meetings which often don't appear to provide much face value. Those are the facts of life.</p>

<p>If we're optimists, why would we bother writing tests for anything beyond happy-path? How could we ever justify refactoring if we're optimistic that we did it right the first time? Why bother putting in security if no one will ever try to use their 1337 hax to get to the client's data? It's important that we stay planted firmly in reality to ensure we think of most everything that can go wrong when a customer uses a product.</p>

<p>I'm not saying there aren't optimistic moments in a programmer's life. Phrases like "I'm optimistic the project will end some day" and "I'm pretty sure the customer will like this" and "I highly doubt we'll get sued for that" are phrases that I'd feel inclined to throw around most any time to raise the morale of my companions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Idea, Bad Idea]]></title>
    <link href="http://larryprice.github.com/blog/2012/10/30/good-idea-bad-idea/"/>
    <updated>2012-10-30T21:37:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2012/10/30/good-idea-bad-idea</id>
    <content type="html"><![CDATA[<p>There is a general, unnamed rule when coming up with ideas:</p>

<p><strong><em>A person is required to have one or more bad ideas before having a single good idea</em></strong>.</p>

<p>Since this rule is unnamed, it shall henceforth be referred to as Larry's Law.</p>

<p>Note that the thinker in question is not limited to just one bad idea under Larry's Law, but as many as he so desires. Also note that Larry's Law does not imply that the thinker will necessarily ever have any good ideas.</p>

<p>Having bad ideas is necessary. Bad ideas let the brain see what it shouldn't be thinking about, which has the potential to lead to good ideas. Then again, many bad ideas may just spawn more bad ideas. That's just Larry's Law.</p>

<h3>Examples</h3>

<p>You sit down at your desk and pick up a bug. Your first idea doesn't fix the code. Your second idea doesn't compile. Your third idea breaks all 3400 unit tests in the test suite. Your fourth idea is a complete hack. Your fifth idea breaks some other component of the application. Your sixth idea seems genius to you but doesn't survive the code review. Your seventh idea is a winner.</p>

<p>Before Edison could invent the <a href="http://edison.rutgers.edu/ticker.htm">Universal Stock Ticker</a>, he had to invent a <a href="http://edison.rutgers.edu/vote.htm">crummy vote recorder</a>.</p>

<p>Do you have any idea the number of albums Pink Floyd released before <a href="http://en.wikipedia.org/wiki/The_Dark_Side_of_the_Moon"><em>The Dark Side of the Moon</em></a>? <a href="http://en.wikipedia.org/wiki/Pink_Floyd_discography">Seven</a>. Don't kid yourself: these seven albums were not gems. But don't fret! Larry's Law states that these albums had to be low quality to allow <em>The Dark Side of the Moon</em> to be a monumental album.</p>

<p>Someone invented <a href="http://en.wikipedia.org/wiki/New_coke">New Coke</a>. This is an instance of someone making a bad decision without any corresponding good decisions.</p>

<p>Domino's pizza was <a href="http://www.nowpublic.com/culture/pizza-turnaround-dominos-pizza-knows-they-suck-2555951.html">terrible</a> until very recently. Now it's delicious, at least according to <a href="http://answers.yahoo.com/question/index?qid=20110609112806AABnOTo">this man on Yahoo! Answers</a>.</p>

<p>A group of people wants to go out to eat. Jon Doe will suggest Jimmy John's, then Penn Station, McDonald's, Five Guys, Taco Bell, and Denny's. Finally Jon Doe offers a reasonable idea, like YATS. This process will now be repeated by every person in the group, and the best decision will never become visible. And Larry's Law specifies that the group may never come to a good decision, and will probably end up eating at Five Guys.</p>

<h3>Conclusion</h3>

<p>The next time you have a bad idea, embrace it. Realize that having that bad idea might clear space in your head for a good idea. Or possibly an infinite number of bad ideas. Either way, that's just Larry's Law.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Don't Have Time]]></title>
    <link href="http://larryprice.github.com/blog/2012/10/24/i-dont-have-time/"/>
    <updated>2012-10-24T22:35:00-04:00</updated>
    <id>http://larryprice.github.com/blog/2012/10/24/i-dont-have-time</id>
    <content type="html"><![CDATA[<p>"Wanna go for a walk?" my wife asks over my shoulder.</p>

<p>"I don't have time for your walks, woman! I've got a city to run!" I exclaim as I frantically move the mouse around the screen to raise taxes on the rich so I can afford to build another statue of myself in the blossoming city of Velcro. I'd been absolutely engulfed in the popular city simulator <a href="http://en.wikipedia.org/wiki/Simcity_4"><em>SimCity 4</em></a> for about five hours already that day. Needless to say, my wife "convinced" me to hit the pause button on the game and join her back in reality, where I'm a software developer who has to go on walks to counter his poor eating habits.</p>

<p>We take time too seriously.</p>

<p>When we feel like we don't have enough time, we complain. When we feel like we have too much time, we think we're bored, and so we complain about that.</p>

<p>Maybe if we spent less time complaining, we'd have time to see how ridiculous we are.</p>

<p>Time is time. What's there is there, and we're not getting any more or less of it based on what we get accomplished in a given day.</p>

<p>...Unless of course what you accomplish is manipulating time in some manner. Or you create a serum to slow/expediate/stop the aging process. But those are side projects to talk about in another blog post on another day.</p>

<p>Back to <em>SimCity 4</em>. After I rediscovered the dusty game disc at my parents' house, the game completely absorbed me, even 10 years after it was originally released (my computer is finally powerful enough to play it). I didn't mind that it was taking up so much of my time. I had a myriad of more conventional things I wanted to do that weekend: side projects to work on, books to read, TV shows to watch, internets to check, housework to do, groceries to buy, and meals to cook; but none of that mattered.</p>

<p>I repeat: none of that important-sounding stuff mattered. I had stumbled upon this completely arbitrary childhood memory to relive, so everything else took a back seat. I don't regret all the hours I ended up spending on that game, as a kid or as an adult. A compulsive opportunity arose to have some fun and I snatched it up. I stopped worrying about time and decided to just enjoy myself. You should try it sometime. We spend way too much of our time trying to abide by our schedules and to-do lists. The best parts of life are when you stumble upon something that makes you completely forget what you were doing before you found it, and then continues to obliterate any plans you might have had for the rest of the day.</p>

<p>Now if you'll excuse me, I have a city to run.</p>
]]></content>
  </entry>
  
</feed>
