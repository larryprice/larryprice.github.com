<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Larry Price]]></title>
  <link href="http://larryprice.github.io/atom.xml" rel="self"/>
  <link href="http://larryprice.github.io/"/>
  <updated>2013-11-17T21:20:11-05:00</updated>
  <id>http://larryprice.github.io/</id>
  <author>
    <name><![CDATA[Larry Price]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SEP Blog Battle: Tools of the Trade]]></title>
    <link href="http://larryprice.github.io/blog/2013/11/17/sep-blog-battle-tools-of-the-trade/"/>
    <updated>2013-11-17T20:59:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/11/17/sep-blog-battle-tools-of-the-trade</id>
    <content type="html"><![CDATA[<p>To whom do I owe any programming success I may have in a given day? My education? My wonderful peers? The shriveled wad of grey goo in my head? None of the above.</p>

<p>My search engine. <a href="https://duckduckgo.com">DuckDuckGo</a>. <a href="https://encrypted.google.com">Google</a>. <a href="https://wikipedia.org">Wikipedia</a>. Hardly a problem exists that can&rsquo;t be assisted in some way by a quick search.</p>

<p>How do I use Google Go (<a href="http://golang.org/doc/effective_go.html">answer</a>)? How do I use tags in <a href="https://github.com/cucumber/cucumber-cpp">cucumber-cpp</a> (<a href="http://larryprice.github.io/blog/2013/04/15/tags-in-c-plus-plus-cucumber-tests/">answer</a>)? How do I brush my teeth without toothpaste (<a href="http://www.wikihow.com/Brush-Teeth-Without-Toothpaste">answer</a>? What&rsquo;s the deal with airline food (<a href="http://youtu.be/n0E7EaRLmSI">answer</a>)?</p>

<p>It&rsquo;s all so easy. It&rsquo;s right at your fingertips. A proficient programmer these days has to also be a proficient &ldquo;Googler.&rdquo; However, a programmer&rsquo;s job description is not &ldquo;copies all code from the internet.&rdquo; Although the odds are high that someone has had a problem very similar to yours, you need to be able to take that code as an example and adapt it to your current situation. If that weren&rsquo;t the case, I think we&rsquo;d be losing our jobs to high school kids pretty quickly.</p>

<p>So at the end of the day, make sure to be thankful to your search engine. Buy it flowers, make it dinner, rub its feet; just let it know how much you appreciate all the hard work it does for you when you do nothing but ask it silly questions all day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy Data Using qmake]]></title>
    <link href="http://larryprice.github.io/blog/2013/11/14/copy-data-using-qmake/"/>
    <updated>2013-11-14T21:24:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/11/14/copy-data-using-qmake</id>
    <content type="html"><![CDATA[<p>I&rsquo;ll take things that should be really easy but are in fact impossible for $1000, Mr Trebek.</p>

<p>I have a <a href="https://qt-project.org/wiki/Qt_5.0">Qt</a> desktop app that uses <a href="https://qt-project.org/doc/qt-4.8/qmake-manual.html">qmake</a>. I have tests. I have test data that I need to copy to my build directory. Not only that, but I want to copy a whole directory recursively. In Linux <em>and</em> Windows. You must be thinking to yourself, &lsquo;There&rsquo;s no way that&rsquo;s possible, leave me out of your crazy plans!&rsquo; Well to that I say nay. Nay indeed.</p>

<p>I originally copied my test data using the <code>INSTALLS</code> variable. My data folder is just a directory sitting in the test source called &ldquo;TestData.&rdquo; This solution is fantastic because it works cross-platform.</p>

<figure class='code'><figcaption><span>MyBAProjectTest.pro</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">install_it.path</span> <span class="o">=</span> <span class="nv">$$</span><span class="o">{</span>OUT_PWD<span class="o">}</span>
</span><span class='line'><span class="nv">install_it.files</span> <span class="o">+=</span> TestData/
</span><span class='line'>
</span><span class='line'><span class="nv">INSTALLS</span> <span class="o">+=</span> install_it
</span></code></pre></td></tr></table></div></figure>


<p>However, this means that if I ever have a clean directory, I have to run <code>make install</code> to install my test data. What a pain! Why bother! Why even write tests when life is this unjust!</p>

<p>BUT WAIT! After combing the depths of the internets for much of the evening, I was able to find many halfway solutions to my original problem. The concept is to add commands to the <code>QMAKE_POST_LINK</code> variable.</p>

<p>For Linux, I use <code>cp</code>:</p>

<figure class='code'><figcaption><span>MyBAProjectTest.pro</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">QMAKE_POST_LINK</span> <span class="o">+=</span> <span class="nv">$$</span>quote<span class="o">(</span>cp -rf <span class="nv">$$</span><span class="o">{</span>PWD<span class="o">}</span>/TestData <span class="nv">$$</span><span class="o">{</span>OUT_PWD<span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>For Windows, I use <code>xcopy</code>:</p>

<figure class='code'><figcaption><span>MyBAProjectTest.pro</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">PWD_WIN</span> <span class="o">=</span> <span class="nv">$$</span><span class="o">{</span>PWD<span class="o">}</span>
</span><span class='line'><span class="err">PWD_WIN</span> <span class="err">~=</span> <span class="err">s,/,\\,g</span>
</span><span class='line'>
</span><span class='line'><span class="nv">QMAKE_POST_LINK</span> <span class="o">+=</span> <span class="nv">$$</span>quote<span class="o">(</span>mkdir DestFolder<span class="o">)</span>
</span><span class='line'><span class="nv">QMAKE_POST_LINK</span> <span class="o">+=</span> <span class="nv">$$</span>quote<span class="o">(</span>xcopy <span class="nv">$$</span><span class="o">{</span>PWD_WIN<span class="o">}</span><span class="se">\\</span>TestData <span class="nv">$$</span><span class="o">{</span>OUT_PWD_WIN<span class="o">}</span><span class="se">\\</span>TestData /E<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also want that directory to be deleted when I run <code>make clean</code>. Cleaning up just means adding some commands to the <code>QMAKE_CLEAN</code> directive. I also want to run the appropriate commands whether I&rsquo;m on Unix or Windows without having to modify my <code>.pro</code> file. Wrapping the previous commands in what I call an &ldquo;OS-space&rdquo; will cause those commands to only run in the specified operating system.</p>

<figure class='code'><figcaption><span>MyBAProjectTest.pro</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="err">win32</span> <span class="err">{</span>
</span><span class='line'>    <span class="nv">PWD_WIN</span> <span class="o">=</span> <span class="nv">$$</span><span class="o">{</span>PWD<span class="o">}</span>
</span><span class='line'>    PWD_WIN ~<span class="o">=</span> s,/,<span class="se">\\</span>,g
</span><span class='line'>
</span><span class='line'>    QMAKE_POST_LINK +<span class="o">=</span> <span class="nv">$$</span>quote<span class="o">(</span>mkdir DestFolder<span class="o">)</span>
</span><span class='line'>    QMAKE_POST_LINK +<span class="o">=</span> <span class="nv">$$</span>quote<span class="o">(</span>xcopy <span class="nv">$$</span><span class="o">{</span>PWD_WIN<span class="o">}</span><span class="se">\\</span>TestData <span class="nv">$$</span><span class="o">{</span>OUT_PWD_WIN<span class="o">}</span><span class="se">\\</span>TestData /E<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    QMAKE_CLEAN +<span class="o">=</span> /s /f /q TestData <span class="o">&amp;&amp;</span> rd /s /q TestData
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="err">unix</span> <span class="err">{</span>
</span><span class='line'>    <span class="nv">QMAKE_POST_LINK</span> <span class="o">+=</span> <span class="nv">$$</span>quote<span class="o">(</span>cp -rf <span class="nv">$$</span><span class="o">{</span>PWD<span class="o">}</span>/TestData <span class="nv">$$</span><span class="o">{</span>OUT_PWD<span class="o">})</span>
</span><span class='line'>
</span><span class='line'>    QMAKE_CLEAN +<span class="o">=</span> -r TestData
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Data copied, tests working again. Take that, Nokia; no matter how difficult you make your build-processing tool, I&rsquo;ll figure out how to contort it to my whims.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing GTest and GMock Libs in Ubuntu 13.04]]></title>
    <link href="http://larryprice.github.io/blog/2013/10/13/installing-gtest-and-gmock-libs-in-ubuntu-13-dot-04/"/>
    <updated>2013-10-13T11:02:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/10/13/installing-gtest-and-gmock-libs-in-ubuntu-13-dot-04</id>
    <content type="html"><![CDATA[<p>I started trying to work on an open-source project and found that I needed to install <a href="https://code.google.com/p/googletest/">googletest</a> and <a href="https://code.google.com/p/googlemock/">googlemock</a> on my home machine. Seemed easy enough, I found a package called <code>google-mock</code> in the <a href="http://packages.ubuntu.com/raring/google-mock">Raring</a> repositories which depends on a package called <code>libgtest-dev</code>. So I install it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install -y google-mock
</span></code></pre></td></tr></table></div></figure>


<p>And the CMake file I was running before tells me that I have gmock, but I&rsquo;m still missing gtest. What&rsquo;s going on here?</p>

<p>Well, there was a changeset applied in Ubuntu 12.04 (Precise) with the following text (<a href="http://www.ubuntuupdates.org/package/core/precise/universe/base/gtest">source</a>):</p>

<blockquote><p>  Stop distributing static library (although still build it, to ensure gtest
  works). Upstream recommends against shipping the libary at all, just the
  source. (See: <a href="http://code.google.com/p/googletest/wiki/FAQ">http://code.google.com/p/googletest/wiki/FAQ</a>)
  The Debian maintainer plans to do this also (see BTS: 639795); do it in
  Ubuntu now to fulfil MIR requirements.</p>

<p>&mdash; Christopher James Halse Rogers Thu, 08 Mar 2012 17:45:29 +1100</p></blockquote>

<p>What does that mean? That means we get to build and &ldquo;install&rdquo; the gtest libs ourselves. The source is conveniently installed in <code>/usr/src</code> after installing <code>libgtest-dev</code> (which we automatically got when we installed <code>google-mock</code>).</p>

<figure class='code'><figcaption><span>Installing gtest libs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install -y cmake --quiet
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/src/gtest
</span><span class='line'><span class="nv">$ </span>sudo cmake -E make_directory build
</span><span class='line'><span class="nv">$ </span>sudo cmake -E chdir build cmake .. &gt;&gt; /dev/null
</span><span class='line'><span class="nv">$ </span>sudo cmake --build build &gt;&gt; /dev/null
</span><span class='line'><span class="nv">$ </span>ls build/libgtest*
</span><span class='line'>build/libgtest.a  build/libgtest_main.a
</span><span class='line'><span class="nv">$ </span>sudo cp build/libgtest* /usr/local/lib/
</span><span class='line'><span class="nv">$ </span>sudo rm -rf build
</span></code></pre></td></tr></table></div></figure>


<p>The <code>&gt;&gt; /dev/null</code> can be dropped if you would like to see the output of these commands when successful, any error text will still show up with this redirect in place. I like to move all my personally-compiled libraries (and includes) to <code>/usr/local</code>, but you could just as easily copy them over to <code>/usr/lib</code>. All of this could also be done in <code>/tmp</code> if you&rsquo;re so inclined.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM Quick Start]]></title>
    <link href="http://larryprice.github.io/blog/2013/10/08/rvm-quick-start/"/>
    <updated>2013-10-08T22:10:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/10/08/rvm-quick-start</id>
    <content type="html"><![CDATA[<p>When I was working on a few different projects at once, I started running into issues where my Ruby gem versions would start to mismatch. How did I fix that issue? Naively. I adjusted the versions as necessary so my gems were always the same version. That was&hellip; pretty dumb. To make up for my past ignorance, I&rsquo;ve been exploring ways to manage my Ruby versions and my gems intelligently. Enter <a href="https://rvm.io/">RVM</a>.</p>

<p>RVM is a simple tool to solve just problems. And it works pretty well. I hit some kinks along the way, but my installation pleases me well enough. Getting RVM is not for the faint of heart. Maybe there are better ways to do it, but the website says to execute the following:</p>

<figure class='code'><figcaption><span>/home/lrp/my_project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; curl -L https://get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure>


<p>This command uses curl to fetch the data that lives at <code>https://get.rvm.io</code>, which happens to be a big bash script. It executes the bash script with the args <code>-s stable</code>. &lsquo;Stable&rsquo; means the latest stable release of RVM. I could just as easily give it &lsquo;dev&rsquo; and get the latest developer release instead, but I really don&rsquo;t want that. So that command does a lot of stuff and may give you some further instructions to run before you can continue. Use that big head of yours and follow the instructions. You may also need to restart a terminal to get RVM to be recognized as a command. Since I was using <code>gnome-terminal</code>, I had to follow these <a href="https://rvm.io/integration/gnome-terminal">instructions</a>.</p>

<p>Now I want RVM to know about some Ruby versions. For a full list of possible Ruby versions to install, run <code>rvm list known</code>. I just want 1.9.3. I found that I needed to do this even though I had 1.9.3 installed on my system previously.</p>

<figure class='code'><figcaption><span>/home/lrp/my_project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; rvm install ruby-1.9.3
</span></code></pre></td></tr></table></div></figure>


<p>In Ubuntu 13.04, this command installs ruby-1.9.3 in <code>~/.rvm/rubies/ruby-1.9.3-p448/bin/ruby</code>. I&rsquo;ve found that this also sets my default Ruby to the RVM version of Ruby, which I don&rsquo;t want. To verify and undo this, I executed the following commands outside of my project directory.</p>

<figure class='code'><figcaption><span>/home/lrp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; which ruby
</span><span class='line'>/home/lrp/.rvm/rubies/ruby-1.9.3-p448/bin/ruby
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="s2">&quot;D&#39;oh&quot;</span>
</span><span class='line'>D<span class="err">&#39;</span>oh
</span><span class='line'>&gt; rvm use system
</span><span class='line'>Now using system ruby.
</span><span class='line'>&gt; which ruby
</span><span class='line'>/usr/bin/ruby
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Now that that&rsquo;s settled, I want to tell RVM to use the local version of Ruby for my project and to install any gems in a special location.</p>

<figure class='code'><figcaption><span>/home/lrp/my_project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; rvm 1.9.3@my-project --create --ruby-version
</span></code></pre></td></tr></table></div></figure>


<p>This creates a gemset and ruby-version file (<code>.ruby-gemset</code> and <code>.ruby-version</code> files) using the Ruby installation 1.9.3 created above. I specifiy to use <code>--ruby-version</code> instead of <code>--rvmrc</code> because RVM told me that I should. After some research, the <code>.ruby-version</code> file is used by several other tools, so this will keep my potential number of config files low. Now I check that all my Ruby versions are okay.</p>

<figure class='code'><figcaption><span>/home/lrp/my_project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; which ruby
</span><span class='line'>/home/lrp/.rvm/rubies/ruby-1.9.3-p448/bin/ruby
</span><span class='line'>&gt; <span class="nb">cd</span> ..
</span><span class='line'>&gt; which ruby
</span><span class='line'>/usr/bin/ruby
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When in my project directory, all the gems I install will be installed to my specified gemset, which means they are no longer cluttering my global gemspace, even when I install them using Bundler. It also means that I can use ruby-1.9.3 for this project and 2.0 for another project with minimal mental overhead. This makes me a happy developer.</p>

<p>I only glazed over the installation process and documentation for RVM. Go to <a href="https://rvm.io/">the web site</a> for more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Pragmatic Programmer]]></title>
    <link href="http://larryprice.github.io/blog/2013/09/08/the-pragmatic-programmer/"/>
    <updated>2013-09-08T12:00:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/09/08/the-pragmatic-programmer</id>
    <content type="html"><![CDATA[<blockquote><p>Don&rsquo;t be a slave to history. Don&rsquo;t let existing code dictate future code. All code can be replaced if it is no longer appropriate</p></blockquote>

<h3>The Gist</h3>

<p><a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=020161622X&amp;linkCode=as2&amp;tag=larpriandthee-20"><em>The Pragmatic Programmer</em></a> written by Andrew Hunt and David Thomas is a book about being an above-average software developer.</p>

<h3>My Opinion</h3>

<p>There are many good concepts in this book. However, I&rsquo;ve been reading a bit much lately and found that most of the topics covered have been rehashed in other books. As it turns out, re-reading this kind of motivational book is less exciting when you&rsquo;ve read similar texts earlier in the year.</p>

<p>I did enjoy the section on Refactoring; there has been some discussion on my current project team of what to do when you see &ldquo;gnarly&rdquo; code. This section reiterates the fact that poorly-written code should be updated. The authors talk about treating code as organic. Refactoring your code as it grows is the same as reevaluating oneself as one grows older. Changing one&rsquo;s hair or clothes, changing what one eats or reads or watches (inputs), or changing a daily routine is just refactoring of your daily life: the person is the same and accomplishes largely the same tasks, but in a slightly different manner.</p>

<p>One tip in this book is &ldquo;Use one editor well.&rdquo; I&rsquo;ve found that I love to use <a href="http://www.sublimetext.com/">Sublime Text</a> for my work in Ruby, Python, and markup languages. Having said that, I find Sublime an inappropriate tool for doing C++ (<a href="https://qt-project.org/wiki/Category:Tools::QtCreator">Qt Creator</a>), Java (<a href="http://eclipse.org/">Eclipse</a> or even <a href="https://netbeans.org/">NetBeans</a>), or anything .NET (duh Visual Studio). Considering my job could involve any programming language, I would revise this tip to &ldquo;Use the right editor for the job, and learn to use it well.&rdquo;</p>

<p>The chapter introductions were largely worthless to me: long-winded summaries of EVERYTHING in the chapter. I eventually trained myself to automatically skip the chapter intros in favor of reading the details. It seems that I could have just as easily gone the other way and gotten away with only reading the intros, but that hardly seems like any fun.</p>

<h3>Who Would Like This</h3>

<p>Fresh-outs should read this book. It&rsquo;s not too long and it&rsquo;s split into manageable chapters. Great for fresh-out book clubs, in which I probably should have participated.</p>

<p>Who would not like this? People who have read books with similar premeses, such as <a href="http://larryprice.github.io/blog/2013/02/19/code-complete-second-edition/"><em>Code Complete</em></a>, within recent memory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Foreman to Create an Upstart Service]]></title>
    <link href="http://larryprice.github.io/blog/2013/08/31/using-foreman-to-create-an-upstart-service/"/>
    <updated>2013-08-31T17:05:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/08/31/using-foreman-to-create-an-upstart-service</id>
    <content type="html"><![CDATA[<p>I just finished my first attempt at deploying a web app to run automatically in the background on a friend&rsquo;s server. Pretty easy, really. The first thing I did was install <a href="https://github.com/ddollar/foreman">foreman</a>. Assuming you have ruby and rubygems installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install foreman
</span></code></pre></td></tr></table></div></figure>


<p>Next I needed to give foreman the commands to start my app. I created a file in the root of my project directory called &lsquo;Procfile&rsquo; and gave it the steps I would run to start my app manually. For the sake of simplicity, let&rsquo;s say I run my app pretty barebones:</p>

<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: bundle <span class="nb">exec </span>rackup
</span></code></pre></td></tr></table></div></figure>


<p>Now when I run <code>foreman start</code>, foreman will use <a href="http://bundler.io/">Bundler</a> to execute rackup with the correct gems in my Gemfile. Now exporting upstart config files is pretty easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo foreman <span class="nb">export </span>upstart --app<span class="o">=</span>MyApp --user<span class="o">=</span>root /etc/init
</span></code></pre></td></tr></table></div></figure>


<p>That command creates the .conf files needed for upstart to control the service called &lsquo;MyApp&rsquo; as the user &lsquo;root.&rsquo; It puts all the .conf files in <code>/etc/init</code> (which is where Ubuntu puts such things) and will create a default log directory in <code>/var/log/MyApp</code>. Now I can control my service by running <code>service MyApp start</code>, <code>service MyApp stop</code>, <code>service MyApp restart</code>, and <code>service MyApp status</code>. Hooray for me.</p>

<p>But I need to run my app in two ways: in dev mode on a local port with my dev database, and I need to run it in production mode using port 80 and the production database. I&rsquo;ve also heard that using <a href="https://en.wikipedia.org/wiki/WEBrick">webrick</a> (the default server installed with rackup) is great for develpment, but I should be using something else for my production server. So I made some config files for foreman:</p>

<figure class='code'><figcaption><span>development.env</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RACK_ENV</span><span class="o">=</span>development
</span><span class='line'><span class="nv">PORT</span><span class="o">=</span>9292
</span><span class='line'><span class="nv">SERVER</span><span class="o">=</span>rackup
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>production.env</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RACK_ENV</span><span class="o">=</span>production
</span><span class='line'><span class="nv">PORT</span><span class="o">=</span>80
</span><span class='line'><span class="nv">SERVER</span><span class="o">=</span>unicorn
</span></code></pre></td></tr></table></div></figure>


<p>And I change my Procfile to:</p>

<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>web: bundle <span class="nb">exec</span> <span class="nv">$SERVER</span> -p <span class="nv">$PORT</span> -E <span class="nv">$RACK_ENV</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ridiculously configured. Now when I run <code>foreman start</code>, it will error out. I need to specify my environment file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>foreman start -e production.env
</span></code></pre></td></tr></table></div></figure>


<p>Now foreman will use Bundler to startup the server specified in <code>$SERVER</code>, run the app on port <code>$PORT</code> (-p), and will pass through the environment listed as <code>$RACK_ENV</code> to my application (-E), allowing my app to do whatever configuration it does given the current environment. Power to the people.</p>

<p><a href="http://michaelvanrooijen.com/articles/2011/06/08-managing-and-monitoring-your-ruby-application-with-foreman-and-upstart/">I found that this guy</a> does a lot more complicated stuff with Foreman, if you need more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Futility of Man and Trying to Divide a Sinatra App into Separate Controllers]]></title>
    <link href="http://larryprice.github.io/blog/2013/08/26/on-the-futility-of-man-and-trying-to-divide-a-sinatra-app-into-separate-controllers/"/>
    <updated>2013-08-26T22:35:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/08/26/on-the-futility-of-man-and-trying-to-divide-a-sinatra-app-into-separate-controllers</id>
    <content type="html"><![CDATA[<p>Oh, <a href="http://www.sinatrarb.com/">Sinatra</a>. You&rsquo;re oh-so-very dear to me. You made it so easy for me to write my <a href="http://capitalpunishment.herokuapp.com">first</a> <a href="http://pokephile.herokuapp.com">web</a> apps. All I had to do was write a couple routes and throw together a few HTML-like files and I had a web app. I used pattern matching to reduce the web-facing code for <a href="https://github.com/larryprice/CapitalPunishment">Capital Punishment</a> from ~500 lines of code to &lt;100 lines of code. You are perfect for writing small-time web applications.</p>

<p>But what about large web applications? What about a web app that has normal users and admin users, makes lots of database reads and writes (my previous apps only did reads from a user-facing perspective), and has to be able to show the history of everything, forever, to the authorized users who request it?</p>

<p>You see, Sinatra is kind of an <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC framework</a>, but not exactly. In Sinatra, you have Views (your HTML inter-mixed with Ruby code in your desired DSL) and you have Controllers (each of your routes). When a database is involved, you can use something like <a href="https://github.com/bmizerany/sinatra-activerecord">ActiveRecord</a> or <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a> or <a href="http://datamapper.org/">DataMapper</a> and you have yourself Models.</p>

<p>So every route is kind of a Controller. Every. Route. In Capital Punishment, there were once 8 routes (there are now 7). In the project I&rsquo;ve been working on recently, there are currently 56 routes. 56 routes in the language described above means I kind of have 56 controllers.</p>

<p>That&rsquo;s been pretty overwhelming, especially since the traditional way of creating routes in Sinatra is to shove them all in the same file. There are a few ways I could think of to address this. The way we chose six months ago (for better or worse) was found <a href="http://stackoverflow.com/questions/5877000/what-is-a-controller-in-sinatra">on StackOverflow</a>, and involves creating a bunch of different files where you shove all related routes. So you get this situation:</p>

<figure class='code'><figcaption><span>app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">App</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;controllers/helpers&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="s2">/controllers/*.rb&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span><span class="o">.</span><span class="n">chomp</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">file</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">App</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:home</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>controllers/reports_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">App</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/reports/user_bills&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:user_bills_report</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And so on and so forth. This works fine for a while, but we&rsquo;ve ended up with 13 &ldquo;controller&rdquo; files, many of which are not trivial. This also makes the App class quite large since its controllers handle most of the logic for the app. This also doesn&rsquo;t enforce any kind of URL-naming logic, so if a developer is working hard (s)he may create both <code>/reports/user_bills</code> and <code>user_info_reports</code> without realizing the inconsistency (s)he just injected into the system.</p>

<p>In hindsight, this method is not perfect. I think that the Rails method of individual controllers is significantly better for large apps. Some people have been using other methods for trying to make Sinatra more MVC, such as <a href="https://github.com/jorrizza/sinatra-mvc">sinatra-mvc</a>. To be frank, sinatra-mvc pretty much does the same thing we&rsquo;ve done, but with more structure.</p>

<p>I think what I&rsquo;ve learned is that you should use a tool for its intended purpose. Sinatra was written to quickly create web apps in Ruby with minimal effort. Once you have more than 10-15 routes, you should reconsider whether your app can still be called &ldquo;minimal effort.&rdquo; Sinatra may fly you to the moon, but you&rsquo;re unlikely to see what spring is like on Jupiter or Mars.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beware of Group Projects]]></title>
    <link href="http://larryprice.github.io/blog/2013/08/22/beware-of-group-projects/"/>
    <updated>2013-08-22T21:22:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/08/22/beware-of-group-projects</id>
    <content type="html"><![CDATA[<p>Relying on other people is hard. I&rsquo;ve always found it difficult to understand that other people aren&rsquo;t me. Don&rsquo;t get me wrong, working with others can be really rewarding. Maybe &ldquo;Beware of Group Projects&rdquo; is not the best title. More like &ldquo;Be Wary that Working with Others is Not the Same as Working with Yourself.&rdquo; But that&rsquo;s a pretty long title, and reading (like working with others) is hard.</p>

<p>I&rsquo;ve been spending a lot of my spare time collaborating on a project with a small group of other developers. I normally do this kind of thing on my own. I started thinking about the differences in working by myself and collaborating with other devs. Then I decided that it would look good in a list format comparing each circumstance from both sides. I was wrong, but couldn&rsquo;t think of a better way to present it.</p>

<h2>Let&rsquo;s Start a New Project!</h2>

<p><strong>As an Individual</strong>: This project is going to help me! I can use this new technology and I&rsquo;ll learn so much!<br/>
<strong>As a Group</strong>: This project is going to help our customer! We can use this new technology and everyone will learn so much!</p>

<h2>Let&rsquo;s Work!</h2>

<p><strong>As an Individual</strong>: I&rsquo;ve got 5 minutes, that&rsquo;s enough time to make those adjustments I&rsquo;ve been thinking about&hellip;<br/>
<strong>As a Group</strong>: We&rsquo;ve got 5 minutes, but once we find a conference room, set up the projector, and update our branch I&rsquo;ll have to go pick up my wife. Pass.</p>

<h2>Let&rsquo;s Not Work</h2>

<p><strong>As an Individual</strong>: I could work, or I could just play Prison Architect all weekend. &hellip;I&rsquo;ll have the happiest inmates this side of Alcatraz by Monday morning!<br/>
<strong>As a Group</strong>: We&rsquo;ve set aside these times to meet, you should come help! There might be pizza if you stay long enough.</p>

<h2>Knowledge</h2>

<p><strong>As an Individual</strong>: Now I know how to do X.<br/>
<strong>As a Group</strong>: Now I know how to do X. Now you know how to do X, and you know how to do X, and you know how to do X! I&rsquo;m the Oprah of Knowing X!</p>

<h2>Coding Standards</h2>

<p><strong>As an Individual</strong>: Whoops, I mixed camelCase and under_scores when naming my classes. Oh well.<br/>
<strong>As a Group</strong>: For the love of Linux Torvalds, how do you not remember to prefix your public member variables with &lsquo;pub_&rsquo; and postfix your private member variables with &lsquo;_private&rsquo;?</p>

<h2>Testing</h2>

<p><strong>As an Individual</strong>: Pfft.<br/>
<strong>As a Group</strong>: TEST ALL THE THINGS! It&rsquo;s the best way we can guarantee that our code changes don&rsquo;t break existing functionality.</p>

<h2>I&rsquo;m Bored</h2>

<p><strong>As an Individual</strong>: Forget the months of work spent on X, I think I&rsquo;ll work on Y now.<br/>
<strong>As a Group</strong>: If we finish, we&rsquo;ll have made something useful. Someone needs us this! You&rsquo;ll be happy you kept working on it in a few weeks.</p>

<h2>We&rsquo;re Done!</h2>

<p><strong>As an Individual</strong>: I made an app that let&rsquo;s you draw circles. A job well done, if I do say so myself. I believe I&rsquo;ll have a beer.<br/>
<strong>As a Group</strong>: We invented the warp drive, but it hits a theoretical limit at approximately 9.5 warp. Beer all around! We start work on version 2.0 next week!</p>

<p>The point is that working with others is not bad. In fact, working with others helps give me a sense of responsibility in what I&rsquo;m working on, and motivates me to continue even when I&rsquo;m in a lull. I&rsquo;ve thrown out so many individual side-projects because I just wasn&rsquo;t motivated, or was no longer convinced of its usefulness. It&rsquo;s also (theoretically) easier to build bigger projects with groups because there are more arms to swing more hammers.</p>

<p>&ldquo;Beware of Group Projects&rdquo; if you don&rsquo;t have time, or if you can&rsquo;t compromise, or if you don&rsquo;t care. Otherwise, just be wary that working with others is not the same as working with yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Trouble with Time Zones (aka Learn From My Mistakes Part 1)]]></title>
    <link href="http://larryprice.github.io/blog/2013/08/07/the-trouble-with-time-zones-aka-learn-from-your-mistakes-pt-1/"/>
    <updated>2013-08-07T22:00:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/08/07/the-trouble-with-time-zones-aka-learn-from-your-mistakes-pt-1</id>
    <content type="html"><![CDATA[<blockquote><p>As a user, my data&rsquo;s LastModifiedDate should not be updated when I Export it, and it should be in UTC.</p></blockquote>

<p>That&rsquo;s the gist of the story I was tasked with a few weeks ago. Seemed easy enough: just set the &ldquo;LastModifiedDate&rdquo; field of each XML node to the LastModifiedDate pulled from the database converted to UTC. I can do the development and write up some Cucumber tests in an hour, two hours tops. Find a few small caveats along the way, get it out of development and through code review by the next morning. Push it to the mainline and watch the build go green. All done, dust off my hands and move on to something else.</p>

<p>When has anything ever been that simple? Certainly not in the fantastical world of software development! About ten minutes after the build server confirmed a successful build of my code on the tip of our main branch, a face popped up over the cube wall. &ldquo;Hey, why&rsquo;d you break the build?&rdquo; My teammate was having trouble running my LastModifiedDate tests. All of his time comparisons were off by an hour. My computer (and the build server) were in one time zone; his was in another. I immediately realized the exact lines of the code that weren&rsquo;t dealing with time zones. We agreed to let the code remain on the build server instead of backing it out since the build server was green, and I created/tested/pushed a couple of patches to fix the problem. Green build on the build server. Green build amongst all my time-disabled peers. The next morning I had a panic attack in the shower thinking about how some of my test data could be affected by the switch to UTC. I rushed into work early and put in another patch, this one slightly changing the format of some of my test data. After doing this, I realized that what I had done was completely unnecessary and decided I should probably get my blood pressure checked.</p>

<p>Then: silence. I was satisfied I&rsquo;d seen the end of my time zone issues which I&rsquo;d spent nearly as much time patching as I had developing the initial solution. Two weeks pass. Monday morning there&rsquo;s an email from another country in my inbox, &ldquo;This test was written that only works in American time zones! Who is fixing this?&rdquo; After quite a few emails and chats I found that their main branch had merged in a version of our main branch between my original solution and my patch. The developer agreed to be patient until his team could start using the newer version of our branch. Four hours later I get another email from developers on another continent. I sent them the patches I made previously compressed into one to keep them working.</p>

<p>Was this a small mistake? On a project with a small, local team the answer is definitely yes. This project in particular involves a large number of developers who don&rsquo;t all test in the same time zone and who work on a number of different branches that feed into each other in weekly chunks. Despite that, I think this error could have gone greatly unnoticed had I simply backed out the original changes and pushed the patches and original solution together. My confidence (hubris?) really bit me on this one. Initially only a single developer seemed to be affected by my oversight; fate selected a build between my original solution and my patches to push to the other branches to make sure more people noticed my mistake.</p>

<p><strong>In hindsight</strong>, The Right Thing to Do was to assume fault and back out immediately. One developer having build issues is still one more than should have been affected. Here&rsquo;s hoping this bit o&#8217; hindsight today leads to better foresight tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective C++]]></title>
    <link href="http://larryprice.github.io/blog/2013/07/16/effective-c-plus-plus/"/>
    <updated>2013-07-16T22:11:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/07/16/effective-c-plus-plus</id>
    <content type="html"><![CDATA[<h3>The Gist</h3>

<p><a href="http://www.amazon.com/gp/product/0321334876/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321334876&amp;linkCode=as2&amp;tag=larpriandthee-20"><em>Effective C++</em></a> is a list of ways to write not-your-average-bear C++ code. The author, <a href="http://www.aristeia.com/">Scott Meyers</a>, outlines 8 specific topics for improving code, and a few more miscellaneous tips.</p>

<h3>My Opinion</h3>

<p>Lots of good can come from reading this book. I borrowed it from a more-experienced co-worker and noticed many of the interesting coding standards this co-worker used came directly from this book. And I agree with it. I&rsquo;ve been actively trying to follow the lessons learned in this book from the moment I picked it up.</p>

<p>I learned C++ the hard way: I was thrown into an internship where I didn&rsquo;t really have enough skills to contribute to the project, and my &ldquo;boss&rdquo; didn&rsquo;t really have anywhere to put me. So I was handed a book, pointed to <a href="http://www.cplusplus.com/">this wonderous website</a>, and I wrote some little helper apps for the project. I wasn&rsquo;t taught anything about form or any of that formal business. Then I took a C++ class in college, and never bothered to learn any of the coding standards because I had enough previous knowledge to get by my own way (and appear to be really good while doing it).</p>

<p>So this book showed me a lot of the why certain things in C++ are the way they are. It explained to me that a copy constructor is called every time you pass an object directly through a function, and how assignment operators are used whenever an equals sign appears. It told me why my destructors need to be virtual. It explained a lot about smart_ptr and auto_ptr that I never thought to think about.</p>

<p>Admittedly, there are parts of the book that are hard to follow. I consider Chapter 7 (Templates and Generic Programming) and Chapter 8 (Customizing new and delete) to be extremely technical chapters not meant for the faint of heart, and the lessons learned in these chapters are not necessarily useful in day-to-day programming. Chapter 9 is simply called Miscellany, and it delivers no new information for improving one&rsquo;s C++ skills.</p>

<h3>Who Would Like This</h3>

<p>C++ Programmers should have this book (at least the first 6 chapters) crammed down their throats and into their squishy pink brains. After learning all the &ldquo;basic&rdquo; concepts of C++, the lessons this book teaches in design and the nature of C++ should be taken into consideration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel On Software]]></title>
    <link href="http://larryprice.github.io/blog/2013/04/28/joel-on-software/"/>
    <updated>2013-04-28T11:38:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/04/28/joel-on-software</id>
    <content type="html"><![CDATA[<blockquote><p>We&rsquo;re programmers. Programmers are, in their hearts, architects, and the
first thing they want to do when they get to a site is to bulldoze the place
flat and build something grand. We&rsquo;re not excited by incremental renovation:
tinkering, improving, planting flower beds.</p>

<p>&mdash; Joel Spolsky, &ldquo;Things you Should Never Do, Part I&rdquo;</p></blockquote>

<h3>The Gist</h3>

<p><a href="http://www.amazon.com/gp/product/1590593898/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1590593898&amp;linkCode=as2&amp;tag=larpriandthee-20"><em>Joel On Software</em></a> is a collection of blog posts by the great <a href="http://www.joelonsoftware.com/">Joel Spolsky</a>. He has risen to Internet Fame after his experience working for Microsoft and eventually starting his own company. The &ldquo;chapters&rdquo; (blog posts) provide insight into picking a language for your codebase, recruiting engineers, managing programmers, fixing bugs, paper prototyping, and how Microsoft works.</p>

<h3>My Opinion</h3>

<p>Joel Spolsky is a god sent down from Mount Olympus to calmly explain to us why we are sometimes terrible people and then goes on to tell us it&rsquo;s okay and we should learn from our past. I loved this book, especially since I read it at the same time as some really terrible books (namely <a href="http://www.amazon.com/gp/product/0672326140/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0672326140&amp;linkCode=as2&amp;tag=larpriandthee-20">The Inmates are Running the Asylum</a> and <a href="http://www.amazon.com/gp/product/1491017082/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1491017082&amp;linkCode=as2&amp;tag=larpriandthee-20">Enterprise Games</a>; I do not recommend these books).</p>

<p>Spolsky talks a lot about specs in the first part of the book, and at first I thought that he was stating too much of the obvious; but then why don&rsquo;t we do specs in this obvious way? Instead, we resign ourselves to write a tiny portion of the spec, start programming, and then implicitly change the spec while only haphazardly updating our documentation. I&rsquo;ve been on projects before where we would have greatly benefitted from having a solid spec; we knew exactly what needed to be done, because we were rewriting a successful product the company had released several years ago. With an ever-changing spec, we programmed ourselves into a hole, and struggled for at least half a year to claw our way back out. I have to wonder if more pre-planning would have saved us from ourselves.</p>

<p>Spolsky&rsquo;s advice on hiring people is invaluable (<a href="http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html">The Guerrilla Guide to Interviewing</a>). In fact, I wish that I had read some of these blog posts while I was interviewing. Spolsky says that recruiters should ask &ldquo;impossible questions&rdquo; and not worry about what the answers given are, just that the recruit comes up with something. He says to stop asking trivia questions. He talks about relying on all interviewers equally: if any two interviewers say &ldquo;No&rdquo; to a candidate, the candidate is toast. He talks about asking candidates about projects and looking for passion, which is almost always the sign of a good programmer.</p>

<p>Spolsky talks about the commodity market of software/hardware. To sum it up, the supply of one drives the demand of the other. This section made me think about the current PC market: hardware is cheap <em>and</em> software is cheap. Not only is software cheap, but it&rsquo;s often <em>free</em>. Prices for hardware haven&rsquo;t been going down at nearly the rate it used to, but that seems natural as the price approaches the cost of labor and parts. Most of the hardware innovation right now seems to be aimed at the tiny computers in our pockets (or <a href="http://www.google.com/glass/start/">on our face</a>, soon enough). Google&rsquo;s software makes money by displaying ads using its search engine, so Google has entered the market of making software that is compatible with all kinds of different hardware. Google has played the commodities game like a champ, getting hardware running their software into hundreds of millions of pockets.</p>

<p>Some of the weaker parts of the book are when Spolsky talks about .NET. I&rsquo;m not going to go into detail, but when he wrote these posts, .NET was just entering the market. Spolsky starts by bashing .NET for making all the old Windows API code unusable, but in later blog posts falls hard for .NET and starts thinking about ways to rewrite his entire life in .NET.</p>

<h3>Who Would Like This</h3>

<p>I believe that programmers are the main audience for this book, and I am a programmer who loved reading it. Spolsky does not talk down to the reader, nor does he dumb down the nitty-gritty technical blog posts.</p>

<p>Programmers who intend to become managers may get added benefit from this book, as Spolsky discusses some interesting recruiting techniques and ways to deal with programmers. My company uses some of Spolsky&rsquo;s advice when hiring engineers (quite a bit of it, thinking back to my interview), and we&rsquo;ve been hiring only the best and brightest cowboys in the Midwest for years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tags in C++ Cucumber tests]]></title>
    <link href="http://larryprice.github.io/blog/2013/04/15/tags-in-c-plus-plus-cucumber-tests/"/>
    <updated>2013-04-15T22:10:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/04/15/tags-in-c-plus-plus-cucumber-tests</id>
    <content type="html"><![CDATA[<p>The project I&rsquo;m working on is slowly adding <a href="https://github.com/cucumber/cucumber-cpp">Cucumber</a> acceptance tests to our massive code base in order to replace aging <a href="https://code.google.com/p/robotframework/">Robot tests</a>. One would think that getting developers on our team to use Cucumber would be east, since it uses <a href="https://code.google.com/p/googletest/">googletest</a> and <a href="https://code.google.com/p/googlemock/">googlemock</a> which we use for our unit tests. Unfortunately, very few people on the team have been motivated to write integration tests using the new framework, so I have very few people to go to when I have problems writing my own integration tests.</p>

<p>The area of the code I deal with uses <a href="http://www.mono-project.com/Embedding_Mono">embedded mono</a> to communicate with some C# libraries that we share with other applications. This means we have unmanaged memory which talks with managed memory. This has caused us more headaches than I care to remember. One such problem is that we have a static object that we only want to create and destroy once. So I write my first Cucumber test:</p>

<figure class='code'><figcaption><span>DoStuff.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Do that thing that we have to do</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Do it my way</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I have done step </span><span class="s">1</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">When </span><span class="nf">I do step </span><span class="s">2</span><span class="nf"></span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should see results</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DoStuff_StepDefinitions.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cucumber-cpp/defs.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;gtest/gtest.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mono/jit/jit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">QString</span> <span class="n">DOMAIN_NAME</span> <span class="o">=</span> <span class="s">&quot;bridge&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// The static Mono object</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">MonoDomain</span> <span class="o">*</span><span class="n">Domain</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BEFORE</span><span class="p">()</span> <span class="p">{</span> <span class="n">Context</span><span class="o">::</span><span class="n">Domain</span> <span class="o">=</span> <span class="n">mono_jit_init</span><span class="p">(</span><span class="n">DOMAIN_NAME</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">AFTER</span><span class="p">()</span> <span class="p">{</span> <span class="n">mono_jit_cleanup</span><span class="p">(</span><span class="n">Context</span><span class="o">::</span><span class="n">Domain</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">GIVEN</span><span class="p">(</span><span class="s">&quot;^I have done step 1$&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">WHEN</span><span class="p">(</span><span class="s">&quot;^I do step 2$&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">THEN</span><span class="p">(</span><span class="s">&quot;^I should see results$&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before my scenario starts, the <code>BEFORE()</code> function is called and my MonoDomain object is created. When the scenario ends, my <code>AFTER()</code> statement is called and the objects in my MonoDomain are cleaned up. Now, I add a second scenario.</p>

<figure class='code'><figcaption><span>DoStuff.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Do that thing that we have to do</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Do it my way</span>
</span><span class='line'><span class="nf">  ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">Scenario: Do it your way</span>
</span><span class='line'><span class="nf">  ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I run my Cucumber test, and Mono explodes. Why? Because the <code>BEFORE()</code> and <code>AFTER()</code> functions are not <em>before all</em> and <em>after all</em>, but <em>before each</em> and <em>after each</em>.</p>

<p>So what should we do? Move the function calls in the <code>BEFORE()</code> and <code>AFTER()</code> statements into the constructor and destructor of the Context class?</p>

<p>Same problem. Are there <code>BEFORE_ALL()</code> and <code>AFTER_ALL()</code> macros? No.</p>

<p>I began to panic. I asked the person who taught me how to write Cucumber tests in C++. Our idea was to create the MonoDomain during what I knew would be the first step, and delete it after what I knew would be the last step. Oh, the horror! That would mean not being able to reuse those steps, not to mention moving the creation/destruction code around anytime I wanted to add new steps or change the order of my previous steps. We also thought about making specific steps and sticking them at the front of the first scenario and at the end of the last scenario. This still meant that the lay developer would have to recognize these first and last steps from the others. I asked my local senior engineer, and his advice was to create separate Cucumber tests for each scenario I intended to create. My plan was to write 6 scenarios in the long-term for this feature, and I really didn&rsquo;t want to turn these very similar tests with beautifully reusable steps into 6 features.</p>

<p>Then it hit me: Cucumber is open source. I found the source <a href="https://github.com/cucumber/cucumber-cpp">on Github</a> and started looking through <a href="https://github.com/cucumber/cucumber-cpp/tree/master/examples/">the example code</a>. It was there that I discovered <a href="https://github.com/cucumber/cucumber-cpp/tree/master/examples/FeatureShowcase/tag">tags</a>. Tags were the solution to my problem.</p>

<figure class='code'><figcaption><span>DoStuff.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Do that thing that we have to do</span>
</span><span class='line'>
</span><span class='line'><span class="nf">@first</span>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Do it my way</span>
</span><span class='line'><span class="nf">  ...</span>
</span><span class='line'>
</span><span class='line'><span class="nf">@last</span>
</span><span class='line'><span class="nf">Scenario: Do it your way</span>
</span><span class='line'><span class="nf">  ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using tags, I could label my scenarios with meaningful <code>@first</code> and <code>@last</code> tags to signify the beginning and end of my tests. The trick is to then add the required tags to my <code>BEFORE()</code> and <code>AFTER()</code> macro as such:</p>

<figure class='code'><figcaption><span>DoStuff_StepDefinitions.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;cucumber-cpp/defs.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;gtest/gtest.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mono/jit/jit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">QString</span> <span class="n">DOMAIN_NAME</span> <span class="o">=</span> <span class="s">&quot;bridge&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Context</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// The static Mono object</span>
</span><span class='line'>  <span class="k">static</span> <span class="n">MonoDomain</span> <span class="o">*</span><span class="n">Domain</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BEFORE</span><span class="p">(</span><span class="s">&quot;@first&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">Context</span><span class="o">::</span><span class="n">Domain</span> <span class="o">=</span> <span class="n">mono_jit_init</span><span class="p">(</span><span class="n">DOMAIN_NAME</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">AFTER</span><span class="p">(</span><span class="s">&quot;@last&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">mono_jit_cleanup</span><span class="p">(</span><span class="n">Context</span><span class="o">::</span><span class="n">Domain</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now my MonoDomain is only created <em>before</em> the scenario labeled <code>@first</code> and <em>after</em> the scenario labeled <code>@last</code>. Obviously, this isn&rsquo;t the cleanest fix imaginable, but it was the cleanest fix <em>available</em>. Whenever someone wants to add a new step to this test, they need to remember to move the <code>@last</code> tag to their scenario. However, I have the hope that it will be pretty obvious that the second scenario is no longer &ldquo;last&rdquo; when there is a third scenario following the &ldquo;last&rdquo; scenario. Anyway, it leaves me happy enough, since now my tests don&rsquo;t explode and I&rsquo;m able to reuse ~50% of the steps I had already written for the first scenario. I added a third scenario later on and 9 out of the 10 steps in the scenario were reused from the first and second scenario.</p>

<p>There are lots of other cool things you can do with Cucumber tags, like having multiple tags on objects. All tags that match <code>@first</code> will do one thing, but tags that match <code>@first</code> and <code>@second</code> can have multiple <code>BEFORE()</code> or <code>AFTER()</code> clauses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Plans]]></title>
    <link href="http://larryprice.github.io/blog/2013/04/09/changing-plans/"/>
    <updated>2013-04-09T21:45:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/04/09/changing-plans</id>
    <content type="html"><![CDATA[<p>Your code is being sent to the dump.</p>

<p>Don&rsquo;t take it personally. Your code isn&rsquo;t <em>bad</em>. It&rsquo;s just <em>garbage</em>.</p>

<p>Maybe your code wasn&rsquo;t written the way they wanted you to write it. Or maybe they realized that they had already written this code three months ago. Or maybe the customer suddenly decided that they don&rsquo;t need their smartphone to emit fragrances based on the text message they just received.</p>

<p>The &ldquo;why&rdquo; doesn&rsquo;t matter. Plans changed. Your unused code isn&rsquo;t aging well and it&rsquo;s starting to stink up the place, so just do us all a favor and get it outta here!</p>

<p>As developers, we <em>always</em> take this kind of thing personally. Our code is an extension of ourselves. When we feel good, we write code that&rsquo;s clean and concise. When we feel meh, our code is unimaginative and takes longer to write. When we feel bad, we litter the code with variables that don&rsquo;t do anything and then name them after our managers.</p>

<p>But it&rsquo;s not personal, is it? Management doesn&rsquo;t sit in their mansion each evening, sipping a gin martini while adjusting their toupee, thinking about how worthless you are and how to properly punish you while continuing to pay you. Management has better things to think about, like ditching the toupee in favor of hair plugs or Rogaine or whatever hair fad is popular that day.</p>

<p>Plans change. You can lament your loss of three days of &ldquo;ingenious&rdquo; code that will never see the light of day, but management will be equally depressed about the hundreds (thousands?) of dollars lost paying you to work on something that&rsquo;s not production-worthy. You may feel cheated in the short-term, but hopefully you can get something positive out of this change of plan. Maybe your second attempt at the code will jive better with the base architecture, or maybe you&rsquo;ll be able to extract the functionality you need out of another component and limit code duplication, or maybe you&rsquo;ll be able to deliver a different feature that the customer can actually use.</p>

<p>Sure, there may be an occasional senior engineer who thinks that the program should be implemented his or her way, and will make you throw out anything you write that has any deviation from The Plan (which never quite made it out of their heads and into any documentation). Usually you can satiate that senior engineer by listening to them and nodding your head for a few minutes. There&rsquo;s a reason that engineer carries so much weight on the project, so they&rsquo;ll probably be making a valid point while you nod your head and they&rsquo;ll respect you for agreeing with them, even though you secretly wish you could just keep doing it the way you originally planned.</p>

<p>Don&rsquo;t cry over spilled milk. No one&rsquo;s actually questioning your coding competency when they change the plan. The odds are in your favor that the plan changed in the best interest of the project, and whatever code is being thrown out is likely a necessary casualty to benefit the system as a whole. Remember that most of the code you write is used, at least for a little while, so try not to dwell on the code that isn&rsquo;t.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's Still Possible]]></title>
    <link href="http://larryprice.github.io/blog/2013/04/01/whats-still-possible/"/>
    <updated>2013-04-01T22:35:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/04/01/whats-still-possible</id>
    <content type="html"><![CDATA[<p>If every Miss America candidate had her way, there would be peace on Earth and all the hungry mouths would be fed. While Earthlings enjoy violence and controlling others too much to achieve world peace, I have a proposal to help feed those around the world who don&rsquo;t have enough to eat.</p>

<p>It&rsquo;s not an ad campaign. I&rsquo;m not going to send random people a nickle in the mail and then tell them that they could use that nickle to feed a starving child. I&rsquo;m certainly not going to change any of my eating habits. I happen to know a huge source of food that we underutilize. My plan is to kill two birds with one stone. Well, preferably something like 3 million birds with however many stones it takes.</p>

<p>I&rsquo;m talking, of course, about the terrible tyranny of the <a href="http://en.wikipedia.org/wiki/Canada_Goose">Canadian Goose</a>. A little history:</p>

<p>Our ancestors domesticated Canadian Geese in ancient times and used these waterfowl for various acts of labor, including pulling tugboats down the Mississippi, plowing the great Canadian rice paddies, and keeping our elderly company during their final days of life. The young goslings flapped gingerly in the meadows pollinating the wildflowers, apple trees, and various other meadow-related objects. Much to our delight, some of our beloved geese bretheren became sentient, and started selling us medical insurance while performing a spot-on <a href="http://en.wikipedia.org/wiki/Gilbert_Gottfried">Gilbert Gottfried</a> impression.</p>

<p>False. I must apologize for fooling you in this way sweet, sweet reader, but everything you read in the last paragraph was neither true nor fact. In reality, Canadian Geese serve no purpose. Canadian Geese were created accidentally during the Manhatten Project while one of the lab techs from the local university was trying to combine nuclear fission and the bubonic plague to get back at his ex-girlfriend for cheating on him. He quickly became bored of this task when she stopped responding to his texts, and thusly tossed the waste from his experiments in the river. The rest, of course, is history.</p>

<p>Now here we are. There are well over <a href="http://www.ducks.org/hunting/waterfowl-id/canada-goose">3 million Canadian Geese nationwide</a>, which is decidedly more than anyone finds pleasant. These geese are no longer afraid of humans, so they tend not to run away from us. In fact, we have spoiled the birds so much that some geese will actually approach humans demanding a bite of stale bread. If no bread gift is offered, the foul fowl will emit a frightening hissing noise, raise its wings, and chase off the poor human. Any sidewalk near a pond quickly becomes covered in goose byproducts during the breeding season, which might as well be year-round. I, for one, think that the geese have gone too far. They ruin our picnics, our walks in the park, our egg-stealing competitions, and our feather-collecting scavenger hunts. It&rsquo;s time for the final showdown: Man versus Goose.</p>

<p>Time to tie in the beginning and the parts where I raved like a lunatic: We hunt the geese, and we feed them to people. &lsquo;Nuff said.</p>

<p>People already hunt geese, of course, but it&rsquo;s clearly not enough. Not to mention that these hunters currently just leave the gooseflesh in the woods where lower animals reap the rewards. I propose we extend goose season year-round, and provide free boxes to encourage hunters to package the gooseflesh and send it to the needy in other countries. We&rsquo;ll poison our waterways to take out as many geese as possible, and we will make a wondrous soup for whomever needs it.</p>

<p>It&rsquo;s still possible to feed the hungry. But we need to <em>focus</em> in order to do it. Man versus Goose is not the solution. It&rsquo;s a demonstration of getting distracted from the original cause. The next time someone tries to get you riled up about feeding the hungry through some crazy scheme, remember that there&rsquo;s no better way than addressing the problem directly. It&rsquo;s still possible to do good in this world if you can avoid the crazy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Battle: Pvreryvre of fyne coddes]]></title>
    <link href="http://larryprice.github.io/blog/2013/03/25/pvreryvre-of-fyne-coddes/"/>
    <updated>2013-03-25T22:09:00-04:00</updated>
    <id>http://larryprice.github.io/blog/2013/03/25/pvreryvre-of-fyne-coddes</id>
    <content type="html"><![CDATA[<p>Ice pellets bounced off my head as I walked myself home late one night. The air was dreadfully cold, so I swooped into one of Carmel&rsquo;s seedy side alleys to take a shotcut. Out of the shadows crept a man wearing a long trenchcoat and thick-rimmed glasses. Hunched over, he brushed his unkempt hair out of his eyes. His coffee-stained breath rushed from beneath his pencil moustache as he asked, &ldquo;Can I interest you in any of these fine iPhone apps?&rdquo; I tried to cautiously back away. &ldquo;How would you like a real BaZynga game, only ninety-nine cents, it&rsquo;s called Perturbed Birds with Pals?&rdquo; I was briefly distracted by sirens in the distance; by the time I returned my glance to the man&rsquo;s last position he had disappeared, my virtual wallet was empty, and my phone was filled with bloatware and repetitive &lsquo;Ville-style games.</p>

<p>There are more KLOCs in this world than there have been McDonald&rsquo;s hamburgers sold. How do the good programmers differentiate themselves from the common street peddlers? How do companies convince you to pay $2.99 for their app when a clone is released less than a week later for free?</p>

<p>The answer? Maybe they don&rsquo;t. Maybe a comparison can be made between software companies and pharamceutical companies.</p>

<p>Big Pharmaceutical companies spend many years researching, developing, and testing drugs to treat the common cold, arthritis, bad cholesterol, or even to sedate your energetic children. These drugs spend several years on the market where patents on the drug are valid, meaning that only the company that invented the drug can legally sell it. After the patent protections expire (approx 7-12 years), any big, small, or mom &amp; pop drug manufacturer is legally allowed to &ldquo;clone&rdquo; this drug and make what&rsquo;s called a &ldquo;generic.&rdquo; Generics are sold at a fraction of the cost of the original drug. At this point, no one wants to give Big Pharma $20 for 6 tablets to cure their heartburn when they could pay $5 for a year&rsquo;s supply of generics.</p>

<p>Software companies tend to spend somewhere between 12 weeks and 12 months developing apps that will be consumed by the general population. If the company just released an Android or iOS app, then the product will stay relevant somewhere between 2 weeks and 2 years. After that time, the app will either no longer have market value or will need to be revamped to please the modern consumer. Within a short number of days or weeks, there is a high probability that surly software pirates will begin to copy your app and put it on the market for free. At this point, no one wants to give your company $4.99 for an endless runner when they could just as easily find a copy for free. Of course, app developers can submit complaints and get the pirated app taken down, but more and more will crop up as time goes on, and eventually it won&rsquo;t be worth the trouble to get the doppelgangers removed.</p>

<p>For both industries, a company comes up with a novel idea and presents it to the world. People who like that product can start associating the brand name with other products. After recognizing the brand, a person may start to trust that company and look for other products associated with the brand. That company will become known as a purveyor of fine wares.</p>

<p>So here we stand, reader. Make code that you can be proud of; not for getting tens of thousands of downloads, but for scrawling your good name on the white boards of the world in Sharpie. The customers will keep coming back as long as you&rsquo;ve got the cure for what ails them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Complete Second Edition]]></title>
    <link href="http://larryprice.github.io/blog/2013/02/19/code-complete-second-edition/"/>
    <updated>2013-02-19T22:38:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/02/19/code-complete-second-edition</id>
    <content type="html"><![CDATA[<blockquote><p>Design is a process of carefully planning small mistakes in order to avoid making big ones.
&mdash; Steve McConnell</p></blockquote>

<h3>The Gist</h3>

<p><em><a href="http://www.amazon.com/gp/product/0735619670/ref=as_li_tf_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=larpriandthee-20">Code Complete Second Edition</a></em> by Steve McConnell is the ultimate programmer&rsquo;s handbook, though certainly not a pocket guide considering its massive 850+ page size. This book contains a seemingly endless amount of information regarding the state of programming circa 2004. Topics range from extremely technical, such as making code readable above making it clever, to office politics, such as dealing with non-technical managers.</p>

<h3>My Opinion</h3>

<p>McConnell has written an encyclopedia for software development. In doing so, the book sometimes suffers from the &ldquo;wide as an ocean, shallow as a puddle&rdquo; complex. Nonetheless, the book holds an incredible amount of information that I found refreshing to see in print.</p>

<p>The use of the term &ldquo;construction&rdquo; to refer to coding throughout the book is an apt analogy for McConnell&rsquo;s views on the world of software development. Before beginning construction, a team should have a plan. Construction requires a solid base. While constructing a project, individuals should ensure that anyone else could look at their part of the project and figure out what&rsquo;s happening. Working with a partner often improves quality. People doing construction should test their work to ensure the integrity of their product. Redoing lower levels causes a lot of pain. The team is unlikely to hit the original due date. Etc, etc.</p>

<p>Many things in this book go directly against what I was taught in at university. McConnell recites a quote several times in the book:</p>

<blockquote><p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.
&mdash; Brian Kernighan</p></blockquote>

<p>At university, we&rsquo;re taught all the secrets of writing clever code: pointer manipulation, recursion, inappropriate variable reuse, and others. We were also never taught to plan ahead (&hellip;besides flowcharts, which were never required) or test, both of which McConnell highly recommends as necessary steps in software development. It&rsquo;s no wonder my programs took so long to debug! Of course, I&rsquo;ve learned to perform these tasks naturally while working as a Real Life Programmer. Reading this book is likely more helpful than taking the first few semesters of programming at university.</p>

<p>A small issue I had was a wishy-washy attitude towards comments. In one chapter, McConnell describes having minimal comments in a code and keeping it mostly self-documenting. He then goes on to show all kinds of different, horrifying comments and justifies why they are sometimes okay.</p>

<p>This is where I will note that <em>Code Complete Second Edition</em> is a book published by <a href="http://en.wikipedia.org/wiki/Microsoft_Press">Microsoft Press</a>. I was often surprised by McConnell&rsquo;s adamance that Visual Basic is the most popular programming language at the time of publishing. Even circa 2004 (the year this book was published), the <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">Tiobe index</a> shows VB behind Java, C, and C++. The <a href="https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language">PyPl index</a> also shows VB behind Java, PHP, C, and C++ in 2004. For the record, VB is a silly language.</p>

<h3>Who Would Like This</h3>

<p>This book would be nice required reading for students. Given the length and technical depth, it&rsquo;s practically a textbook. Developers a few years out of university would still enjoy this text, but some topics are so obvious or overdone that many readers may start skipping chapters. If a developer knew of precisely the area he or she wanted to improve, then said developer could likely benefit from perusing a chapter of this book covering that topic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing an Application to Heroku that Uses Ruby and Mongo]]></title>
    <link href="http://larryprice.github.io/blog/2013/01/20/pushing-an-application-to-heroku-that-uses-ruby-and-mongo/"/>
    <updated>2013-01-20T11:55:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/01/20/pushing-an-application-to-heroku-that-uses-ruby-and-mongo</id>
    <content type="html"><![CDATA[<p><em>This is Part 3 in a multi-part series to detail the creation of a &ldquo;simple&rdquo; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.io/blog/categories/pokephile">Pokephile category</a>. Part 4 of this series details moving from a development environment to a production environment using <a href="http://heroku.com/">Heroku</a>. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>, and the final product can be found <a href="http://pokephile.herokuapp.com">here</a>.</em></p>

<p><a href="http://heroku.com/">Heroku</a> is a hosting service for different types of web applications. The best thing about Heroku is it&rsquo;s free, you get a decent subdomain for your application, and there&rsquo;s no spam email. Go ahead and <a href="http://api.heroku.com/signup">sign up</a> if you don&rsquo;t already have an account.</p>

<p>Now we need the Heroku Toolbelt. I&rsquo;ll illustrate for Ubuntu 12.10, but there&rsquo;s also <a href="https://toolbelt.heroku.com/">documentation for installing on any OS</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</span></code></pre></td></tr></table></div></figure>


<p>The toolbelt installs some Heroku-specific applications in addition to ensuring you have Foreman and <a href="http://git-scm.com/">Git</a> on your system. Now it&rsquo;s time to tell the Heroku Toolbelt who we are.</p>

<figure class='code'><figcaption><span>Step 3 - Modified Excerpt from the Heroku Getting Started guide</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku login
</span><span class='line'>Enter your Heroku credentials.
</span><span class='line'>Email: larry@example.com
</span><span class='line'>Password:
</span><span class='line'>Could not find an existing public key.
</span><span class='line'>Would you like to generate one? <span class="o">[</span>Yn<span class="o">]</span>
</span><span class='line'>Generating new SSH public key.
</span><span class='line'>Uploading ssh public key /home/larry/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<p>In order for Heroku to figure out what ruby gems are needed to run your application, you need to specify a Gemfile. It&rsquo;s wise to specify a specific version of Ruby, and it&rsquo;s also a good idea to keep the gems&#8217; versions close to the state you developed with. For the <a href="http://larryprice.github.io/blog/categories/pokephile">Pokephile</a> application created in this series, this is my Gemfile:</p>

<figure class='code'><figcaption><span>project/Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="ss">:rubygems</span>
</span><span class='line'>
</span><span class='line'><span class="n">ruby</span> <span class="s1">&#39;1.9.3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sinatra&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;1.3.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;3.1.6&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mongoid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;3.0.14&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;2.0.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;2.11.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;1.5.5&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>First I specify a source for my gems: &lsquo;rubygems&rsquo; defaults to &ldquo;<a href="http://rubygems.org">http://rubygems.org</a>&rdquo; and hasn&rsquo;t failed me yet. Next I specify that I want to use Ruby 1.9.3, a necessity because Mongoid 3.x doesn&rsquo;t work correctly with 1.9.2. The versions of the first three gems were chosen by typing the following in the command line to determine which version I had installed on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem query | grep <span class="s1">&#39;sinatra\|haml\|mongoid&#39;</span>
</span><span class='line'>haml <span class="o">(</span>3.1.7, 3.1.6<span class="o">)</span>
</span><span class='line'>mongoid <span class="o">(</span>3.0.17, 3.0.15, 3.0.14<span class="o">)</span>
</span><span class='line'>sinatra <span class="o">(</span>1.3.3, 1.3.2<span class="o">)</span>
</span><span class='line'>sinatra-contrib <span class="o">(</span>1.3.2<span class="o">)</span>
</span><span class='line'>sinatra-reloader <span class="o">(</span>1.0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;~>&rsquo; operator tells Bundler to use greater-than-equal but stop before next highest version. So, for Sinatra &lsquo;~>1.3.2&rsquo; means that Bundler will accept anything greater-than-or-equal-to &lsquo;1.3.2&rsquo; and less than &lsquo;1.4.0.&rsquo; I tend to rely on the &lsquo;~>&rsquo; operator so I can be sure no APIs are changed in my gems.</p>

<p>The next block is a conditional checking in which environment the gems are being installed. This defaults to :development if none is specified. I put the gems used for testing in this block since they&rsquo;re not needed to run the application, but a developer/tester would need these to run the tests.</p>

<p>For this Gemfile to be meaningful, we need to use a program called <a href="http://gembundler.com/">Bundler</a> to &ldquo;bundle&rdquo; the gems and their dependencies in a Gemfile.lock file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>project/
</span><span class='line'><span class="nv">$ </span>sudo apt-get install bundler
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'>...
</span><span class='line'>Your bundle is <span class="nb">complete</span>! Use <span class="sb">`</span>bundle show <span class="o">[</span>gemname<span class="o">]</span><span class="sb">`</span> to see where a bundled gem is installed.
</span></code></pre></td></tr></table></div></figure>


<p>Running bundler will create a Gemfile.lock file and make sure your system has the specified gems. If some gems are missing or need new versions to be installed, bundler will ask the user for their password to get the required gems.</p>

<p>The next step for setting things up is to set up Git. If your application is already using Git, you only need to commit all files to verify that the Gemfile and Gemfile.lock make it into the repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>project/
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Initial commit.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we create a Heroku project and give it a meaningful name. If you can&rsquo;t think of a meaningful name, use &lsquo;heroku create&rsquo; and Heroku will come up with something for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku create meaningful-name
</span><span class='line'>Creating meaningful-name... <span class="k">done</span>, stack is cedar
</span><span class='line'>http://meaningful-name.herokuapp.com/ | git@heroku.com:meaningful-name.git
</span><span class='line'>Git remote heroku added
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re almost there. Because we included accessing Mongo databases in our application, we have to take care of that on the web. The easiest way to do that is using a Heroku Add-on. At this time, there are two major Heroku Add-ons for Mongo databases: <a href="https://addons.heroku.com/mongolab">MongoLab</a> and <a href="https://addons.heroku.com/mongohq">MongoHQ</a>. Both services have a starter service for $0/month, which is pretty awesome in my opinion. I flipped a coin and picked MongoLab for this application. Adding the add-on to our project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku addons:add mongolab:starter
</span></code></pre></td></tr></table></div></figure>


<p>If you haven&rsquo;t already, Heroku will ask you to &ldquo;verify your account&rdquo; before continuing. This means that you have to put in some credit card information. Note that you will not be charged, I guess Heroku just wants some indication that you might eventually pay for something. After you put in your credit card information, you may need to run the above command again.</p>

<p>Now that MongoLab is set up on the server-side, we need to tell Mongoid how to connect to that server. The following command will give you the environment variable needed to connect to the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku config | grep MONGOLAB_URI
</span></code></pre></td></tr></table></div></figure>


<p>Now we update our mongoid.yml file to use that string:</p>

<figure class='code'><figcaption><span>project/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>  <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">production</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">uri</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;MONGOLAB_URI&#39;] %&gt;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">options</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">skip_version_check</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>        <span class="l-Scalar-Plain">safe</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because of the way my application works, I want to prepopulate the database with some Pokemon.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">MONGOLAB_URI</span><span class="o">=</span><span class="sb">`</span>heroku config | grep MONGOLAB_URI | cut -c 15-<span class="sb">`</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>project/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>tools/populate
</span><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;./populater&#39;</span>
</span><span class='line'><span class="nb">true</span>
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'><span class="nb">true</span>
</span><span class='line'>&gt;&gt; Mongoid.load! <span class="s1">&#39;../../mongoid.yml&#39;</span>, :production
</span><span class='line'><span class="o">{</span><span class="s2">&quot;sessions&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;default&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;uri&quot;</span><span class="o">=</span>&gt;nil, <span class="s2">&quot;options&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;skip_version_check&quot;</span><span class="o">=</span>&gt;true, <span class="s2">&quot;safe&quot;</span><span class="o">=</span>&gt;true<span class="o">}}}}</span>
</span><span class='line'>&gt;&gt; Populater.new.add_pokemon 1000
</span><span class='line'>nil
</span></code></pre></td></tr></table></div></figure>


<p>With the production database populated, we need to set an environment variable in our production application defining the environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">MONGOID_ENV</span><span class="o">=</span>production
</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve made changes to the mongoid.yml file, we should commit again and push to Heroku.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;Updating mongoid.yml file for production&quot;</span>
</span><span class='line'>...
</span><span class='line'><span class="nv">$ </span>git push heroku master
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Check your Heroku URL to make sure everything looks okay and call it a day, or make some upgrades as I did for my <a href="http://pokephile.herokuapp.com">personal version of this project</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing a Sinatra App with Capybara]]></title>
    <link href="http://larryprice.github.io/blog/2013/01/19/testing-a-sinatra-app-with-capybara/"/>
    <updated>2013-01-19T12:20:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/01/19/testing-a-sinatra-app-with-capybara</id>
    <content type="html"><![CDATA[<p><em>This is Part 3 in a multi-part series to detail the creation of a &ldquo;simple&rdquo; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.io/blog/categories/pokephile">Pokephile category</a>. Part 3 of this series describes using Capybara to test a Sinatra application. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>, and the final product can be found <a href="http://pokephile.herokuapp.com">here</a>.</em></p>

<p>Now that <a href="http://larryprice.github.io/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">the database is populated</a> with data and I&rsquo;ve switched over to <a href="http://larryprice.github.io/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/">a simpler interface with Mongo</a>, I can actually start creating a UI. For simplicity&rsquo;s sake, I like to use Sinatra on small projects. Sinatra makes it easy to create a web application with minimal effort. With an emphasis on testing this <a href="http://larryprice.github.io/blog/categories/pokephile">series</a>, I want to be sure to throughly test my UI and any application integration. <a href="http://cukes.info/">Cucumber</a> is a brilliant DSL which allows a programmer to describe in plain English how an application should be behaving. The <a href="https://github.com/jnicklas/capybara">Capybara gem</a> is a Rack app that simulates running your application and performing basic user tasks, such as clicking a button, following a link, or, on a lower level, looking at your HTML source. Install Capybara like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo gem install capybara
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what I want my application to do:</p>

<ul>
<li>User is on home page.</li>
<li>User enters name of Pokemon and presses &lsquo;Search&rsquo;.</li>
<li>User is redirected to search page.</li>
<li>User can see some information about Pokemon.</li>
<li>User can repeat the search process.</li>
</ul>


<p>Error scenario:</p>

<ul>
<li>User enters garbage data.</li>
<li>User is redirected to search page.</li>
<li>User sees error message.</li>
<li>User can repeat search process.</li>
</ul>


<p>So I&rsquo;ll begin by writing my features. Cucumber syntax is meant to be readable by non-technical persons, so the &ldquo;code&rdquo; may look a bit odd. All Cucumber feature files are written something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Viewer visits the Home Page</span>
</span><span class='line'><span class="nf">  In order to read the page</span>
</span><span class='line'><span class="nf">  As a viewer</span>
</span><span class='line'><span class="nf">  I want to see the home page of my app</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> View the home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Zowee, mama!</span><span class="nf">&quot; on the page</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;Feature&rdquo; lines are not used in testing; they are simply to give some relevance to the file&rsquo;s feature and to attempt to prevent scope creep in the file. The &ldquo;Scenario&rdquo; lines are what&rsquo;s important. The first line is the test name, the &ldquo;Given&rdquo; line is the pre-condition, and the final line is what should be observed.</p>

<p>In reality, I have only one main feature: &ldquo;Search.&rdquo; One can argue that I also have a feature of &ldquo;seeing&rdquo; my home page and my search page, but those are both trivial cases, so for the purpose of this blog post, I&rsquo;ll skip such tests. Both my success and error case revolves around searching, and there&rsquo;s not really much else to do in the app. I have to create a directory for the cukes, and that directory is called &ldquo;features.&rdquo; I create such a directory in my &ldquo;project/tools/test&rdquo; directory and create a new file called &ldquo;search.feature.&rdquo; Now I&rsquo;ll write the feature:</p>

<figure class='code'><figcaption><span>project/tools/test/features/search.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='Cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> Viewer vists the page</span>
</span><span class='line'><span class="nf"> In order to search the page</span>
</span><span class='line'><span class="nf"> As a visitor</span>
</span><span class='line'><span class="nf"> I want to search for Pokemon.</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Find correct Pokemon from home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Bulbasaur</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">#001 - Bulbasaur</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see an image with url &quot;</span><span class="s">http://img.pokemondb.net/artwork/bulbasaur.jpg</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Types: Grass, Poison</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Show error text from home page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the home page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Johnny Bravo</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Lol! Could not find a Pokemon named &#39;Johnny Bravo.&#39; Try something else!</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Find correct Pokemon from search page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the search page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Bulbasaur</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">#001 - Bulbasaur</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see an image with url &quot;</span><span class="s">http://img.pokemondb.net/artwork/bulbasaur.jpg</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Types: Grass, Poison</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">Scenario:</span><span class="nf"> Show error text from search page</span>
</span><span class='line'><span class="k">  Given </span><span class="nf">I am on the search page</span>
</span><span class='line'><span class="nf"> </span><span class="k">When </span><span class="nf">I type &quot;</span><span class="s">Johnny Bravo</span><span class="nf">&quot; in the search bar</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I click &quot;</span><span class="s">Search</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf"> </span><span class="k">Then </span><span class="nf">I should be on the &quot;</span><span class="s">search</span><span class="nf">&quot; page</span>
</span><span class='line'><span class="nf"> </span><span class="k">And </span><span class="nf">I should see &quot;</span><span class="s">Lol! Could not find a Pokemon named &#39;Johnny Bravo.&#39; Try something else!</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I&rsquo;ve overlooked a lot of tests that one would normally write while doing this, such as verifying that the search bar and search buttons exist and are enabled, but I&rsquo;d like to keep it simple for now and just stick to testing my search feature. What do these tests do? The first scenario starts on the home page, enters data in the search box, presses the search button, and then verifies that all expected Pokemon data is visible. When writing cukes, I can append statements with an &ldquo;And&rdquo; statement as seen above. Run Cucumber:</p>

<figure class='code'><figcaption><span>project/tools/test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cucumber
</span></code></pre></td></tr></table></div></figure>


<p>Cucumber doesn&rsquo;t exactly give us errors, but it also doesn&rsquo;t give us success. Fortunately, what it did give us was sample code for all of the steps we need to write. So, let&rsquo;s perform some copy/paste magic and create a steps file:</p>

<figure class='code'><figcaption><span>project/tools/test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir -p features/step_definitions
</span><span class='line'><span class="nv">$ </span>touch features/step_definitions/search_steps.rb
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the home page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I type &quot;(.*?)&quot; in the search bar$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I click &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should be on the &quot;(.*?)&quot; page$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see an image with url &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the search page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="c1"># express the regexp above with the code you wish you had</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I futilely run &ldquo;cucumber&rdquo; again now, my tests still don&rsquo;t pass because I haven&rsquo;t actually implemented my steps. This is where Capybara comes in. I found that a <a href="https://gist.github.com/428105">Capybara cheat sheet</a> is quite helpful while writing out my steps. The syntax I&rsquo;m going to use is similar to RSpec, except that it includes some Capybara methods. The first two test steps I want to deal with are the &ldquo;Given&rdquo; steps.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the home page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Given</span> <span class="sr">/^I am on the search page$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s2">&quot;Search&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All these statements are just Regular Expressions, as indicated by the /^$/. The regex acts as a sort of method name that Cucumber finds to run the steps. Given I am on the home page is trivial: just &lsquo;visit&rsquo; the index. Given I am on the search page will first require me to click the &ldquo;search&rdquo; button. This is valid because my spec above says this is how to get to the search page. Now can do the &lsquo;When&rsquo; statements.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/^I type &quot;(.*?)&quot; in the search bar$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">When</span> <span class="sr">/^I click &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="n">arg1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I click just needs to click a button/link/whatever on the screen. The &ldquo;(.*?)&rdquo; is a regular expression that will match anything in quotes and assign it to the variable &lsquo;arg1.&rsquo; So I can give any button description and Capybara will try to click a button with the given content. When I type in the search bar takes the regex arg1 and uses the &ldquo;fill_in&rdquo; method to fill in a text input with id &ldquo;pokemon-input.&rdquo; The rest of the steps are all about what should be observed after performing the Given/When steps.</p>

<figure class='code'><figcaption><span>project/tools/test/features/step_definitions/search_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Then</span> <span class="sr">/^I should be on the &quot;(.*?)&quot; page$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">current_path</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s2">&quot;/</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Then</span> <span class="sr">/^I should see an image with url &quot;(.*?)&quot;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg1</span><span class="o">|</span>
</span><span class='line'>  <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//img[@src=&#39;</span><span class="si">#{</span><span class="n">arg1</span><span class="si">}</span><span class="s2">&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I have all of the necessary steps defined! So, I&rsquo;ll run Cucumber and&hellip; Actual errors! None of my four tests made it past the Given step, so I see the output &lsquo;(4 failed, 19 skipped).&rsquo; The only way to fix these errors is to finally start writing a web application. So I&rsquo;ll move back out to the root of my project directory and create a file for my application called &lsquo;app.rb&rsquo; and give it the most basic information to run. And, if you haven&rsquo;t already, install Sinatra.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install sinatra
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Application class inherits from the Sinatra::Base class. This allows me to define a &lsquo;get&rsquo; operation to perform actions and load a web page. &lsquo;get \&rsquo;\&lsquo; do&rsquo; signifies the first page a user sees when they go to my web application, commonly known as a home or index page. I plan to use <a href="http://haml.info">HAML</a> to create my page, so I make a call to haml followed by the name of my HAML document as a symbol. We need to define an &lsquo;index.haml&rsquo; page and stick it in a directory called &lsquo;views&rsquo; for Sinatra to find it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install haml
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      LOL HAI.
</span></code></pre></td></tr></table></div></figure>


<p>Tough work. If you&rsquo;re not familiar with HAML, it&rsquo;s a markup language that is &ldquo;compiled&rdquo; into an HTML page. The main difference between HAML and HTML is that HAML parses white space to figure out where closing tags should be placed. So now I want to run my application. I want to run it using &lsquo;rackup,&rsquo; so I&rsquo;d like to define a &lsquo;config.ru&rsquo; file in the root of my project directory to do all the work for me.</p>

<figure class='code'><figcaption><span>project/config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we run &lsquo;rackup&rsquo; from the root of my project directory and see the fruits of my labor. Open up a web browser and enter &lsquo;localhost:9292&rsquo; in the address bar. You should see a very simple web page with the content of &ldquo;LOL HAI&rdquo; and a title of &ldquo;Pokemon App.&rdquo; If you view the source, you&rsquo;ll see the HTML the HAML was compiled into. Just beautiful, isn&rsquo;t it? Now if I switch back to my test directory and run Cucumber, what happens? The same result. That&rsquo;s because I need to tell Capybara what to load before trying to run the tests. I do this by defining an &ldquo;env.rb&rdquo; file in a &ldquo;support&rdquo; directory of the features directory.</p>

<figure class='code'><figcaption><span>project/tools/test/features/support/env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../../../../app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="no">Application</span>
</span></code></pre></td></tr></table></div></figure>


<p>All I do is require my &ldquo;app.rb&rdquo; file which is seemingly <em>forever</em> away and then set the Capybara.app variable to my Application class. Now I run Cucumber and&hellip; &lsquo;(4 failed, 17 skipped, 2 passed)&rsquo; Two steps passed! Yippee! Now if only the rest passed as well. Looking at my &lsquo;search.feature&rsquo; file, I can see that the first &lsquo;When&rsquo; step is about typing into the search bar. So my first design decision is what kind of search bar I want. I&rsquo;ve opted for the fun way out: using the <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap&rsquo;s</a> <a href="http://twitter.github.com/bootstrap/javascript.html#typeahead">typeahead</a>. The typeahead has functionality to give suggestions while the user types, and the best news is this is already coded for us. Adding the code for my search bar and a search button:</p>

<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>      <span class="nt">%link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap.css&quot;</span>)
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://code.jquery.com/jquery.min.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://twitter.github.com/bootstrap/assets/js/bootstrap-typeahead.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nf">#search</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 10%;&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="nt">%form</span><span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;search&quot;</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-search&quot;</span><span class="p">}</span>
</span><span class='line'>              <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;input-large&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon&quot;</span><span class="p">,</span> <span class="s2">&quot;data-provide&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;typeahead&quot;</span><span class="p">,</span> <span class="s2">&quot;data-items&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;10&quot;</span><span class="p">,</span> <span class="s2">&quot;autocomplete&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;off&quot;</span><span class="p">,</span> <span class="ss">:autofocus</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:placeholder</span> <span class="o">=&gt;</span> <span class="s2">&quot;Find a Pokémon...&quot;</span><span class="p">,</span> <span class="s2">&quot;data-source&quot;</span> <span class="o">=&gt;</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>}
</span><span class='line'>              <span class="nt">%button</span><span class="p">{</span><span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-small&quot;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;margin-bottom: 10px; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>                  Search
</span></code></pre></td></tr></table></div></figure>


<p>In the &lt;head> tag, I include a link to the Bootstrap stylesheet. In the &lt;body> tag, I include a link to the JQuery and Bootstrap Typeahead JavaScript files remotely so I don&rsquo;t have to keep track of them. I then add a &lt;div> tag called &ldquo;search&rdquo; and center it on the page. Inside the div tag I create a form whose action sends a POST signal to the &ldquo;search&rdquo; action. Inside the form is first the typeahead, then a small submit button. The important parameters in the typeahead are &ldquo;data-items&rdquo; and &ldquo;data-source;&rdquo; &ldquo;data-items&rdquo; tells the JavaScript function how many items to suggest at a time, and &ldquo;data-source&rdquo; is an array of data for the JavaScript to search. Notice that my &ldquo;data-source&rdquo; uses the Pokemon class <a href="http://larryprice.github.io/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">created previously</a>, so I need to be able to set up a <a href="http://larryprice.github.io/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/">Mongoid connection</a> to access that data. I&rsquo;ll make this connection in my &ldquo;config.ru&rdquo; file:</p>

<figure class='code'><figcaption><span>project/config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span>
</span><span class='line'>  <span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;mongoid.yml&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="no">Application</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have chosen to extend the Application class in my &ldquo;config.ru&rdquo; file to prevent interference with my test setups later. Taking a look at the application would be a good idea, but if I run &ldquo;rackup&rdquo; now Mongoid will complain about environment setup. By default, &ldquo;Mongoid.load!&rdquo; will try to load the &ldquo;development&rdquo; settings, so I need to include a &ldquo;development&rdquo; setup in my &ldquo;mongoid.yml.&rdquo; For now, it&rsquo;s going to be identical to my &ldquo;test&rdquo; environment setup except for the database name:</p>

<figure class='code'><figcaption><span>project/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">dev</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p>And ensuring some Pokemon are in the &ldquo;dev&rdquo; database:</p>

<figure class='code'><figcaption><span>Populating the dev database</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>irb
</span><span class='line'>&gt;&gt; Dir.pwd
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;project/tools/populate&quot;</span>
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>&gt;&gt; Mongoid.load! <span class="s1">&#39;../../mongoid.yml&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;sessions&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;default&quot;</span><span class="o">=</span>&gt;<span class="o">{</span><span class="s2">&quot;database&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;dev&quot;</span>, <span class="s2">&quot;hosts&quot;</span><span class="o">=</span>&gt;<span class="o">[</span><span class="s2">&quot;localhost&quot;</span><span class="o">]}}}</span>
</span><span class='line'>&gt;&gt; require <span class="s1">&#39;./populater&#39;</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'>&gt;&gt; Populater.new.add_pokemon <span class="nv">152</span>
</span><span class='line'><span class="o">=</span>&gt; nil
</span><span class='line'>&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>And requiring the Pokemon model in app.rb:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;haml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;pokemon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, run &lsquo;rackup&rsquo; from the root of the &lsquo;project&rsquo; directory and load up the web application at &lsquo;localhost:9292.&rsquo; There&rsquo;s now a typeahead and a search button in the top center of the page, and typing in the &lsquo;Search&rsquo; bar shows up to 10 suggestion Pokemon. Now I&rsquo;ll return to my Cucumber tests. I need to add a line in the &lsquo;env.rb&rsquo; file to set up the Mongoid environment and ensure there are Pokemon in the collection.</p>

<figure class='code'><figcaption><span>project/tools/test/features/support/env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/cucumber&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../populate/populater&#39;</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s2">&quot;../../../../app&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;../../mongoid.yml&#39;</span><span class="p">,</span> <span class="ss">:test</span>
</span><span class='line'>
</span><span class='line'><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">add_pokemon</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="no">Application</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can run Cucumber and see some jovial results: &lsquo;(4 failed, 9 skipped, 10 passed).&rsquo; I now have more steps passing than failing! The root cause of the failures is that there currently is no &ldquo;search&rdquo; page; let&rsquo;s fix that:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want my search page to have a search bar just like my index page. If I want them to be identical, I want to only have to change that code once. When writing HAML, I can create a &lsquo;layout.haml&rsquo; file to act as a base page for my application and move all the text from &lsquo;index.haml.&rsquo; I&rsquo;ll add a &lsquo;=yield&rsquo; statement where I want the information from &lsquo;index.haml&rsquo; and &lsquo;search.haml&rsquo; to be placed.</p>

<figure class='code'><figcaption><span>project/views/layout.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nn">!!!</span>
</span><span class='line'><span class="nt">%html</span>
</span><span class='line'>  <span class="nt">%head</span>
</span><span class='line'>      <span class="nt">%title</span> Pokemon App
</span><span class='line'>      <span class="nt">%link</span>(<span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap.css&quot;</span>)
</span><span class='line'>  <span class="nt">%body</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://code.jquery.com/jquery.min.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%script</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">,</span> <span class="ss">:src</span>  <span class="o">=&gt;</span> <span class="s2">&quot;http://twitter.github.com/bootstrap/assets/js/bootstrap-typeahead.js&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nf">#search</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 10%;&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="nt">%form</span><span class="p">{</span><span class="ss">:action</span> <span class="o">=&gt;</span> <span class="s2">&quot;search&quot;</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-search&quot;</span><span class="p">}</span>
</span><span class='line'>              <span class="nt">%input</span><span class="p">{</span><span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;input-large&quot;</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon-input&quot;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;pokemon&quot;</span><span class="p">,</span> <span class="s2">&quot;data-provide&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;typeahead&quot;</span><span class="p">,</span> <span class="s2">&quot;data-items&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;10&quot;</span><span class="p">,</span> <span class="s2">&quot;autocomplete&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;off&quot;</span><span class="p">,</span> <span class="ss">:autofocus</span> <span class="o">=&gt;</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="ss">:placeholder</span> <span class="o">=&gt;</span> <span class="s2">&quot;Find a Pokémon...&quot;</span><span class="p">,</span> <span class="s2">&quot;data-source&quot;</span> <span class="o">=&gt;</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="p">}</span>}
</span><span class='line'>              <span class="nt">%button</span><span class="p">{</span><span class="ss">:type</span><span class="o">=&gt;</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;btn btn-small&quot;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;margin-bottom: 10px; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>                  Search
</span><span class='line'>      <span class="p">=</span><span class="k">yield</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/views/index.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Begin typing to search for your Pokemon!
</span></code></pre></td></tr></table></div></figure>


<p>At this point, I&rsquo;ll create a &lsquo;search.haml&rsquo; file in the &lsquo;views&rsquo; directory, but leave it empty. Running Cucumber now, I get &lsquo;(4 failed, 4 skipped, 15 passed).&rsquo; Pretty close! All I fail now is actually seeing the desired information on the page. First I want to get access to the Pokemon searched for: I can do that by parsing the params passed to us in app.rb:</p>

<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@pokemon</span> <span class="o">=</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:pokemon</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now on my search page:</p>

<figure class='code'><figcaption><span>project/views/search.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Search for another Pokemon.
</span><span class='line'><span class="nf">#search-results</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 20%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%img</span><span class="p">{</span><span class="ss">:src</span> <span class="o">=&gt;</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="s2">&quot;250px&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nt">%br</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;#</span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">number</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nt">%br</span>
</span><span class='line'>  <span class="p">=</span> <span class="s2">&quot;Types: </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">first</span><span class="si">}#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="s1">&#39; &#39;</span> <span class="p">:</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I reference the class variable &ldquo;@pokemon&rdquo; and access its data. To output Ruby-formatted strings, I use an &ldquo;=&rdquo; sign. Running Cucumber, I now see &lsquo;(2 failed, 21 passed).&rsquo; 2 of my 4 tests are passing! A trivial amount of investigation reveals that I didn&rsquo;t deal with the situation where the user types in garbage data. That can mostly be done in the HAML file, but I also want a way to get the bad text the user gave me so they can see what was wrong.</p>

<figure class='code'><figcaption><span>project/views/search.haml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nf">#search-text</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 2%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  Search for another Pokemon.
</span><span class='line'><span class="nf">#search-results</span><span class="p">{</span><span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;position: absolute; width: 100%; text-align: center; top: 20%; font-weight: bold;&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">-</span> <span class="k">unless</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="nt">%img</span><span class="p">{</span><span class="ss">:src</span> <span class="o">=&gt;</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">image</span><span class="p">,</span> <span class="ss">:height</span> <span class="o">=&gt;</span> <span class="s2">&quot;250px&quot;</span><span class="p">}</span>
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;#</span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">number</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="nt">%br</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;Types: </span><span class="si">#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">first</span><span class="si">}#{</span><span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">?</span> <span class="s1">&#39; &#39;</span> <span class="p">:</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="vi">@pokemon</span><span class="o">.</span><span class="n">types</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="p">-</span> <span class="k">else</span>
</span><span class='line'>      <span class="p">=</span> <span class="s2">&quot;Lol! Could not find a Pokemon named &#39;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">.&#39; Try something else!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>project/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Sinatra</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/search&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:pokemon</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@pokemon</span> <span class="o">=</span> <span class="no">Pokemon</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="vi">@name</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">haml</span> <span class="ss">:search</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby code with no output is preceded with a &lsquo;&ndash;&rsquo; and because HAML is space-sensitive, there&rsquo;s no need to include &lsquo;end&rsquo; statements. Now I run Cucumber and&hellip; 4 scenarios/23 steps passed! I have a functional web application! Of course, the page itself is somewhat bland, some of the styles could be put in a stylesheet and reused, and the only tests I&rsquo;ve written are for super-high-level functionality. Those are all problems someone with infinite time would deal with, so I&rsquo;ll just leave the page is is for now.</p>

<p>The next blog post <a href="http://larryprice.github.io/blog/categories/pokephile">in this series</a> will be about deploying this application to the web using Heroku.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from the MongoDB Ruby Driver to Mongoid]]></title>
    <link href="http://larryprice.github.io/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid/"/>
    <updated>2013-01-05T20:04:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/01/05/moving-from-the-mongodb-ruby-driver-to-mongoid</id>
    <content type="html"><![CDATA[<p>This is Part 2 in a multi-part series to detail the creation of a &ldquo;simple&rdquo; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.io/blog/categories/pokephile">Pokephile category</a>. Part 2 details refactoring code using the MongoDB Ruby driver to use Mongoid. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>.</p>

<h3>What I&rsquo;ve Done</h3>

<p>In a <a href="http://larryprice.github.io/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/">previous post</a>, I described creating a class that would populate a database with data scraped from the internet. I used the MongoDB Ruby driver to accomplish this. However, using the driver can be laborious and there are simpler ways. In this post, I&rsquo;m going to refactor the Populater class to use Mongoid.</p>

<h3>Mongoid</h3>

<p><a href="http://http://mongoid.org/en/mongoid/index.html">Mongoid</a> (pronounced mann-goyd) is an Object-Document Wrapper for Ruby. Using mongoid abstracts some of the database operations that must be performed when using the MongoDB Ruby driver. It comes in handy when using models in an MVC application. To install the Mongoid gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install mongoid</span></code></pre></td></tr></table></div></figure>


<h3>Refactoring</h3>

<p>In populater.rb, we only inserted one structure of document into our &ldquo;pokemons&rdquo; collection. That makes this a great opportunity to use Mongoid. We remember that there were four fields in our document: number (string), name (string), image link (string), and types (array). Knowing this, we can create a model for this data:</p>

<figure class='code'><figcaption><span>project/pokemon.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pokemon</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:number</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:types</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it for our model. Although we specified the types in this case, it&rsquo;s not necessary if we want a looser definition of our model. Here&rsquo;s how we change our implementation file:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#require &#39;mongo&#39; #deleted</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../pokemon&#39;</span> <span class="c1">#added</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="c1">#def initialize(db_name) #removed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="c1">#@col = Mongo::Connection.new.db(db_name)[&quot;pokemons&quot;] #deleted</span>
</span><span class='line'>      <span class="c1">#@col.remove #deleted</span>
</span><span class='line'>      <span class="no">Pokemon</span><span class="o">.</span><span class="n">delete_all</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="vi">@data</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num_to_add</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@data</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&quot;//table[@class=&#39;wikitable sortable&#39;]/tr&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>        <span class="k">break</span> <span class="k">if</span> <span class="n">num_to_add</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">dex_num</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">if</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">dex_name</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[2]/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">unless</span> <span class="n">dex_num</span> <span class="o">==</span> <span class="s2">&quot;000&quot;</span>
</span><span class='line'>            <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span> <span class="o">||</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;http://img.pokemondb.net/artwork/</span><span class="si">#{</span><span class="n">dex_name</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">.jpg&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>            <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;images/missingo.png&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">types</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_1</span> <span class="k">unless</span> <span class="n">type_1</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_1</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>        <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_2</span> <span class="k">unless</span> <span class="n">type_2</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_2</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">#@col.insert({:number =&gt; dex_num, :name =&gt; dex_name, :types =&gt; types, :image =&gt; image_link}) #deleted</span>
</span><span class='line'>        <span class="no">Pokemon</span><span class="o">.</span><span class="n">create</span> <span class="p">{</span><span class="ss">:number</span> <span class="o">=&gt;</span> <span class="n">dex_num</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">dex_name</span><span class="p">,</span> <span class="ss">:types</span> <span class="o">=&gt;</span> <span class="n">types</span><span class="p">,</span> <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">image_link</span><span class="p">}</span> <span class="c1">#added</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">num_to_add</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That one&rsquo;s easy. We deleted four lines and added 3. However, now you can see that the Populater does not have to deal with connecting to the database, it only has to know what model it wants to modify. So we&rsquo;ve removed some complexity from this file by no longer requiring the database name on initialization. However, that means that someone else has to be in charge of setting up the initial connection. In the overlying project, we want that someone else to be a controller. In our tests, we want that someone else to be our test file. So let&rsquo;s do it. We&rsquo;re going to start by adding a config section in our before:all block.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'><span class="c1">#require &#39;mongo&#39; #removed</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongoid&#39;</span> <span class="c1">#added</span>
</span><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../../pokemon&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">all</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="n">config</span><span class="o">.</span><span class="n">connect_to</span> <span class="s1">&#39;test&#39;</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span> <span class="c1"># added</span>
</span><span class='line'>      <span class="c1">#@col = Mongo::Connection.new.db(&#39;test&#39;)[&quot;pokemons&quot;] # removed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In doing this, we&rsquo;ve set up any of our document models to use the &lsquo;test&rsquo; database. Now we go through each test and replace the Mongo Ruby Driver syntax with Mongoid syntax, which is similar to Ruby&rsquo;s Array syntax.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">each</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#@populater = Populater.new(&#39;test&#39;) #removed</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span> <span class="c1">#added</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="c1">#expect {Populater.new(&#39;test&#39;)}.to_not raise_error #removed</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes one param and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;empties pokemon collection&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="c1">#@col.insert({:test =&gt; &quot;hi there&quot;}) #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should_not eql 0 #removed</span>
</span><span class='line'>          <span class="c1">#Populater.new(&#39;test&#39;) #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 0 #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">create</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Populater</span><span class="o">.</span><span class="n">new</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;new&rsquo; tests are straightforward. We remove the usage of an input parameter to the Populater initializer. The only significant change we make is to the &ldquo;empties pokemon collection&rdquo; test. Here we replace the Mongo Ruby Driver syntax of inserting into a collection with Mongoid syntax of creating a Pokemon document. The &lsquo;create&rsquo; method inserts a document into the collection with the given values, or defaults if none are given. We also see that we can remove the &ldquo;find&rdquo; syntax completely and just use a &ldquo;count&rdquo; method on the document type.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;adds 0 pokemon given 0&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">0</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 0 #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;adds pokemon with a number&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>          <span class="c1">#@col.find.count.should eql 1 #removed</span>
</span><span class='line'>          <span class="c1">#@col.find.first[&#39;number&#39;].should_not be_nil #removed</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span> <span class="c1">#added</span>
</span><span class='line'>          <span class="no">Pokemon</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;number&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span> <span class="c1">#added</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests for adding 0, 1, and 2 documents to the collection are all very similar. The only change is to replace the Mongo Ruby Driver &ldquo;find.count&rdquo; syntax with the Mongoid &ldquo;count.&rdquo; The &ldquo;adds pokemon with a ____&rdquo; tests all undergo the same changes. I replace the &ldquo;.find.first&rdquo; statement with a simple &ldquo;.first&rdquo; to get the same meaning. So our Populater has been converted to use Mongoid instead of the Mongo Ruby Driver. Bully for us.</p>

<p>There&rsquo;s one more change that would be nice to make before we hang up our hats. Configuring Mongoid using the .config syntax is okay, but it would be a lot nicer to keep all of our configuration in a file. We can create such a file called &ldquo;mongoid.yml&rdquo; and put some configuration information in it:</p>

<figure class='code'><figcaption><span>project/mongoid.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">test</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">sessions</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">test</span>
</span><span class='line'>      <span class="l-Scalar-Plain">hosts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">localhost</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax is valid in Mongoid 3.x. This is a very simply configuration for our test environment. Now we can go back into our test file and change the &lsquo;before:all&rsquo; block:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">all</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1">#Mongoid.configure do |config| #removed</span>
</span><span class='line'>      <span class="c1">#  config.connect_to &#39;test&#39; #removed</span>
</span><span class='line'>      <span class="c1">#end # removed</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s1">&#39;../../../mongoid.yml&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span> <span class="c1">#added</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second parameter can be a string or a symbol. Now there&rsquo;s only one file to modify the environment configurations, and we&rsquo;re better off for it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schemaless databases with Ruby and MongoDB]]></title>
    <link href="http://larryprice.github.io/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb/"/>
    <updated>2013-01-05T16:54:00-05:00</updated>
    <id>http://larryprice.github.io/blog/2013/01/05/schemaless-databases-with-ruby-and-mongodb</id>
    <content type="html"><![CDATA[<p>This is Part 1 in a multi-part series to detail the creation of a &ldquo;simple&rdquo; project combining <a href="http://www.ruby-lang.org/">Ruby</a>, <a href="http://www.mongodb.org/">MongoDB</a>, <a href="http://rspec.info/">RSpec</a>, <a href="http://www.sinatrarb.com/">Sinatra</a>, and <a href="https://github.com/jnicklas/capybara">Capybara</a> in preperation for a larger-scale side project set to begin January 2013. For more in this series, see the <a href="http://larryprice.github.io/blog/categories/pokephile">Pokephile category</a>. Part 1 details getting started with MongoDB and creating a collection using data scraped off the web using <a href="http://nokogiri.org/">Nokogiri</a>. The code for this side-project is located <a href="https://github.com/larryprice/Pokephile">on Github</a>.</p>

<h3>A little background</h3>

<p>NoSQL is a database service used when working with a large amount of data that doesn&rsquo;t fit a relational model (read: <a href="http://en.wikipedia.org/wiki/Nosql">wikipedia</a>). It allows for mass storage without the overhead of SQL relations. There are many types of schemaless database services (<a href="http://en.wikipedia.org/wiki/Nosql#Taxonomy">here&rsquo;s a list</a>), but in particular I&rsquo;ve been looking into what&rsquo;s called &ldquo;Document Store.&rdquo;</p>

<p>Documents can be any number of key-value fields with a unique id. Document Store services usually encode data in a simple format such as XML, YAML, JSON, or BSON for storage purposes. MongoDB is a document store service which uses BSON to store documents. In Mongo, we connect to a specific database and then we can look through &ldquo;collections,&rdquo; which are more-or-less equivalent to &ldquo;tables&rdquo; in relational databases.</p>

<h3>What about MongoDB and the Ruby driver?</h3>

<p>The first step is to get MongoDB working on your machine. Install MongoDB for your system &mdash; on Ubuntu 12.10 I do this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mongodb mongodb-dev mongodb-clients mongodb-server</span></code></pre></td></tr></table></div></figure>


<p>Then we start up the daemon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service mongodb start</span></code></pre></td></tr></table></div></figure>


<h3>What&rsquo;s the concept?</h3>

<p>The concept here is that we are going to have a database populated with <a href="http://www.pokemon.com/">Pokemon</a>. The user types a Pokemon&rsquo;s name into a search field and submits the form, which brings up an image of the Pokemon and some useful information.</p>

<h3>Getting started</h3>

<p>Since I would like to focus on MongoDB, we can start by populating our database with Pokemon. If you&rsquo;re not familiar with Pokemon, there are lots of them (~650 at the date of this blog post). For my purposes, I may want to only add the first ~150 Pokemon, or I may want to add every Pokemon imaginable. I want it to be easy to add more if any new ones are added. So I&rsquo;m going to start this project by creating a Populater, and we&rsquo;re going to use TDD to help us create it.</p>

<p>If you don&rsquo;t have RSpec installed, it&rsquo;s as easy as opening up a shell and:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install rspec mongo</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m going to put the Populater in a tools directory, and I&rsquo;m going to put my spec files in a test/spec directory. The directory structure I want to use is as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project
</span><span class='line'>--tools
</span><span class='line'>----populate
</span><span class='line'>----test
</span><span class='line'>------spec</span></code></pre></td></tr></table></div></figure>


<p>In the &lsquo;tools/test/spec&rsquo; directory, I create &lsquo;populater_spec.rb.&rsquo; We&rsquo;ll write our first test:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax for RSpec is mostly pseudo-English, so it&rsquo;s fairly straightforward to follow. The first &lsquo;describe&rsquo; block says that we are describing the Populater class. The second &lsquo;describe&rsquo; block says that we are describing the &lsquo;new&rsquo; method of the &lsquo;Populater&rsquo; class. The inner-most block is our test. We want to make sure that no exception is thrown when we create a new Populater. To run this test, open a terminal and type:</p>

<figure class='code'><figcaption><span>Running Rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">pwd</span>
</span><span class='line'>~/project/tools/test
</span><span class='line'><span class="nv">$ </span>rspec populater_spec.rb
</span></code></pre></td></tr></table></div></figure>


<p>We get a big fat compile error, obviously due to the fact that there&rsquo;s no such thing as a &lsquo;Populater&rsquo; class. So create the file &lsquo;populater.rb&rsquo; in &lsquo;project/tools/populate&rsquo; and create the class:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And include the &lsquo;Populater&rsquo; class in our spec file:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run rspec. Hooray, we&rsquo;re passing all our tests! Let&rsquo;s add another test and some let&rsquo;s have RSpec do a little work before each test.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">each</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes no params and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;before:each&rsquo; syntax tells RSpec to perform this action before running each test. This way, we don&rsquo;t have to type out &lsquo;Populater.new&rsquo; in each test. When we run RSpec, this test passes. Now let&rsquo;s actually do something meaningful in our new call. We want the Populater to empty all Pokemon from our database as it begins. In order to do this, we need to also tell the Populater what database to use, so we&rsquo;ll refactor slightly to pass in the name of our database to the Populater.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">require_relative</span> <span class="s1">&#39;../../populate/populater&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Populater</span> <span class="k">do</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">all</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="ss">before</span><span class="p">:</span><span class="n">each</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span> <span class="o">=</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#new&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;does not throw when creating instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">expect</span> <span class="p">{</span><span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)}</span><span class="o">.</span><span class="n">to_not</span> <span class="n">raise_error</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;takes one param and returns a Populater instance&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@populater</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="no">Populater</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;empties pokemon collection&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">:test</span> <span class="o">=&gt;</span> <span class="s2">&quot;hi there&quot;</span><span class="p">})</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should_not</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>          <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to the &lsquo;before:each&rsquo; syntax, the &lsquo;before:all&rsquo; syntax runs the statement once. Here we want to get a handle to the &lsquo;pokemons&rsquo; collection from our &lsquo;test&rsquo; database. In our test, we run a &lsquo;find&rsquo; with no arguments on the &lsquo;pokemons&rsquo; collection to query everything in that collection. We also have an &lsquo;insert&rsquo; statement where we insert an arbitrary document into our collection. You&rsquo;ll note later that this garbage document looks nothing like the Pokemon documents we insert, which is just another reason to love document-store databases. We run RSpec and we fail the test. Let&rsquo;s open up &lsquo;populater.rb&rsquo; and fix this.</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">remove</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test fixed. We connect to the same database and access the same collection and remove all the old data on intialize. So now we actually want to add Pokemon to the collection. We&rsquo;ll pick up a new &lsquo;describe&rsquo; block for an &lsquo;add_pokemon&rsquo; method. We&rsquo;ll then test that calling it with 0 adds no Pokemon to the collection.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 0 pokemon given 0&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">0</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run our tests, we get a NoMethodError and fail. We create a trivial fix in populater.rb</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we pass the test, having added 0 Pokemon to our database. Let&rsquo;s do it with 1 now.</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 1 pokemon given 1&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We fail. Another trivial fix:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">num</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">number</span><span class="p">:</span> <span class="n">x</span><span class="p">})</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We pass again. We&rsquo;ll also pass when checking for multiple Pokemon:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds 2 pokemon given 2&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">2</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we&rsquo;re missing substance. There&rsquo;s only garbage being shoved in our database. Our TDD methodology breaks down slightly here because we want our database to have dynamic information scraped from a website, and I don&rsquo;t want to hard code any data nor do I want to scrape the same website in my tests and my implementation. So we&rsquo;re going to do a little bit of behind-the-scenes stuff and test that the fields we want are simply not nil. I want each Pokemon to have a number, name, an array of types, and a link to an image:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;#add_pokemon&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with a number&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;number&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with a name&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">].</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with array of types&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">types</span> <span class="o">=</span> <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;types&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an_instance_of</span> <span class="nb">Array</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_least</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'>      <span class="n">types</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_most</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;adds pokemon with image link&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@populater</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">image</span> <span class="o">=</span> <span class="vi">@col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;image&#39;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">image</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>      <span class="n">image</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_empty</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many websites where you can get this kind of data for each Pokemon, but I chose <a href="http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon">the Pokemon Wiki</a> for its consistency. In the initializer of the Populater, I open up the URL using Nokogiri so I can access the sweet, creamy data contained within. In my add_pokemon method, I extract this data I want based on the way the table is set up on the website. To continue, we need to install the Nokogiri gem:</p>

<figure class='code'><figcaption><span>project/tools/test/spec/populater_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">nokogiri</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we add the logic to add_pokemon:</p>

<figure class='code'><figcaption><span>project/tools/populate/populater.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Populater</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@col</span> <span class="o">=</span> <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="n">db_name</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@col</span><span class="o">.</span><span class="n">remove</span>
</span><span class='line'>      <span class="vi">@data</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://pokemon.wikia.com/wiki/List_of_Pok%C3%A9mon&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_pokemon</span><span class="p">(</span><span class="n">num_to_add</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@data</span><span class="o">.</span><span class="n">xpath</span><span class="p">(</span><span class="s2">&quot;//table[@class=&#39;wikitable sortable&#39;]/tr&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>          <span class="k">break</span> <span class="k">if</span> <span class="n">num_to_add</span> <span class="o">&lt;=</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">dex_num</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>          <span class="k">next</span> <span class="k">if</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">dex_num</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">dex_name</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[2]/a/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">unless</span> <span class="n">dex_num</span> <span class="o">==</span> <span class="s2">&quot;000&quot;</span>
</span><span class='line'>              <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/a/span/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span> <span class="o">||</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;http://img.pokemondb.net/artwork/</span><span class="si">#{</span><span class="n">dex_name</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">.jpg&quot;</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="n">type_1</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[4]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">type_2</span> <span class="o">=</span> <span class="n">row</span><span class="o">.</span><span class="n">at_xpath</span><span class="p">(</span><span class="s1">&#39;td[5]/text()&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'>              <span class="n">image_link</span> <span class="o">=</span> <span class="s2">&quot;images/missingo.png&quot;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">types</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>          <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_1</span> <span class="k">unless</span> <span class="n">type_1</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_1</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>          <span class="n">types</span> <span class="o">&lt;&lt;</span> <span class="n">type_2</span> <span class="k">unless</span> <span class="n">type_2</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">type_2</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>
</span><span class='line'>          <span class="vi">@col</span><span class="o">.</span><span class="n">insert</span><span class="p">({</span><span class="ss">:number</span> <span class="o">=&gt;</span> <span class="n">dex_num</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">dex_name</span><span class="p">,</span> <span class="ss">:types</span> <span class="o">=&gt;</span> <span class="n">types</span><span class="p">,</span> <span class="ss">:image</span> <span class="o">=&gt;</span> <span class="n">image_link</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">num_to_add</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll admit The add_pokemon method is now quite a bit more daunting to interpret. Here&rsquo;s the breakdown of what&rsquo;s going on: Nokogiri finds us the table tag with class of &lsquo;wikitable sortable&rsquo; and we iterate over that. There are two breaking conditions of our loop: we hit the max number of Pokemon as given, or we can&rsquo;t find anymore Pokemon in the table. So we check that we haven&rsquo;t hit our max. Then we find the Pokemon&rsquo;s number in the table after we manually parse the HTML. In the case of this table, the first row is all garbage, so we continue to the next row if we are on the first row.  We then grab the name from the table, which is luckily always in the same place. The branch is for the special case of Pokemon #000 (Missingo), which is set up slightly differently in the table for some reason. We create an empty array and shove our types in it, but we have to be careful because not all Pokemon have two types. We then create a document in the braces and insert it into the collection. The final step is to decrement the loop counter.</p>

<p>Tests pass. We now have a working Populater! Now we can either write a script or open up the irb and populate as necessary and we know that the Populater is functional:</p>

<figure class='code'><figcaption><span>Populating Databases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">irb</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;project/tools/populate&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;mongo&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span> <span class="o">=</span> <span class="ss">Mongo</span><span class="p">:</span><span class="ss">:Connection</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">db</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">)</span><span class="o">[</span><span class="s2">&quot;pokemons&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;./populater&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Populater</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">add_pokemon</span> <span class="mi">152</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">col</span><span class="o">.</span><span class="n">find</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="mi">152</span>
</span><span class='line'><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to further familiarize yourself with the MongoDB Ruby driver, you should check out the MongoDB Koans. Unfortunately, the original <a href="https://github.com/tredfern/MongoDB_Koans">MongoDB Koans</a> have not been updated in a while, and so my more recent installations of Ruby and the MongoDB driver didn&rsquo;t work. I found a set of <a href="https://github.com/edgecase/ruby_koans">updated koans</a> which worked with my install of Ruby 1.9.3. However, the updated version also had a couple of annoying issues with deprecations, so I created <a href="https://github.com/larryprice/MongoDB_Koans">my own fork</a> on GitHub with the fixes.</p>
]]></content>
  </entry>
  
</feed>
